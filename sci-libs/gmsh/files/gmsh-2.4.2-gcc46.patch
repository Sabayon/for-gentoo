--- gmsh-2.4.2.orig/contrib/DiscreteIntegration/recurCut.cpp
+++ gmsh-2.4.2/contrib/DiscreteIntegration/recurCut.cpp
@@ -17,10 +17,12 @@ void recurCut(RecurElement *re, int maxl
     DI_Point p1 = re->el->pt(0);
     DI_Point p2 = re->el->pt(1);
     DI_Point p12 = middle(p1, p2);
-    RecurElement *re0 = new RecurElement(&DI_Line(p1, p12));
+    DI_Line dl = DI_Line(p1, p12);
+    RecurElement *re0 = new RecurElement(&dl);
     recurCut(re0, maxlevel, level);
     re->sub[0] = re0; re0->super = re;
-    RecurElement *re1 = new RecurElement(&DI_Line(p12, p2));
+    DI_Line dl2 = DI_Line(p12, p2);
+    RecurElement *re1 = new RecurElement(&dl2);
     recurCut(re1, maxlevel, level);
     re->sub[1] = re1; re1->super = re;
   }
@@ -34,16 +36,20 @@ void recurCut(RecurElement *re, int maxl
     DI_Point p12 = middle(p1, p2);
     DI_Point p13 = middle(p1, p3);
     DI_Point p23 = middle(p2, p3);
-    RecurElement *re0 = new RecurElement(&DI_Triangle(p1, p12, p13));
+    DI_Triangle dt0 = DI_Triangle(p1, p12, p13);
+    RecurElement *re0 = new RecurElement(&dt0);
     recurCut(re0, maxlevel, level);
     re->sub[0] = re0; re0->super = re;
-    RecurElement *re1 = new RecurElement(&DI_Triangle(p2, p12, p23));
+    DI_Triangle dt1 = DI_Triangle(p2, p12, p23);
+    RecurElement *re1 = new RecurElement(&dt1);
     recurCut(re1, maxlevel, level);
     re->sub[1] = re1; re1->super = re;
-    RecurElement *re2 = new RecurElement(&DI_Triangle(p3, p13, p23));
+    DI_Triangle dt2 = DI_Triangle(p3, p13, p23);
+    RecurElement *re2 = new RecurElement(&dt2);
     recurCut(re2, maxlevel, level);
     re->sub[2] = re2; re2->super = re;
-    RecurElement *re3 = new RecurElement(&DI_Triangle(p12, p13, p23));
+    DI_Triangle dt3 = DI_Triangle(p12, p13, p23);
+    RecurElement *re3 = new RecurElement(&dt3);
     recurCut(re3, maxlevel, level);
     re->sub[3] = re3; re3->super = re;
   }
@@ -60,16 +66,20 @@ void recurCut(RecurElement *re, int maxl
     DI_Point p34 = middle(p3, p4);
     DI_Point p14 = middle(p1, p4);
     DI_Point p1234 = middle(p12, p34);
-    RecurElement *re0 = new RecurElement(&DI_Quad(p1, p12, p1234, p14));
+    DI_Quad dq0 = DI_Quad(p1, p12, p1234, p14);
+    RecurElement *re0 = new RecurElement(&dq0);
     recurCut(re0, maxlevel, level);
     re->sub[0] = re0; re0->super = re;
-    RecurElement *re1 = new RecurElement(&DI_Quad(p12, p2, p23, p1234));
+    DI_Quad dq1 = DI_Quad(p12, p2, p23, p1234);
+    RecurElement *re1 = new RecurElement(&dq1);
     recurCut(re1, maxlevel, level);
     re->sub[1] = re1; re1->super = re;
-    RecurElement *re2 = new RecurElement(&DI_Quad(p1234, p23, p3, p34));
+    DI_Quad dq2 = DI_Quad(p1234, p23, p3, p34);
+    RecurElement *re2 = new RecurElement(&dq2);
     recurCut(re2, maxlevel, level);
     re->sub[2] = re2; re2->super = re;
-    RecurElement *re3 = new RecurElement(&DI_Quad(p14, p1234, p34, p4));
+    DI_Quad dq3 = DI_Quad(p14, p1234, p34, p4);
+    RecurElement *re3 = new RecurElement(&dq3);
     recurCut(re3, maxlevel, level);
     re->sub[3] = re3; re3->super = re;
   }
@@ -84,28 +94,36 @@ void recurCut(RecurElement *re, int maxl
     DI_Point p23 = middle(p2, p3);
     DI_Point p24 = middle(p2, p4);
     DI_Point p34 = middle(p3, p4);
-    RecurElement *re0 = new RecurElement(&DI_Tetra(p1, p12, p13, p14));
+    DI_Tetra dt0 = DI_Tetra(p1, p12, p13, p14);
+    RecurElement *re0 = new RecurElement(&dt0);
     recurCut(re0, maxlevel, level);
     re->sub[0] = re0; re0->super = re;
-    RecurElement *re1 = new RecurElement(&DI_Tetra(p2, p12, p23, p24));
+    DI_Tetra dt1 = DI_Tetra(p2, p12, p23, p24);
+    RecurElement *re1 = new RecurElement(&dt1);
     recurCut(re1, maxlevel, level);
     re->sub[1] = re1; re1->super = re;
-    RecurElement *re2 = new RecurElement(&DI_Tetra(p3, p13, p23, p34));
+    DI_Tetra dt2 = DI_Tetra(p3, p13, p23, p34);
+    RecurElement *re2 = new RecurElement(&dt2);
     recurCut(re2, maxlevel, level);
     re->sub[2] = re2; re2->super = re;
-    RecurElement *re3 = new RecurElement(&DI_Tetra(p4, p14, p24, p34));
+    DI_Tetra dt3 = DI_Tetra(p4, p14, p24, p34);
+    RecurElement *re3 = new RecurElement(&dt3);
     recurCut(re3, maxlevel, level);
     re->sub[3] = re3; re3->super = re;
-    RecurElement *re4 = new RecurElement(&DI_Tetra(p12, p14, p24, p34));
+    DI_Tetra dt4 = DI_Tetra(p12, p14, p24, p34);
+    RecurElement *re4 = new RecurElement(&dt4);
     recurCut(re4, maxlevel, level);
     re->sub[4] = re4; re4->super = re;
-    RecurElement *re5 = new RecurElement(&DI_Tetra(p12, p23, p24, p34));
+    DI_Tetra dt5 = DI_Tetra(p12, p23, p24, p34);
+    RecurElement *re5 = new RecurElement(&dt5);
     recurCut(re5, maxlevel, level);
     re->sub[5] = re5; re5->super = re;
-    RecurElement *re6 = new RecurElement(&DI_Tetra(p12, p13, p23, p34));
+    DI_Tetra dt6 = DI_Tetra(p12, p13, p23, p34);
+    RecurElement *re6 = new RecurElement(&dt6);
     recurCut(re6, maxlevel, level);
     re->sub[6] = re6; re6->super = re;
-    RecurElement *re7 = new RecurElement(&DI_Tetra(p12, p13, p14, p34));
+    DI_Tetra dt7 = DI_Tetra(p12, p13, p14, p34);
+    RecurElement *re7 = new RecurElement(&dt7);
     recurCut(re7, maxlevel, level);
     re->sub[7] = re7; re7->super = re;
   }
@@ -137,28 +155,36 @@ void recurCut(RecurElement *re, int maxl
     DI_Point p3478 = middle(p34, p78);
     DI_Point p5678 = middle(p56, p78);
     DI_Point p12345678 = middle(p1234, p5678);
-    RecurElement *re0 = new RecurElement(&DI_Hexa(p1, p12, p1234, p14, p15, p1256, p12345678, p1458));
+    DI_Hexa dh0 = DI_Hexa(p1, p12, p1234, p14, p15, p1256, p12345678, p1458);
+    RecurElement *re0 = new RecurElement(&dh0);
     recurCut(re0, maxlevel, level);
     re->sub[0] = re0; re0->super = re;
-    RecurElement *re1 = new RecurElement(&DI_Hexa(p2, p23, p1234, p12, p26, p2367, p12345678, p1256));
+    DI_Hexa dh1 = DI_Hexa(p2, p23, p1234, p12, p26, p2367, p12345678, p1256);
+    RecurElement *re1 = new RecurElement(&dh1);
     recurCut(re1, maxlevel, level);
     re->sub[1] = re1; re1->super = re;
-    RecurElement *re2 = new RecurElement(&DI_Hexa(p3, p34, p1234, p23, p37, p3478, p12345678, p2367));
+    DI_Hexa dh2 = DI_Hexa(p3, p34, p1234, p23, p37, p3478, p12345678, p2367);
+    RecurElement *re2 = new RecurElement(&dh2);
     recurCut(re2, maxlevel, level);
     re->sub[2] = re2; re2->super = re;
-    RecurElement *re3 = new RecurElement(&DI_Hexa(p4, p14, p1234, p34, p48, p1458, p12345678, p3478));
+    DI_Hexa dh3 = DI_Hexa(p4, p14, p1234, p34, p48, p1458, p12345678, p3478);
+    RecurElement *re3 = new RecurElement(&dh3);
     recurCut(re3, maxlevel, level);
     re->sub[3] = re3; re3->super = re;
-    RecurElement *re4 = new RecurElement(&DI_Hexa(p5, p58, p5678, p56, p15, p1458, p12345678, p1256));
+    DI_Hexa dh4 = DI_Hexa(p5, p58, p5678, p56, p15, p1458, p12345678, p1256);
+    RecurElement *re4 = new RecurElement(&dh4);
     recurCut(re4, maxlevel, level);
     re->sub[4] = re4; re4->super = re;
-    RecurElement *re5 = new RecurElement(&DI_Hexa(p6, p56, p5678, p67, p26, p1256, p12345678, p2367));
+    DI_Hexa dh5 = DI_Hexa(p6, p56, p5678, p67, p26, p1256, p12345678, p2367);
+    RecurElement *re5 = new RecurElement(&dh5);
     recurCut(re5, maxlevel, level);
     re->sub[5] = re5; re5->super = re;
-    RecurElement *re6 = new RecurElement(&DI_Hexa(p7, p67, p5678, p78, p37, p2367, p12345678, p3478));
+    DI_Hexa dh6 = DI_Hexa(p7, p67, p5678, p78, p37, p2367, p12345678, p3478);
+    RecurElement *re6 = new RecurElement(&dh6);
     recurCut(re6, maxlevel, level);
     re->sub[6] = re6; re6->super = re;
-    RecurElement *re7 = new RecurElement(&DI_Hexa(p8, p78, p5678, p58, p48, p3478, p12345678, p1458));
+    DI_Hexa dh7 = DI_Hexa(p8, p78, p5678, p58, p48, p3478, p12345678, p1458);
+    RecurElement *re7 = new RecurElement(&dh7);
     recurCut(re7, maxlevel, level);
     re->sub[7] = re7; re7->super = re;
   }
--- gmsh-2.4.2.orig/Graphics/gl2png.h
+++ gmsh-2.4.2/Graphics/gl2png.h
@@ -6,6 +6,10 @@
 #ifndef _GL2PNG_H_
 #define _GL2PNG_H_
 
+#ifndef Z_DEFAULT_COMPRESSION
+#define Z_DEFAULT_COMPRESSION  (-1)
+#endif
+
 #include <stdio.h>
 #include "PixelBuffer.h"
 

