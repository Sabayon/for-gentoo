From e8a8333c7b480040b198655bb6023eaf0cb6ade8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ludger=20Kr=C3=A4mer?= <dbluelle@blau-weissoedingen.de>
Date: Thu, 30 May 2013 20:35:41 +0200
Subject: [PATCH 057/110] fix linking of interfaces to classes an interface may
 be defined after the class implementing it.

---
 src/scripting/abc.h                 |  6 ++++-
 src/scripting/abc_opcodes.cpp       | 46 ++++++++++++++++++++++++++++++++-----
 src/scripting/toplevel/toplevel.cpp | 37 ++++++++++++++++++++---------
 src/scripting/toplevel/toplevel.h   |  2 +-
 4 files changed, 72 insertions(+), 19 deletions(-)

diff --git a/src/scripting/abc.h b/src/scripting/abc.h
index c5677cf..c4e5339 100644
--- a/src/scripting/abc.h
+++ b/src/scripting/abc.h
@@ -390,7 +390,10 @@ private:
 
 	//Internal utilities
 	static void method_reset(method_info* th);
-	static void newClassRecursiveLink(Class_base* target, Class_base* c);
+
+	static void SetAllClassLinks();
+	static void AddClassLinks(Class_base* target);
+	static bool newClassRecursiveLink(Class_base* target, Class_base* c);
 	static ASObject* constructFunction(call_context* th, IFunction* f, ASObject** args, int argslen);
 	void parseRPCMessage(_R<ByteArray> message, _NR<ASObject> client, _NR<Responder> responder);
 
@@ -405,6 +408,7 @@ private:
 	static typed_opcode_handler opcode_table_voidptr[];
 	static typed_opcode_handler opcode_table_bool_t[];
 
+
 	//Synchronization
 	Mutex event_queue_mutex;
 	Cond sem_event_cond;
diff --git a/src/scripting/abc_opcodes.cpp b/src/scripting/abc_opcodes.cpp
index 662cdf9..2d779da 100644
--- a/src/scripting/abc_opcodes.cpp
+++ b/src/scripting/abc_opcodes.cpp
@@ -1924,18 +1924,42 @@ ASObject* ABCVm::nextName(ASObject* index, ASObject* obj)
 	ret->incRef();
 	return ret.getPtr();
 }
+std::vector<Class_base*> classesToLinkInterfaces;
+void ABCVm::SetAllClassLinks()
+{
+	for (unsigned int i = 0; i < classesToLinkInterfaces.size(); i++)
+	{
+		Class_base* cls = classesToLinkInterfaces[i];
+		if (!cls)
+			continue;
+		if (ABCVm::newClassRecursiveLink(cls, cls))
+			classesToLinkInterfaces[i] = NULL;
+	}
+}
+void ABCVm::AddClassLinks(Class_base* target)
+{
+	classesToLinkInterfaces.push_back(target);
+}
 
-void ABCVm::newClassRecursiveLink(Class_base* target, Class_base* c)
+bool ABCVm::newClassRecursiveLink(Class_base* target, Class_base* c)
 {
 	if(c->super)
-		newClassRecursiveLink(target, c->super.getPtr());
-
-	const vector<Class_base*>& interfaces=c->getInterfaces();
+	{
+		if (!newClassRecursiveLink(target, c->super.getPtr()))
+			return false;
+	}
+	bool bAllDefined = false;
+	const vector<Class_base*>& interfaces=c->getInterfaces(&bAllDefined);
+	if (!bAllDefined)
+	{
+		return false;
+	}
 	for(unsigned int i=0;i<interfaces.size();i++)
 	{
 		LOG(LOG_CALLS,_("Linking with interface ") << interfaces[i]->class_name);
 		interfaces[i]->linkInterface(target);
 	}
+	return true;
 }
 
 void ABCVm::newClass(call_context* th, int n)
@@ -1959,6 +1983,9 @@ void ABCVm::newClass(call_context* th, int n)
 		baseClass->decRef();
 		oldDefinition->incRef();
 		th->runtime_stack_push(oldDefinition);
+		// ensure that this interface is linked to all previously defined classes implementing this interface
+		if (th->context->instances[n].isInterface())
+			ABCVm::SetAllClassLinks();
 		return;
 	}
 
@@ -2058,9 +2085,16 @@ void ABCVm::newClass(call_context* th, int n)
 	if(!th->context->instances[n].isInterface())
 	{
 		//Link all the interfaces for this class and all the bases
-		newClassRecursiveLink(ret, ret);
+		if (!newClassRecursiveLink(ret, ret))
+		{
+			// remember classes where not all interfaces are defined yet
+			ABCVm::AddClassLinks(ret);
+		}
 	}
-
+	// ensure that this interface is linked to all previously defined classes implementing this interface
+	if (th->context->instances[n].isInterface())
+		ABCVm::SetAllClassLinks();
+	
 	LOG(LOG_CALLS,_("Calling Class init ") << ret);
 	ret->incRef();
 	//Class init functions are called with global as this
diff --git a/src/scripting/toplevel/toplevel.cpp b/src/scripting/toplevel/toplevel.cpp
index 7e17408..72b38f3 100644
--- a/src/scripting/toplevel/toplevel.cpp
+++ b/src/scripting/toplevel/toplevel.cpp
@@ -999,25 +999,40 @@ void Class_object::finalize()
 	Class_base::finalize();
 }
 
-const std::vector<Class_base*>& Class_base::getInterfaces() const
+const std::vector<Class_base*>& Class_base::getInterfaces(bool *alldefined) const
 {
+	if (alldefined)
+		*alldefined = true;
 	if(!interfaces.empty())
 	{
 		//Recursively get interfaces implemented by this interface
-		for(unsigned int i=0;i<interfaces.size();i++)
+		std::vector<multiname>::iterator it = interfaces.begin();
+		while (it !=interfaces.end())
 		{
 			ASObject* target;
 			ASObject* interface_obj=this->context->root->applicationDomain->
-				getVariableAndTargetByMultiname(interfaces[i], target);
-			assert_and_throw(interface_obj && interface_obj->getObjectType()==T_CLASS);
-			Class_base* inter=static_cast<Class_base*>(interface_obj);
-
-			interfaces_added.push_back(inter);
-			//Probe the interface for its interfaces
-			inter->getInterfaces();
+					getVariableAndTargetByMultiname(*it, target);
+			if (interface_obj)
+			{
+				assert_and_throw(interface_obj->getObjectType()==T_CLASS);
+				Class_base* inter=static_cast<Class_base*>(interface_obj);
+				//Probe the interface for its interfaces
+				bool bAllDefinedSub;
+				inter->getInterfaces(&bAllDefinedSub);
+				
+				if (bAllDefinedSub)
+				{
+					interfaces_added.push_back(inter);
+					interfaces.erase(it);
+					continue;
+				}
+				else if (alldefined)
+					*alldefined = false;
+			}
+			else if (alldefined)
+				*alldefined = false;
+			it++;
 		}
-		//Clean the interface vector to save some space
-		interfaces.clear();
 	}
 	return interfaces_added;
 }
diff --git a/src/scripting/toplevel/toplevel.h b/src/scripting/toplevel/toplevel.h
index e2c1668..dc84bbc 100644
--- a/src/scripting/toplevel/toplevel.h
+++ b/src/scripting/toplevel/toplevel.h
@@ -189,7 +189,7 @@ public:
 	void addImplementedInterface(const multiname& i);
 	void addImplementedInterface(Class_base* i);
 	virtual void buildInstanceTraits(ASObject* o) const=0;
-	const std::vector<Class_base*>& getInterfaces() const;
+	const std::vector<Class_base*>& getInterfaces(bool *alldefined = NULL) const;
 	virtual void linkInterface(Class_base* c) const;
 	/*
 	 * Returns true when 'this' is a subclass of 'cls',
-- 
1.8.5.3

