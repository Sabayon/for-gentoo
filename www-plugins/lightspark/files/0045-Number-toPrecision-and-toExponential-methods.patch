From a4eae3700ae1d0afbce95e43fb9e8fa0e315abc9 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sun, 19 May 2013 20:51:17 +0300
Subject: [PATCH 045/110] [Number] toPrecision and toExponential methods

---
 src/scripting/toplevel/Integer.cpp  |  38 ++++++++
 src/scripting/toplevel/Integer.h    |   3 +
 src/scripting/toplevel/Number.cpp   | 190 ++++++++++++++++++++++++++++++++----
 src/scripting/toplevel/Number.h     |   7 ++
 src/scripting/toplevel/UInteger.cpp |  38 ++++++++
 src/scripting/toplevel/UInteger.h   |   3 +
 6 files changed, 260 insertions(+), 19 deletions(-)

diff --git a/src/scripting/toplevel/Integer.cpp b/src/scripting/toplevel/Integer.cpp
index 7475cbf..52babf9 100644
--- a/src/scripting/toplevel/Integer.cpp
+++ b/src/scripting/toplevel/Integer.cpp
@@ -17,6 +17,7 @@
     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **************************************************************************/
 
+#include <cmath>
 #include "parsing/amf3_generator.h"
 #include "scripting/argconv.h"
 #include "scripting/toplevel/Integer.h"
@@ -196,6 +197,9 @@ void Integer::sinit(Class_base* c)
 	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("MAX_VALUE","",new (c->memoryAccount) Integer(c,numeric_limits<int32_t>::max()),CONSTANT_TRAIT);
 	c->setVariableByQName("MIN_VALUE","",new (c->memoryAccount) Integer(c,numeric_limits<int32_t>::min()),CONSTANT_TRAIT);
+	c->prototype->setVariableByQName("toExponential",AS3,Class<IFunction>::getFunction(Integer::_toExponential, 1),DYNAMIC_TRAIT);
+	c->prototype->setVariableByQName("toFixed",AS3,Class<IFunction>::getFunction(Integer::_toFixed, 1),DYNAMIC_TRAIT);
+	c->prototype->setVariableByQName("toPrecision",AS3,Class<IFunction>::getFunction(Integer::_toPrecision, 1),DYNAMIC_TRAIT);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(Integer::_toString),DYNAMIC_TRAIT);
 	c->prototype->setVariableByQName("valueOf",AS3,Class<IFunction>::getFunction(_valueOf),DYNAMIC_TRAIT);
 }
@@ -257,3 +261,37 @@ int32_t Integer::stringToASInteger(const char* cur, int radix)
 	else
 		return static_cast<int32_t>(value & 0xFFFFFFFF);
 }
+
+ASFUNCTIONBODY(Integer,_toExponential)
+{
+	Integer *th=obj->as<Integer>();
+	double v = (double)th->val;
+	int32_t fractionDigits;
+	ARG_UNPACK(fractionDigits, 0);
+	if (argslen == 0 || args[0]->is<Undefined>())
+	{
+		if (v == 0)
+			fractionDigits = 1;
+		else
+			fractionDigits = imin(imax((int32_t)ceil(::log10(::fabs(v))), 1), 20);
+	}
+	return Class<ASString>::getInstanceS(Number::toExponentialString(v, fractionDigits));
+}
+
+ASFUNCTIONBODY(Integer,_toFixed)
+{
+	Integer *th=obj->as<Integer>();
+	int fractiondigits;
+	ARG_UNPACK (fractiondigits, 0);
+	return Class<ASString>::getInstanceS(Number::toFixedString(th->val, fractiondigits));
+}
+
+ASFUNCTIONBODY(Integer,_toPrecision)
+{
+	Integer *th=obj->as<Integer>();
+	if (argslen == 0 || args[0]->is<Undefined>())
+		return Class<ASString>::getInstanceS(th->toString());
+	int precision;
+	ARG_UNPACK (precision);
+	return Class<ASString>::getInstanceS(Number::toPrecisionString(th->val, precision));
+}
diff --git a/src/scripting/toplevel/Integer.h b/src/scripting/toplevel/Integer.h
index 96e571a..4299057 100644
--- a/src/scripting/toplevel/Integer.h
+++ b/src/scripting/toplevel/Integer.h
@@ -49,6 +49,9 @@ public:
 	ASFUNCTION(_constructor);
 	ASFUNCTION(generator);
 	ASFUNCTION(_valueOf);
+	ASFUNCTION(_toExponential);
+	ASFUNCTION(_toFixed);
+	ASFUNCTION(_toPrecision);
 	std::string toDebugString() { return toString()+"i"; }
 	//Serialization interface
 	void serialize(ByteArray* out, std::map<tiny_string, uint32_t>& stringMap,
diff --git a/src/scripting/toplevel/Number.cpp b/src/scripting/toplevel/Number.cpp
index f56d2fa..7dfe291 100644
--- a/src/scripting/toplevel/Number.cpp
+++ b/src/scripting/toplevel/Number.cpp
@@ -272,7 +272,9 @@ void Number::sinit(Class_base* c)
 	c->setVariableByQName("NaN","",pnan,CONSTANT_TRAIT);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(Number::_toString),DYNAMIC_TRAIT);
 	c->prototype->setVariableByQName("toLocaleString",AS3,Class<IFunction>::getFunction(Number::_toString),DYNAMIC_TRAIT);
-	c->prototype->setVariableByQName("toFixed",AS3,Class<IFunction>::getFunction(Number::toFixed),DYNAMIC_TRAIT);
+	c->prototype->setVariableByQName("toFixed",AS3,Class<IFunction>::getFunction(Number::toFixed, 1),DYNAMIC_TRAIT);
+	c->prototype->setVariableByQName("toExponential",AS3,Class<IFunction>::getFunction(Number::toExponential, 1),DYNAMIC_TRAIT);
+	c->prototype->setVariableByQName("toPrecision",AS3,Class<IFunction>::getFunction(Number::toPrecision, 1),DYNAMIC_TRAIT);
 	c->prototype->setVariableByQName("valueOf",AS3,Class<IFunction>::getFunction(_valueOf),DYNAMIC_TRAIT);
 }
 
@@ -291,39 +293,189 @@ ASFUNCTIONBODY(Number,_constructor)
 ASFUNCTIONBODY(Number,toFixed)
 {
 	number_t val = obj->toNumber();
-	int fractiondigits=0;
+	int fractiondigits;
 	ARG_UNPACK (fractiondigits,0);
+	return Class<ASString>::getInstanceS(toFixedString(val, fractiondigits));
+}
+
+tiny_string Number::toFixedString(double v, int32_t fractiondigits)
+{
 	if (fractiondigits < 0 || fractiondigits > 20)
-		throwError<RangeError>(kInvalidPrecisionError, Integer::toString(fractiondigits));
-	if(std::isnan(val))
-		return  Class<ASString>::getInstanceS("NaN");
+		throwError<RangeError>(kInvalidPrecisionError);
+	if (std::isnan(v))
+		return  "NaN";
+	if (v >= pow(10., 21))
+		return toString(v);
 	number_t fractpart, intpart;
-	if (fractiondigits == 0)
-		val+=0.5;
-	fractpart = modf (val , &intpart);
+	fractpart = modf (v , &intpart);
 
 	tiny_string res("");
-	number_t v = fabs(intpart);
 	char buf[40];
-	snprintf(buf,40,"%ld",int64_t(v));
+	snprintf(buf,40,"%ld",int64_t(fabs(intpart)));
 	res += buf;
 	
 	if (fractiondigits > 0)
 	{
-		int x = fractiondigits;
+		number_t x = fractpart;
 		res += ".";
-		while (fractiondigits) 
+		for (int i=0; i<fractiondigits; i++)
 		{
-			fractpart*=10.0;
-			fractiondigits--;
+			x*=10.0;
+			int n = (int)x;
+			x -= n;
+			res += tiny_string::fromChar('0' + n);
 		}
-		fractpart+=0.5;
-		snprintf(buf,40,"%0*ld",x,int64_t(fractpart));
-		res += buf;
 	}
-	if ( val < 0)
+	if ( v < 0)
 		res = tiny_string::fromChar('-')+res;
-	return Class<ASString>::getInstanceS(res);
+	return res;
+}
+
+ASFUNCTIONBODY(Number,toExponential)
+{
+	Number* th=obj->as<Number>();
+	double v = th->val;
+	int32_t fractionDigits;
+	ARG_UNPACK(fractionDigits, 0);
+	if (argslen == 0 || args[0]->is<Undefined>())
+		fractionDigits = imin(imax(Number::countSignificantDigits(v)-1, 1), 20);
+	return Class<ASString>::getInstanceS(toExponentialString(v, fractionDigits));
+}
+
+tiny_string Number::toExponentialString(double v, int32_t fractionDigits)
+{
+	if (std::isnan(v) || std::isinf(v))
+		return toString(v);
+
+	tiny_string res;
+	if (v < 0)
+	{
+		res = "-";
+		v = -v;
+	}
+
+	if (fractionDigits < 0 || fractionDigits > 20)
+		throwError<RangeError>(kInvalidPrecisionError);
+	
+	char buf[40];
+	snprintf(buf,40,"%.*e", fractionDigits, v);
+	res += buf;
+	res = purgeExponentLeadingZeros(res);
+	return res;
+}
+
+tiny_string Number::purgeExponentLeadingZeros(const tiny_string& exponentialForm)
+{
+	uint32_t i = exponentialForm.find("e");
+	if (i == tiny_string::npos)
+		return exponentialForm;
+
+	tiny_string res;
+	res = exponentialForm.substr(0, i+1);
+
+	i++;
+	if (i >= exponentialForm.numChars())
+		return res;
+
+	uint32_t c = exponentialForm.charAt(i);
+	if (c == '-' || c == '+')
+	{
+		res += c;
+		i++;
+	}
+
+	bool leadingZero = true;
+	while (i < exponentialForm.numChars())
+	{
+		uint32_t c = exponentialForm.charAt(i);
+		if (!leadingZero || (leadingZero && c != '0'))
+		{
+			res += c;
+			leadingZero = false;
+		}
+
+		i++;
+	}
+
+	if (leadingZero)
+		res += '0';
+
+	return res;
+}
+
+/*
+ * Should return the number of significant decimal digits necessary to
+ * uniquely specify v. The actual implementation is a quick-and-dirty
+ * approximation.
+ */
+int32_t Number::countSignificantDigits(double v) {
+	char buf[40];
+	snprintf(buf,40,"%.20e", v);
+	
+	char *p = &buf[0];
+	while (*p == '0' || *p == '.')
+		p++;
+	
+	int32_t digits = 0;
+	int32_t consecutiveZeros = 0;
+	while ((('0' <= *p && *p <= '9') || *p == '.') && consecutiveZeros < 10)
+	{
+		if (*p != '.')
+			digits++;
+
+		if (*p == '0')
+			consecutiveZeros++;
+		else if (*p != '.')
+			consecutiveZeros = 0;
+		p++;
+	}
+
+	digits -= consecutiveZeros;
+
+	if (digits <= 0)
+		digits = 1;
+
+	return digits;
+}
+
+ASFUNCTIONBODY(Number,toPrecision)
+{
+	Number* th=obj->as<Number>();
+	double v = th->val;
+	if (argslen == 0 || args[0]->is<Undefined>())
+		return Class<ASString>::getInstanceS(toString(v));
+
+	int32_t precision;
+	ARG_UNPACK(precision);
+	return Class<ASString>::getInstanceS(toPrecisionString(v, precision));
+}
+
+tiny_string Number::toPrecisionString(double v, int32_t precision)
+{
+	if (precision < 1 || precision > 21)
+	{
+		throwError<RangeError>(kInvalidPrecisionError);
+		return NULL;
+	}
+	else if (std::isnan(v) || std::isinf(v))
+		return toString(v);
+	else if (::fabs(v) > pow(10., precision))
+		return toExponentialString(v, precision-1);
+	else if (v == 0)
+	{
+		tiny_string zero = "0.";
+		for (int i=0; i<precision; i++)
+			zero += "0";
+		return zero;
+	}
+	else
+	{
+		int n = (int)::ceil(::log10(::fabs(v)));
+		if (n < 0)
+			return toExponentialString(v, precision-1);
+		else
+			return toFixedString(v, precision-n);
+	}
 }
 
 ASFUNCTIONBODY(Number,_valueOf)
diff --git a/src/scripting/toplevel/Number.h b/src/scripting/toplevel/Number.h
index f03ddb0..cd66cfc 100644
--- a/src/scripting/toplevel/Number.h
+++ b/src/scripting/toplevel/Number.h
@@ -34,17 +34,24 @@ friend class ABCContext;
 friend class ABCVm;
 private:
 	static void purgeTrailingZeroes(char* buf);
+	static tiny_string purgeExponentLeadingZeros(const tiny_string& exponentialForm);
+	static int32_t countSignificantDigits(double v);
 public:
 	Number(Class_base* c, double v=0.):ASObject(c),val(v){type=T_NUMBER;}
 	static const number_t NaN;
 	double val;
 	ASFUNCTION(_constructor);
 	ASFUNCTION(_toString);
+	ASFUNCTION(toExponential);
+	ASFUNCTION(toPrecision);
 	ASFUNCTION(toFixed);
 	ASFUNCTION(_valueOf);
 	tiny_string toString();
 	static tiny_string toString(number_t val);
 	static tiny_string toStringRadix(number_t val, int radix);
+	static tiny_string toExponentialString(double v, int32_t fractionDigits);
+	static tiny_string toFixedString(double v, int32_t fractionDigits);
+	static tiny_string toPrecisionString(double v, int32_t precision);
 	static bool isInteger(number_t val)
 	{
 		return floor(val) == val;
diff --git a/src/scripting/toplevel/UInteger.cpp b/src/scripting/toplevel/UInteger.cpp
index 4fd37c5..2621831 100644
--- a/src/scripting/toplevel/UInteger.cpp
+++ b/src/scripting/toplevel/UInteger.cpp
@@ -17,6 +17,7 @@
     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **************************************************************************/
 
+#include <cmath>
 #include "scripting/argconv.h"
 #include "scripting/toplevel/UInteger.h"
 
@@ -118,6 +119,9 @@ void UInteger::sinit(Class_base* c)
 	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("MAX_VALUE","",abstract_ui(0xFFFFFFFF),CONSTANT_TRAIT);
 	c->setVariableByQName("MIN_VALUE","",abstract_ui(0),CONSTANT_TRAIT);
+	c->prototype->setVariableByQName("toExponential",AS3,Class<IFunction>::getFunction(_toExponential, 1),DYNAMIC_TRAIT);
+	c->prototype->setVariableByQName("toFixed",AS3,Class<IFunction>::getFunction(_toFixed, 1),DYNAMIC_TRAIT);
+	c->prototype->setVariableByQName("toPrecision",AS3,Class<IFunction>::getFunction(_toPrecision, 1),DYNAMIC_TRAIT);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
 	c->prototype->setVariableByQName("valueOf",AS3,Class<IFunction>::getFunction(_valueOf),DYNAMIC_TRAIT);
 }
@@ -161,3 +165,37 @@ bool UInteger::isEqual(ASObject* o)
 			return o->isEqual(this);
 	}
 }
+
+ASFUNCTIONBODY(UInteger,_toExponential)
+{
+	UInteger *th=obj->as<UInteger>();
+	double v = (double)th->val;
+	int32_t fractionDigits;
+	ARG_UNPACK(fractionDigits, 0);
+	if (argslen == 0 || args[0]->is<Undefined>())
+	{
+		if (v == 0)
+			fractionDigits = 1;
+		else
+			fractionDigits = imin(imax((int32_t)ceil(::log10(v)), 1), 20);
+	}
+	return Class<ASString>::getInstanceS(Number::toExponentialString(v, fractionDigits));
+}
+
+ASFUNCTIONBODY(UInteger,_toFixed)
+{
+	UInteger *th=obj->as<UInteger>();
+	int fractiondigits;
+	ARG_UNPACK (fractiondigits, 0);
+	return Class<ASString>::getInstanceS(Number::toFixedString(th->val, fractiondigits));
+}
+
+ASFUNCTIONBODY(UInteger,_toPrecision)
+{
+	UInteger *th=obj->as<UInteger>();
+	if (argslen == 0 || args[0]->is<Undefined>())
+		return Class<ASString>::getInstanceS(th->toString());
+	int precision;
+	ARG_UNPACK (precision);
+	return Class<ASString>::getInstanceS(Number::toPrecisionString(th->val, precision));
+}
diff --git a/src/scripting/toplevel/UInteger.h b/src/scripting/toplevel/UInteger.h
index fe0fbcc..197c590 100644
--- a/src/scripting/toplevel/UInteger.h
+++ b/src/scripting/toplevel/UInteger.h
@@ -49,6 +49,9 @@ public:
 	ASFUNCTION(generator);
 	ASFUNCTION(_toString);
 	ASFUNCTION(_valueOf);
+	ASFUNCTION(_toExponential);
+	ASFUNCTION(_toFixed);
+	ASFUNCTION(_toPrecision);
 	std::string toDebugString() { return toString()+"ui"; }
 	//CHECK: should this have a special serialization?
 };
-- 
1.8.5.3

