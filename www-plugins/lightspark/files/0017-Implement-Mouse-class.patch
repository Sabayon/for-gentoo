From f9f59c59a5e8406e083bc7f7031e6a8022878e2d Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sun, 28 Apr 2013 18:32:11 +0300
Subject: [PATCH 017/110] Implement Mouse class

registerCursor() (Flash player 10.2+) API is not yet implemented
---
 src/CMakeLists.txt               |  1 +
 src/allclasses.cpp               |  1 +
 src/allclasses.h                 |  1 +
 src/platforms/engineutils.cpp    | 30 +++++++++++++++
 src/platforms/engineutils.h      |  4 ++
 src/scripting/abc.cpp            |  2 +
 src/scripting/flash/ui/Mouse.cpp | 82 ++++++++++++++++++++++++++++++++++++++++
 src/scripting/flash/ui/Mouse.h   | 44 +++++++++++++++++++++
 src/swf.cpp                      |  8 ++++
 src/swf.h                        |  2 +
 10 files changed, 175 insertions(+)
 create mode 100644 src/scripting/flash/ui/Mouse.cpp
 create mode 100644 src/scripting/flash/ui/Mouse.h

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 8023f82..7f4df76 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -98,6 +98,7 @@ SET(LIBSPARK_SOURCES
   scripting/flash/text/flashtextengine.cpp
   scripting/flash/utils/flashutils.cpp
   scripting/flash/ui/Keyboard.cpp
+  scripting/flash/ui/Mouse.cpp
   scripting/flash/xml/flashxml.cpp
   scripting/toplevel/Array.cpp
   scripting/toplevel/ASString.cpp
diff --git a/src/allclasses.cpp b/src/allclasses.cpp
index 551869c..c73d796 100644
--- a/src/allclasses.cpp
+++ b/src/allclasses.cpp
@@ -58,6 +58,7 @@
 #include "scripting/flash/text/flashtext.h"
 #include "scripting/flash/text/flashtextengine.h"
 #include "scripting/flash/ui/Keyboard.h"
+#include "scripting/flash/ui/Mouse.h"
 
 using namespace lightspark;
 
diff --git a/src/allclasses.h b/src/allclasses.h
index 8236fb1..becc70e 100644
--- a/src/allclasses.h
+++ b/src/allclasses.h
@@ -230,6 +230,7 @@ REGISTER_CLASS_NAME(Timer,"flash.utils")
 REGISTER_CLASS_NAME(Keyboard,"flash.ui")
 REGISTER_CLASS_NAME(KeyboardType,"flash.ui")
 REGISTER_CLASS_NAME(KeyLocation,"flash.ui")
+REGISTER_CLASS_NAME(Mouse,"flash.ui")
 
 //XML
 REGISTER_CLASS_NAME(XMLDocument,"flash.xml")
diff --git a/src/platforms/engineutils.cpp b/src/platforms/engineutils.cpp
index 4152b48..6efcfc7 100644
--- a/src/platforms/engineutils.cpp
+++ b/src/platforms/engineutils.cpp
@@ -99,3 +99,33 @@ void EngineData::showWindow(uint32_t w, uint32_t h)
 	gtk_widget_show(widget);
 	gtk_widget_map(widget);
 }
+
+void EngineData::showMouseCursor()
+{
+	if (!widget)
+		return;
+
+	gdk_threads_enter();
+	GdkWindow* gdkwindow = gtk_widget_get_window(widget);
+	if (gdkwindow)
+		gdk_window_set_cursor(gdkwindow, NULL);
+	gdk_threads_leave();
+}
+
+void EngineData::hideMouseCursor()
+{
+	if (!widget)
+		return;
+
+	gdk_threads_enter();
+	GdkCursor* cursor = gdk_cursor_new(GDK_BLANK_CURSOR);
+	if (cursor)
+	{
+		GdkWindow* gdkwindow = gtk_widget_get_window(widget);
+		if (gdkwindow)
+			gdk_window_set_cursor(gdkwindow, cursor);
+		gdk_cursor_unref(cursor);
+	}
+	gdk_threads_leave();
+}
+
diff --git a/src/platforms/engineutils.h b/src/platforms/engineutils.h
index ee3d1ab..16d8825 100644
--- a/src/platforms/engineutils.h
+++ b/src/platforms/engineutils.h
@@ -141,6 +141,10 @@ public:
 
 	static void startGTKMain();
 	static void quitGTKMain();
+
+	/* show/hide mouse cursor, must be called from the gtk thread */
+	void showMouseCursor();
+	void hideMouseCursor();
 };
 
 };
diff --git a/src/scripting/abc.cpp b/src/scripting/abc.cpp
index a8e205b..f05ad1a 100644
--- a/src/scripting/abc.cpp
+++ b/src/scripting/abc.cpp
@@ -88,6 +88,7 @@
 #include "scripting/flash/text/flashtext.h"
 #include "scripting/flash/text/flashtextengine.h"
 #include "scripting/flash/ui/Keyboard.h"
+#include "scripting/flash/ui/Mouse.h"
 #include "scripting/class.h"
 #include "exceptions.h"
 #include "scripting/abc.h"
@@ -436,6 +437,7 @@ void ABCVm::registerClasses()
 	builtin->registerBuiltin("KeyLocation","flash.ui",Class<KeyLocation>::getRef());
 	builtin->registerBuiltin("ContextMenu","flash.ui",Class<ASObject>::getStubClass(QName("ContextMenu","flash.ui")));
 	builtin->registerBuiltin("ContextMenuItem","flash.ui",Class<ASObject>::getStubClass(QName("ContextMenuItem","flash.ui")));
+	builtin->registerBuiltin("Mouse","flash.ui",Class<Mouse>::getRef());
 
 	builtin->registerBuiltin("Accelerometer", "flash.sensors",Class<Accelerometer>::getRef());
 
diff --git a/src/scripting/flash/ui/Mouse.cpp b/src/scripting/flash/ui/Mouse.cpp
new file mode 100644
index 0000000..f4c8f30
--- /dev/null
+++ b/src/scripting/flash/ui/Mouse.cpp
@@ -0,0 +1,82 @@
+/**************************************************************************
+    Lightspark, a free flash player implementation
+
+    Copyright (C) 2013  Antti Ajanki (antti.ajanki@iki.fi)
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU Lesser General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+**************************************************************************/
+
+#include "scripting/flash/ui/Mouse.h"
+#include "scripting/toplevel/ASString.h"
+#include "scripting/toplevel/Error.h"
+#include "scripting/class.h"
+#include "scripting/argconv.h"
+#include "swf.h"
+
+using namespace std;
+using namespace lightspark;
+
+void Mouse::sinit(Class_base* c)
+{
+	c->setSuper(Class<ASObject>::getRef());
+	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	c->setDeclaredMethodByQName("hide","",Class<IFunction>::getFunction(hide),NORMAL_METHOD,false);
+	c->setDeclaredMethodByQName("show","",Class<IFunction>::getFunction(show),NORMAL_METHOD,false);
+	c->setDeclaredMethodByQName("cursor","",Class<IFunction>::getFunction(getCursor),GETTER_METHOD,false);
+	c->setDeclaredMethodByQName("cursor","",Class<IFunction>::getFunction(setCursor),SETTER_METHOD,false);
+	c->setDeclaredMethodByQName("supportsCursor","",Class<IFunction>::getFunction(getSupportsCursor),GETTER_METHOD,false);
+	c->setDeclaredMethodByQName("supportsNativeCursor","",Class<IFunction>::getFunction(getSupportsNativeCursor),GETTER_METHOD,false);
+}
+
+ASFUNCTIONBODY(Mouse, _constructor)
+{
+	throwError<ArgumentError>(kCantInstantiateError, "Mouse");
+	return NULL;
+}
+
+ASFUNCTIONBODY(Mouse, hide)
+{
+	getSys()->showMouseCursor(false);
+	return NULL;
+}
+
+ASFUNCTIONBODY(Mouse, show)
+{
+	getSys()->showMouseCursor(true);
+	return NULL;
+}
+
+ASFUNCTIONBODY(Mouse, getCursor)
+{
+	return Class<ASString>::getInstanceS("auto");
+}
+
+ASFUNCTIONBODY(Mouse, setCursor)
+{
+	tiny_string cursorName;
+	ARG_UNPACK(cursorName);
+	if (cursorName != "auto")
+		throwError<ArgumentError>(kInvalidEnumError, "cursor");
+	return NULL;
+}
+
+ASFUNCTIONBODY(Mouse, getSupportsCursor)
+{
+	return abstract_b(true);
+}
+
+ASFUNCTIONBODY(Mouse, getSupportsNativeCursor)
+{
+	return abstract_b(false); // until registerCursor() is implemented
+}
diff --git a/src/scripting/flash/ui/Mouse.h b/src/scripting/flash/ui/Mouse.h
new file mode 100644
index 0000000..06e8a06
--- /dev/null
+++ b/src/scripting/flash/ui/Mouse.h
@@ -0,0 +1,44 @@
+/**************************************************************************
+    Lightspark, a free flash player implementation
+
+    Copyright (C) 2013  Antti Ajanki (antti.ajanki@iki.fi)
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU Lesser General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+**************************************************************************/
+
+#ifndef SCRIPTING_FLASH_UI_MOUSE_H
+#define SCRIPTING_FLASH_UI_MOUSE_H 1
+
+#include "asobject.h"
+
+namespace lightspark
+{
+
+class Mouse : public ASObject
+{
+public:
+	Mouse(Class_base* c):ASObject(c){}
+	static void sinit(Class_base* c);
+	ASFUNCTION(_constructor);
+	ASFUNCTION(hide);
+	ASFUNCTION(show);
+	ASFUNCTION(getCursor);
+	ASFUNCTION(setCursor);
+	ASFUNCTION(getSupportsCursor);
+	ASFUNCTION(getSupportsNativeCursor);
+};
+
+};
+
+#endif /* SCRIPTING_FLASH_UI_MOUSE_H */
diff --git a/src/swf.cpp b/src/swf.cpp
index 6833d9a..7d6e7ed 100644
--- a/src/swf.cpp
+++ b/src/swf.cpp
@@ -1933,6 +1933,14 @@ void SystemState::openPageInBrowser(const tiny_string& url, const tiny_string& w
 	engineData->openPageInBrowser(url, window);
 }
 
+void SystemState::showMouseCursor(bool visible)
+{
+	if (visible)
+		EngineData::runInGtkThread(sigc::mem_fun(engineData, &EngineData::showMouseCursor));
+	else
+		EngineData::runInGtkThread(sigc::mem_fun(engineData, &EngineData::hideMouseCursor));
+}
+
 /* This is run in vm's thread context */
 void RootMovieClip::initFrame()
 {
diff --git a/src/swf.h b/src/swf.h
index 419204a..8ebeab7 100644
--- a/src/swf.h
+++ b/src/swf.h
@@ -429,6 +429,8 @@ public:
 
 	//Opening web pages
 	void openPageInBrowser(const tiny_string& url, const tiny_string& window);
+
+	void showMouseCursor(bool visible);
 };
 
 class ParseThread: public IThreadJob
-- 
1.8.5.3

