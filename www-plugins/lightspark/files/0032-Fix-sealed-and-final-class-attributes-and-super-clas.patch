From bc6ada1b05fe01210087d95e32523ed25e83db52 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Wed, 1 May 2013 18:17:04 +0300
Subject: [PATCH 032/110] Fix sealed and final class attributes and super
 classes

---
 src/asobject.cpp                                   |  6 ++
 src/asobject.h                                     | 22 ++++++
 .../flash/accessibility/flashaccessibility.cpp     |  6 +-
 src/scripting/flash/desktop/flashdesktop.cpp       |  4 +-
 src/scripting/flash/display/BitmapData.cpp         |  3 +-
 src/scripting/flash/display/DisplayObject.cpp      | 11 +--
 src/scripting/flash/display/DisplayObject.h        |  1 -
 src/scripting/flash/display/Graphics.cpp           | 11 +--
 src/scripting/flash/display/GraphicsBitmapFill.cpp |  4 +-
 src/scripting/flash/display/GraphicsEndFill.cpp    |  4 +-
 .../flash/display/GraphicsGradientFill.cpp         |  4 +-
 src/scripting/flash/display/GraphicsPath.cpp       |  4 +-
 src/scripting/flash/display/GraphicsShaderFill.cpp |  4 +-
 src/scripting/flash/display/GraphicsSolidFill.cpp  |  4 +-
 src/scripting/flash/display/GraphicsStroke.cpp     |  4 +-
 .../flash/display/GraphicsTrianglePath.cpp         |  4 +-
 src/scripting/flash/display/flashdisplay.cpp       | 85 +++++++++-----------
 src/scripting/flash/display/flashdisplay.h         |  1 -
 src/scripting/flash/errors/flasherrors.cpp         | 21 ++---
 src/scripting/flash/events/flashevents.cpp         | 91 ++++++----------------
 src/scripting/flash/external/ExternalInterface.cpp |  2 +-
 src/scripting/flash/filters/flashfilters.cpp       | 12 +--
 src/scripting/flash/geom/flashgeom.cpp             | 12 +--
 src/scripting/flash/media/flashmedia.cpp           | 22 ++----
 src/scripting/flash/net/URLRequestHeader.cpp       |  3 +-
 src/scripting/flash/net/URLStream.cpp              |  3 +-
 src/scripting/flash/net/XMLSocket.cpp              |  3 +-
 src/scripting/flash/net/flashnet.cpp               | 28 +++----
 src/scripting/flash/sensors/flashsensors.cpp       |  3 +-
 src/scripting/flash/sensors/flashsensors.h         |  2 +-
 src/scripting/flash/system/flashsystem.cpp         | 10 ++-
 src/scripting/flash/text/flashtext.cpp             | 50 +++++-------
 src/scripting/flash/text/flashtextengine.cpp       | 27 ++-----
 src/scripting/flash/text/flashtextengine.h         |  1 -
 src/scripting/flash/ui/Keyboard.cpp                |  9 +--
 src/scripting/flash/ui/Mouse.cpp                   |  9 +--
 src/scripting/flash/ui/Mouse.h                     |  1 -
 src/scripting/flash/utils/flashutils.cpp           | 15 ++--
 src/scripting/flash/xml/flashxml.cpp               |  6 +-
 src/scripting/toplevel/ASString.cpp                |  4 +-
 src/scripting/toplevel/Array.cpp                   |  5 +-
 src/scripting/toplevel/Boolean.cpp                 |  4 +-
 src/scripting/toplevel/Date.cpp                    |  4 +-
 src/scripting/toplevel/Error.cpp                   | 36 +++------
 src/scripting/toplevel/Integer.cpp                 |  4 +-
 src/scripting/toplevel/Math.cpp                    |  4 +-
 src/scripting/toplevel/Number.cpp                  |  4 +-
 src/scripting/toplevel/RegExp.cpp                  |  3 +-
 src/scripting/toplevel/UInteger.cpp                |  4 +-
 src/scripting/toplevel/Vector.cpp                  |  3 +-
 src/scripting/toplevel/XML.cpp                     |  3 +-
 src/scripting/toplevel/XMLList.cpp                 |  3 +-
 src/scripting/toplevel/toplevel.cpp                |  6 +-
 53 files changed, 218 insertions(+), 381 deletions(-)

diff --git a/src/asobject.cpp b/src/asobject.cpp
index f11f461..508b3e6 100644
--- a/src/asobject.cpp
+++ b/src/asobject.cpp
@@ -892,6 +892,12 @@ ASFUNCTIONBODY(ASObject,_constructor)
 	return NULL;
 }
 
+ASFUNCTIONBODY(ASObject,_constructorNotInstantiatable)
+{
+	throwError<ArgumentError>(kCantInstantiateError, obj->getClassName());
+	return NULL;
+}
+
 void ASObject::initSlot(unsigned int n, const multiname& name)
 {
 	Variables.initSlot(n,name.name_s_id,name.ns[0]);
diff --git a/src/asobject.h b/src/asobject.h
index 2064223..009e1da 100644
--- a/src/asobject.h
+++ b/src/asobject.h
@@ -122,6 +122,25 @@
 		REGISTER_GETTER(c,name); \
 		REGISTER_SETTER(c,name)
 
+#define CLASS_DYNAMIC_NOT_FINAL 0
+#define CLASS_FINAL 1
+#define CLASS_SEALED 2
+
+// TODO: Every class should have a constructor
+#define CLASS_SETUP_NO_CONSTRUCTOR(c, superClass, attributes) \
+	c->setSuper(Class<superClass>::getRef()); \
+	c->setConstructor(NULL); \
+	c->isFinal = ((attributes) & CLASS_FINAL) != 0;	\
+	c->isSealed = ((attributes) & CLASS_SEALED) != 0
+
+#define CLASS_SETUP(c, superClass, constructor, attributes) \
+	CLASS_SETUP_NO_CONSTRUCTOR(c, superClass, attributes); \
+	c->setConstructor(Class<IFunction>::getFunction(constructor));
+
+#define CLASS_SETUP_CONSTRUCTOR_LENGTH(c, superClass, constructor, ctorlength, attributes) \
+	CLASS_SETUP_NO_CONSTRUCTOR(c, superClass, attributes); \
+	c->setConstructor(Class<IFunction>::getFunction((constructor), (ctorlength)));
+
 namespace lightspark
 {
 
@@ -274,6 +293,9 @@ public:
 	bool implEnable:1;
 	Class_base* getClass() const { return classdef; }
 	ASFUNCTION(_constructor);
+	// constructor for subclasses that can't be instantiated.
+	// Throws ArgumentError.
+	ASFUNCTION(_constructorNotInstantiatable);
 	ASFUNCTION(_toString);
 	ASFUNCTION(hasOwnProperty);
 	ASFUNCTION(valueOf);
diff --git a/src/scripting/flash/accessibility/flashaccessibility.cpp b/src/scripting/flash/accessibility/flashaccessibility.cpp
index a8b4598..752c98b 100644
--- a/src/scripting/flash/accessibility/flashaccessibility.cpp
+++ b/src/scripting/flash/accessibility/flashaccessibility.cpp
@@ -30,8 +30,7 @@ AccessibilityProperties::AccessibilityProperties(Class_base* c):
 
 void AccessibilityProperties::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c, description);
 	REGISTER_GETTER_SETTER(c, forceSimple);
 	REGISTER_GETTER_SETTER(c, name);
@@ -54,8 +53,7 @@ ASFUNCTIONBODY_GETTER_SETTER(AccessibilityProperties, silent);
 
 void AccessibilityImplementation::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 }
 
 ASFUNCTIONBODY(AccessibilityImplementation,_constructor)
diff --git a/src/scripting/flash/desktop/flashdesktop.cpp b/src/scripting/flash/desktop/flashdesktop.cpp
index ebf14e4..ae9124b 100644
--- a/src/scripting/flash/desktop/flashdesktop.cpp
+++ b/src/scripting/flash/desktop/flashdesktop.cpp
@@ -27,9 +27,7 @@ using namespace lightspark;
 
 void NativeApplication::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_FINAL | CLASS_SEALED);
 	c->setDeclaredMethodByQName("nativeApplication", "", Class<IFunction>::getFunction(_getNativeApplication), GETTER_METHOD, false);
 	c->setDeclaredMethodByQName("addEventListener", "", Class<IFunction>::getFunction(addEventListener), NORMAL_METHOD, true);
 }
diff --git a/src/scripting/flash/display/BitmapData.cpp b/src/scripting/flash/display/BitmapData.cpp
index 6adaed3..e33e136 100644
--- a/src/scripting/flash/display/BitmapData.cpp
+++ b/src/scripting/flash/display/BitmapData.cpp
@@ -55,8 +55,7 @@ BitmapData::BitmapData(Class_base* c, uint32_t width, uint32_t height)
 
 void BitmapData::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	c->addImplementedInterface(InterfaceClass<IBitmapDrawable>::getClass());
 	c->setDeclaredMethodByQName("draw","",Class<IFunction>::getFunction(draw),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("dispose","",Class<IFunction>::getFunction(dispose),NORMAL_METHOD,true);
diff --git a/src/scripting/flash/display/DisplayObject.cpp b/src/scripting/flash/display/DisplayObject.cpp
index a4937f1..75f92ba 100644
--- a/src/scripting/flash/display/DisplayObject.cpp
+++ b/src/scripting/flash/display/DisplayObject.cpp
@@ -118,8 +118,7 @@ void DisplayObject::finalize()
 
 void DisplayObject::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructorNotInstantiatable, CLASS_SEALED);
 	c->setDeclaredMethodByQName("loaderInfo","",Class<IFunction>::getFunction(_getLoaderInfo),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("width","",Class<IFunction>::getFunction(_getWidth),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("width","",Class<IFunction>::getFunction(_setWidth),SETTER_METHOD,true);
@@ -634,14 +633,6 @@ ASFUNCTIONBODY(DisplayObject,_getBounds)
 	return ret;
 }
 
-ASFUNCTIONBODY(DisplayObject,_constructor)
-{
-	//DisplayObject* th=static_cast<DisplayObject*>(obj->implementation);
-	EventDispatcher::_constructor(obj,NULL,0);
-
-	return NULL;
-}
-
 ASFUNCTIONBODY(DisplayObject,_getLoaderInfo)
 {
 	DisplayObject* th=static_cast<DisplayObject*>(obj);
diff --git a/src/scripting/flash/display/DisplayObject.h b/src/scripting/flash/display/DisplayObject.h
index b5ae7f4..4722e17 100644
--- a/src/scripting/flash/display/DisplayObject.h
+++ b/src/scripting/flash/display/DisplayObject.h
@@ -179,7 +179,6 @@ public:
 	number_t getNominalHeight();
 	static void sinit(Class_base* c);
 	static void buildTraits(ASObject* o);
-	ASFUNCTION(_constructor);
 	ASFUNCTION(_getVisible);
 	ASFUNCTION(_setVisible);
 	ASFUNCTION(_getStage);
diff --git a/src/scripting/flash/display/Graphics.cpp b/src/scripting/flash/display/Graphics.cpp
index 0f90fee..663c576 100644
--- a/src/scripting/flash/display/Graphics.cpp
+++ b/src/scripting/flash/display/Graphics.cpp
@@ -35,7 +35,7 @@ using namespace lightspark;
 
 void Graphics::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("clear","",Class<IFunction>::getFunction(clear),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("copyFrom","",Class<IFunction>::getFunction(copyFrom),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("drawRect","",Class<IFunction>::getFunction(drawRect),NORMAL_METHOD,true);
@@ -921,12 +921,3 @@ ASFUNCTIONBODY(Graphics,copyFrom)
 				 source->owner->tokens.end());
 	return NULL;
 }
-
-void LineScaleMode::sinit(Class_base* c)
-{
-	c->setConstructor(NULL);
-	c->setVariableByQName("HORIZONTAL","",Class<ASString>::getInstanceS("horizontal"),DECLARED_TRAIT);
-	c->setVariableByQName("NONE","",Class<ASString>::getInstanceS("none"),DECLARED_TRAIT);
-	c->setVariableByQName("NORMAL","",Class<ASString>::getInstanceS("normal"),DECLARED_TRAIT);
-	c->setVariableByQName("VERTICAL","",Class<ASString>::getInstanceS("vertical"),DECLARED_TRAIT);
-}
diff --git a/src/scripting/flash/display/GraphicsBitmapFill.cpp b/src/scripting/flash/display/GraphicsBitmapFill.cpp
index 353780d..1f59afa 100644
--- a/src/scripting/flash/display/GraphicsBitmapFill.cpp
+++ b/src/scripting/flash/display/GraphicsBitmapFill.cpp
@@ -33,9 +33,7 @@ GraphicsBitmapFill::GraphicsBitmapFill(Class_base* c):
 
 void GraphicsBitmapFill::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, bitmapData);
 	REGISTER_GETTER_SETTER(c, matrix);
 	REGISTER_GETTER_SETTER(c, repeat);
diff --git a/src/scripting/flash/display/GraphicsEndFill.cpp b/src/scripting/flash/display/GraphicsEndFill.cpp
index dc7bb8c..4c24347 100644
--- a/src/scripting/flash/display/GraphicsEndFill.cpp
+++ b/src/scripting/flash/display/GraphicsEndFill.cpp
@@ -29,9 +29,7 @@ GraphicsEndFill::GraphicsEndFill(Class_base* c):
 
 void GraphicsEndFill::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->addImplementedInterface(InterfaceClass<IGraphicsFill>::getClass());
 	IGraphicsFill::linkTraits(c);
 	c->addImplementedInterface(InterfaceClass<IGraphicsData>::getClass());
diff --git a/src/scripting/flash/display/GraphicsGradientFill.cpp b/src/scripting/flash/display/GraphicsGradientFill.cpp
index 431453e..3133413 100644
--- a/src/scripting/flash/display/GraphicsGradientFill.cpp
+++ b/src/scripting/flash/display/GraphicsGradientFill.cpp
@@ -35,9 +35,7 @@ GraphicsGradientFill::GraphicsGradientFill(Class_base* c):
 
 void GraphicsGradientFill::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, alphas);
 	REGISTER_GETTER_SETTER(c, colors);
 	REGISTER_GETTER_SETTER(c, focalPointRatio);
diff --git a/src/scripting/flash/display/GraphicsPath.cpp b/src/scripting/flash/display/GraphicsPath.cpp
index f922d22..7a11b42 100644
--- a/src/scripting/flash/display/GraphicsPath.cpp
+++ b/src/scripting/flash/display/GraphicsPath.cpp
@@ -32,9 +32,7 @@ GraphicsPath::GraphicsPath(Class_base* c):
 
 void GraphicsPath::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, commands);
 	REGISTER_GETTER_SETTER(c, data);
 	REGISTER_GETTER_SETTER(c, winding);
diff --git a/src/scripting/flash/display/GraphicsShaderFill.cpp b/src/scripting/flash/display/GraphicsShaderFill.cpp
index f876318..4094e3d 100644
--- a/src/scripting/flash/display/GraphicsShaderFill.cpp
+++ b/src/scripting/flash/display/GraphicsShaderFill.cpp
@@ -32,9 +32,7 @@ GraphicsShaderFill::GraphicsShaderFill(Class_base* c):
 
 void GraphicsShaderFill::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, matrix);
 	REGISTER_GETTER_SETTER(c, shader);
 
diff --git a/src/scripting/flash/display/GraphicsSolidFill.cpp b/src/scripting/flash/display/GraphicsSolidFill.cpp
index d46e61b..1dcbbc0 100644
--- a/src/scripting/flash/display/GraphicsSolidFill.cpp
+++ b/src/scripting/flash/display/GraphicsSolidFill.cpp
@@ -31,9 +31,7 @@ GraphicsSolidFill::GraphicsSolidFill(Class_base* c):
 
 void GraphicsSolidFill::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, alpha);
 	REGISTER_GETTER_SETTER(c, color);
 
diff --git a/src/scripting/flash/display/GraphicsStroke.cpp b/src/scripting/flash/display/GraphicsStroke.cpp
index 0287ad1..8858830 100644
--- a/src/scripting/flash/display/GraphicsStroke.cpp
+++ b/src/scripting/flash/display/GraphicsStroke.cpp
@@ -35,9 +35,7 @@ GraphicsStroke::GraphicsStroke(Class_base* c):
 
 void GraphicsStroke::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, caps);
 	REGISTER_GETTER_SETTER(c, fill);
 	REGISTER_GETTER_SETTER(c, joints);
diff --git a/src/scripting/flash/display/GraphicsTrianglePath.cpp b/src/scripting/flash/display/GraphicsTrianglePath.cpp
index 0411420..faa44cb 100644
--- a/src/scripting/flash/display/GraphicsTrianglePath.cpp
+++ b/src/scripting/flash/display/GraphicsTrianglePath.cpp
@@ -32,9 +32,7 @@ GraphicsTrianglePath::GraphicsTrianglePath(Class_base* c):
 
 void GraphicsTrianglePath::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, culling);
 	REGISTER_GETTER_SETTER(c, indices);
 	REGISTER_GETTER_SETTER(c, uvtData);
diff --git a/src/scripting/flash/display/flashdisplay.cpp b/src/scripting/flash/display/flashdisplay.cpp
index 3316991..0bee033 100644
--- a/src/scripting/flash/display/flashdisplay.cpp
+++ b/src/scripting/flash/display/flashdisplay.cpp
@@ -67,8 +67,7 @@ LoaderInfo::LoaderInfo(Class_base* c, _R<Loader> l):EventDispatcher(c),applicati
 
 void LoaderInfo::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("loaderURL","",Class<IFunction>::getFunction(_getLoaderURL),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("loader","",Class<IFunction>::getFunction(_getLoader),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("content","",Class<IFunction>::getFunction(_getContent),GETTER_METHOD,true);
@@ -552,8 +551,7 @@ Loader::~Loader()
 
 void Loader::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObjectContainer>::getRef());
+	CLASS_SETUP(c, DisplayObjectContainer, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("contentLoaderInfo","",Class<IFunction>::getFunction(_getContentLoaderInfo),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("content","",Class<IFunction>::getFunction(_getContent),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("close","",Class<IFunction>::getFunction(close),NORMAL_METHOD,true);
@@ -604,8 +602,7 @@ void Sprite::finalize()
 
 void Sprite::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObjectContainer>::getRef());
+	CLASS_SETUP(c, DisplayObjectContainer, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("graphics","",Class<IFunction>::getFunction(_getGraphics),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("startDrag","",Class<IFunction>::getFunction(_startDrag),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("stopDrag","",Class<IFunction>::getFunction(_stopDrag),NORMAL_METHOD,true);
@@ -863,8 +860,7 @@ FrameLabel::FrameLabel(Class_base* c, const FrameLabel_data& data):ASObject(c),F
 
 void FrameLabel::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("frame","",Class<IFunction>::getFunction(_getFrame),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("name","",Class<IFunction>::getFunction(_getName),GETTER_METHOD,true);
 }
@@ -920,8 +916,7 @@ Scene::Scene(Class_base* c, const Scene_data& data, uint32_t _numFrames):ASObjec
 
 void Scene::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("labels","",Class<IFunction>::getFunction(_getLabels),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("name","",Class<IFunction>::getFunction(_getName),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("numFrames","",Class<IFunction>::getFunction(_getNumFrames),GETTER_METHOD,true);
@@ -1013,8 +1008,7 @@ void FrameContainer::addFrameLabel(uint32_t frame, const tiny_string& label)
 
 void MovieClip::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Sprite>::getRef());
+	CLASS_SETUP(c, Sprite, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 	c->setDeclaredMethodByQName("currentFrame","",Class<IFunction>::getFunction(_getCurrentFrame),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("totalFrames","",Class<IFunction>::getFunction(_getTotalFrames),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("framesLoaded","",Class<IFunction>::getFunction(_getFramesLoaded),GETTER_METHOD,true);
@@ -1359,8 +1353,7 @@ void MovieClip::addScene(uint32_t sceneNo, uint32_t startframe, const tiny_strin
 
 void DisplayObjectContainer::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<InteractiveObject>::getRef());
+	CLASS_SETUP(c, InteractiveObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("numChildren","",Class<IFunction>::getFunction(_getNumChildren),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("getChildIndex","",Class<IFunction>::getFunction(_getChildIndex),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("setChildIndex","",Class<IFunction>::getFunction(_setChildIndex),NORMAL_METHOD,true);
@@ -1527,8 +1520,7 @@ void InteractiveObject::buildTraits(ASObject* o)
 
 void InteractiveObject::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObject>::getRef());
+	CLASS_SETUP(c, DisplayObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("mouseEnabled","",Class<IFunction>::getFunction(_setMouseEnabled),SETTER_METHOD,true);
 	c->setDeclaredMethodByQName("mouseEnabled","",Class<IFunction>::getFunction(_getMouseEnabled),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("doubleClickEnabled","",Class<IFunction>::getFunction(_setDoubleClickEnabled),SETTER_METHOD,true);
@@ -1972,8 +1964,7 @@ void Shape::finalize()
 
 void Shape::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObject>::getRef());
+	CLASS_SETUP(c, DisplayObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("graphics","",Class<IFunction>::getFunction(_getGraphics),GETTER_METHOD,true);
 }
 
@@ -1998,8 +1989,9 @@ ASFUNCTIONBODY(Shape,_getGraphics)
 
 void MorphShape::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObject>::getRef());
+	// FIXME: should use _constructorNotInstantiatable but then
+	// DefineMorphShapeTag::instance breaks
+	CLASS_SETUP_NO_CONSTRUCTOR(c, DisplayObject, CLASS_SEALED | CLASS_FINAL);
 }
 
 void MorphShape::buildTraits(ASObject* o)
@@ -2007,12 +1999,6 @@ void MorphShape::buildTraits(ASObject* o)
 	//No traits
 }
 
-ASFUNCTIONBODY(MorphShape,_constructor)
-{
-	DisplayObject::_constructor(obj,NULL,0);
-	return NULL;
-}
-
 bool MorphShape::boundsRect(number_t& xmin, number_t& xmax, number_t& ymin, number_t& ymax) const
 {
 	LOG(LOG_NOT_IMPLEMENTED, "MorphShape::boundsRect is a stub");
@@ -2026,8 +2012,7 @@ _NR<DisplayObject> MorphShape::hitTestImpl(_NR<DisplayObject> last, number_t x,
 
 void Stage::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObjectContainer>::getRef());
+	CLASS_SETUP(c, DisplayObjectContainer, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("allowFullScreen","",Class<IFunction>::getFunction(_getAllowFullScreen),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("allowFullScreenInteractive","",Class<IFunction>::getFunction(_getAllowFullScreenInteractive),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("colorCorrectionSupport","",Class<IFunction>::getFunction(_getColorCorrectionSupport),GETTER_METHOD,true);
@@ -2299,7 +2284,7 @@ ASFUNCTIONBODY(Stage,_getColorCorrectionSupport)
 
 void StageScaleMode::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("EXACT_FIT","",Class<ASString>::getInstanceS("exactFit"),DECLARED_TRAIT);
 	c->setVariableByQName("NO_BORDER","",Class<ASString>::getInstanceS("noBorder"),DECLARED_TRAIT);
 	c->setVariableByQName("NO_SCALE","",Class<ASString>::getInstanceS("noScale"),DECLARED_TRAIT);
@@ -2308,7 +2293,7 @@ void StageScaleMode::sinit(Class_base* c)
 
 void StageAlign::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("BOTTOM","",Class<ASString>::getInstanceS("B"),DECLARED_TRAIT);
 	c->setVariableByQName("BOTTOM_LEFT","",Class<ASString>::getInstanceS("BL"),DECLARED_TRAIT);
 	c->setVariableByQName("BOTTOM_RIGHT","",Class<ASString>::getInstanceS("BR"),DECLARED_TRAIT);
@@ -2321,7 +2306,7 @@ void StageAlign::sinit(Class_base* c)
 
 void StageQuality::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("BEST","",Class<ASString>::getInstanceS("best"),DECLARED_TRAIT);
 	c->setVariableByQName("HIGH","",Class<ASString>::getInstanceS("high"),DECLARED_TRAIT);
 	c->setVariableByQName("LOW","",Class<ASString>::getInstanceS("low"),DECLARED_TRAIT);
@@ -2330,7 +2315,7 @@ void StageQuality::sinit(Class_base* c)
 
 void StageDisplayState::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("FULL_SCREEN","",Class<ASString>::getInstanceS("fullScreen"),DECLARED_TRAIT);
 	c->setVariableByQName("FULL_SCREEN_INTERACTIVE","",Class<ASString>::getInstanceS("fullScreenInteractive"),DECLARED_TRAIT);
 	c->setVariableByQName("NORMAL","",Class<ASString>::getInstanceS("normal"),DECLARED_TRAIT);
@@ -2402,8 +2387,7 @@ void Bitmap::finalize()
 
 void Bitmap::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObject>::getRef());
+	CLASS_SETUP(c, DisplayObject, _constructor, CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c,bitmapData);
 	REGISTER_GETTER_SETTER(c,smoothing);
 }
@@ -2495,8 +2479,7 @@ IntSize Bitmap::getBitmapSize() const
 
 void SimpleButton::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<InteractiveObject>::getRef());
+	CLASS_SETUP(c, InteractiveObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("upState","",Class<IFunction>::getFunction(_getUpState),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("upState","",Class<IFunction>::getFunction(_setUpState),SETTER_METHOD,true);
 	c->setDeclaredMethodByQName("downState","",Class<IFunction>::getFunction(_getDownState),GETTER_METHOD,true);
@@ -2743,14 +2726,14 @@ ASFUNCTIONBODY(SimpleButton,_getUseHandCursor)
 
 void GradientType::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("LINEAR","",Class<ASString>::getInstanceS("linear"),DECLARED_TRAIT);
 	c->setVariableByQName("RADIAL","",Class<ASString>::getInstanceS("radial"),DECLARED_TRAIT);
 }
 
 void BlendMode::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("ADD","",Class<ASString>::getInstanceS("add"),DECLARED_TRAIT);
 	c->setVariableByQName("ALPHA","",Class<ASString>::getInstanceS("alpha"),DECLARED_TRAIT);
 	c->setVariableByQName("DARKEN","",Class<ASString>::getInstanceS("darken"),DECLARED_TRAIT);
@@ -2769,7 +2752,7 @@ void BlendMode::sinit(Class_base* c)
 
 void SpreadMethod::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("PAD","",Class<ASString>::getInstanceS("pad"),DECLARED_TRAIT);
 	c->setVariableByQName("REFLECT","",Class<ASString>::getInstanceS("reflect"),DECLARED_TRAIT);
 	c->setVariableByQName("REPEAT","",Class<ASString>::getInstanceS("repeat"),DECLARED_TRAIT);
@@ -2777,14 +2760,14 @@ void SpreadMethod::sinit(Class_base* c)
 
 void InterpolationMethod::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("RGB","",Class<ASString>::getInstanceS("rgb"),DECLARED_TRAIT);
 	c->setVariableByQName("LINEAR_RGB","",Class<ASString>::getInstanceS("linearRGB"),DECLARED_TRAIT);
 }
 
 void GraphicsPathCommand::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("CUBIC_CURVE_TO","",abstract_i(6),DECLARED_TRAIT);
 	c->setVariableByQName("CURVE_TO","",abstract_i(3),DECLARED_TRAIT);
 	c->setVariableByQName("LINE_TO","",abstract_i(2),DECLARED_TRAIT);
@@ -2796,7 +2779,7 @@ void GraphicsPathCommand::sinit(Class_base* c)
 
 void GraphicsPathWinding::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("EVEN_ODD","",Class<ASString>::getInstanceS("evenOdd"),DECLARED_TRAIT);
 	c->setVariableByQName("NON_ZERO","",Class<ASString>::getInstanceS("nonZero"),DECLARED_TRAIT);
 }
@@ -2945,8 +2928,7 @@ void MovieClip::constructionComplete()
 
 void AVM1Movie::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObject>::getRef());
+	CLASS_SETUP(c, DisplayObject, _constructor, CLASS_SEALED);
 }
 
 void AVM1Movie::buildTraits(ASObject* o)
@@ -2962,8 +2944,7 @@ ASFUNCTIONBODY(AVM1Movie,_constructor)
 
 void Shader::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 }
 
 ASFUNCTIONBODY(Shader,_constructor)
@@ -2974,8 +2955,7 @@ ASFUNCTIONBODY(Shader,_constructor)
 
 void BitmapDataChannel::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("ALPHA","",abstract_ui(8),DECLARED_TRAIT);
 	c->setVariableByQName("BLUE","",abstract_ui(4),DECLARED_TRAIT);
 	c->setVariableByQName("GREEN","",abstract_ui(2),DECLARED_TRAIT);
@@ -3004,3 +2984,12 @@ unsigned int BitmapDataChannel::channelShift(uint32_t channelConstant)
 
 	return shift;
 }
+
+void LineScaleMode::sinit(Class_base* c)
+{
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
+	c->setVariableByQName("HORIZONTAL","",Class<ASString>::getInstanceS("horizontal"),DECLARED_TRAIT);
+	c->setVariableByQName("NONE","",Class<ASString>::getInstanceS("none"),DECLARED_TRAIT);
+	c->setVariableByQName("NORMAL","",Class<ASString>::getInstanceS("normal"),DECLARED_TRAIT);
+	c->setVariableByQName("VERTICAL","",Class<ASString>::getInstanceS("vertical"),DECLARED_TRAIT);
+}
diff --git a/src/scripting/flash/display/flashdisplay.h b/src/scripting/flash/display/flashdisplay.h
index 80b3f35..9f77608 100644
--- a/src/scripting/flash/display/flashdisplay.h
+++ b/src/scripting/flash/display/flashdisplay.h
@@ -208,7 +208,6 @@ public:
 	MorphShape(Class_base* c):DisplayObject(c){}
 	static void sinit(Class_base* c);
 	static void buildTraits(ASObject* o);
-	ASFUNCTION(_constructor);
 };
 
 class Loader;
diff --git a/src/scripting/flash/errors/flasherrors.cpp b/src/scripting/flash/errors/flasherrors.cpp
index 81c0a83..087f5a1 100644
--- a/src/scripting/flash/errors/flasherrors.cpp
+++ b/src/scripting/flash/errors/flasherrors.cpp
@@ -32,8 +32,7 @@ ASFUNCTIONBODY(IOError,_constructor)
 
 void IOError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void IOError::buildTraits(ASObject* o)
@@ -49,8 +48,7 @@ ASFUNCTIONBODY(EOFError,_constructor)
 
 void EOFError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<IOError>::getRef());
+	CLASS_SETUP(c, IOError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void EOFError::buildTraits(ASObject* o)
@@ -66,8 +64,7 @@ ASFUNCTIONBODY(IllegalOperationError,_constructor)
 
 void IllegalOperationError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void IllegalOperationError::buildTraits(ASObject* o)
@@ -85,8 +82,7 @@ ASFUNCTIONBODY(InvalidSWFError,_constructor)
 
 void InvalidSWFError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void InvalidSWFError::buildTraits(ASObject* o)
@@ -102,8 +98,7 @@ ASFUNCTIONBODY(MemoryError,_constructor)
 
 void MemoryError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void MemoryError::buildTraits(ASObject* o)
@@ -119,8 +114,7 @@ ASFUNCTIONBODY(ScriptTimeoutError,_constructor)
 
 void ScriptTimeoutError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void ScriptTimeoutError::buildTraits(ASObject* o)
@@ -136,8 +130,7 @@ ASFUNCTIONBODY(StackOverflowError,_constructor)
 
 void StackOverflowError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void StackOverflowError::buildTraits(ASObject* o)
diff --git a/src/scripting/flash/events/flashevents.cpp b/src/scripting/flash/events/flashevents.cpp
index 6f99dfd..5765db0 100644
--- a/src/scripting/flash/events/flashevents.cpp
+++ b/src/scripting/flash/events/flashevents.cpp
@@ -49,9 +49,7 @@ void Event::finalize()
 
 void Event::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	c->setVariableByQName("ACTIVATE","",Class<ASString>::getInstanceS("activate"),DECLARED_TRAIT);
 	c->setVariableByQName("ADDED","",Class<ASString>::getInstanceS("added"),DECLARED_TRAIT);
 	c->setVariableByQName("ADDED_TO_STAGE","",Class<ASString>::getInstanceS("addedToStage"),DECLARED_TRAIT);
@@ -189,8 +187,7 @@ ASFUNCTIONBODY(Event,clone)
 
 void EventPhase::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("CAPTURING_PHASE","",abstract_i(CAPTURING_PHASE),DECLARED_TRAIT);
 	c->setVariableByQName("BUBBLING_PHASE","",abstract_i(BUBBLING_PHASE),DECLARED_TRAIT);
 	c->setVariableByQName("AT_TARGET","",abstract_i(AT_TARGET),DECLARED_TRAIT);
@@ -201,10 +198,8 @@ FocusEvent::FocusEvent(Class_base* c):Event(c, "focusEvent")
 }
 
 void FocusEvent::sinit(Class_base* c)
-{
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+{	
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("FOCUS_IN","",Class<ASString>::getInstanceS("focusIn"),DECLARED_TRAIT);
 	c->setVariableByQName("FOCUS_OUT","",Class<ASString>::getInstanceS("focusOut"),DECLARED_TRAIT);
 	c->setVariableByQName("MOUSE_FOCUS_CHANGE","",Class<ASString>::getInstanceS("mouseFocusChange"),DECLARED_TRAIT);
@@ -249,9 +244,7 @@ Event* ProgressEvent::cloneImpl() const
 
 void ProgressEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("PROGRESS","",Class<ASString>::getInstanceS("progress"),DECLARED_TRAIT);
 	REGISTER_GETTER_SETTER(c,bytesLoaded);
 	REGISTER_GETTER_SETTER(c,bytesTotal);
@@ -279,18 +272,14 @@ ASFUNCTIONBODY(ProgressEvent,_constructor)
 
 void TimerEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("TIMER","",Class<ASString>::getInstanceS("timer"),DECLARED_TRAIT);
 	c->setVariableByQName("TIMER_COMPLETE","",Class<ASString>::getInstanceS("timerComplete"),DECLARED_TRAIT);
 }
 
 void MouseEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("CLICK","",Class<ASString>::getInstanceS("click"),DECLARED_TRAIT);
 	c->setVariableByQName("DOUBLE_CLICK","",Class<ASString>::getInstanceS("doubleClick"),DECLARED_TRAIT);
 	c->setVariableByQName("MOUSE_DOWN","",Class<ASString>::getInstanceS("mouseDown"),DECLARED_TRAIT);
@@ -488,9 +477,7 @@ IOErrorEvent::IOErrorEvent(Class_base* c) : ErrorEvent(c, "ioError")
 
 void IOErrorEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ErrorEvent>::getRef());
-
+	CLASS_SETUP(c, ErrorEvent, _constructor, CLASS_SEALED);
 	c->setVariableByQName("DISK_ERROR","",Class<ASString>::getInstanceS("diskError"),DECLARED_TRAIT);
 	c->setVariableByQName("IO_ERROR","",Class<ASString>::getInstanceS("ioError"),DECLARED_TRAIT);
 	c->setVariableByQName("NETWORK_ERROR","",Class<ASString>::getInstanceS("networkError"),DECLARED_TRAIT);
@@ -510,9 +497,8 @@ void EventDispatcher::finalize()
 
 void EventDispatcher::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	c->addImplementedInterface(InterfaceClass<IEventDispatcher>::getClass());
-	c->setSuper(Class<ASObject>::getRef());
 
 	c->setDeclaredMethodByQName("addEventListener","",Class<IFunction>::getFunction(addEventListener),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("hasEventListener","",Class<IFunction>::getFunction(_hasEventListener),NORMAL_METHOD,true);
@@ -740,9 +726,7 @@ NetStatusEvent::NetStatusEvent(Class_base* cb, const tiny_string& level, const t
 
 void NetStatusEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("NET_STATUS","",Class<ASString>::getInstanceS("netStatus"),DECLARED_TRAIT);
 }
 
@@ -800,9 +784,7 @@ FullScreenEvent::FullScreenEvent(Class_base* c):Event(c, "fullScreenEvent")
 
 void FullScreenEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("FULL_SCREEN","",Class<ASString>::getInstanceS("fullScreen"),DECLARED_TRAIT);
 }
 
@@ -820,9 +802,7 @@ KeyboardEvent::KeyboardEvent(Class_base* c, tiny_string _type, uint32_t _charcod
 
 void KeyboardEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c, altKey);
 	REGISTER_GETTER_SETTER(c, charCode);
 	REGISTER_GETTER_SETTER(c, commandKey);
@@ -959,11 +939,8 @@ TextEvent::TextEvent(Class_base* c,const tiny_string& t):Event(c,t)
 
 void TextEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("TEXT_INPUT","",Class<ASString>::getInstanceS("textInput"),DECLARED_TRAIT);
-
 	REGISTER_GETTER_SETTER(c,text);
 }
 
@@ -985,9 +962,7 @@ ErrorEvent::ErrorEvent(Class_base* c, const tiny_string& t, const std::string& e
 
 void ErrorEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<TextEvent>::getRef());
-
+	CLASS_SETUP(c, TextEvent, _constructor, CLASS_SEALED);
 	c->setVariableByQName("ERROR","",Class<ASString>::getInstanceS("error"),DECLARED_TRAIT);
 }
 
@@ -1008,9 +983,7 @@ SecurityErrorEvent::SecurityErrorEvent(Class_base* c, const std::string& e):Erro
 
 void SecurityErrorEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ErrorEvent>::getRef());
-
+	CLASS_SETUP(c, ErrorEvent, _constructor, CLASS_SEALED);
 	c->setVariableByQName("SECURITY_ERROR","",Class<ASString>::getInstanceS("securityError"),DECLARED_TRAIT);
 }
 
@@ -1020,9 +993,7 @@ AsyncErrorEvent::AsyncErrorEvent(Class_base* c):ErrorEvent(c, "asyncError")
 
 void AsyncErrorEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ErrorEvent>::getRef());
-
+	CLASS_SETUP(c, ErrorEvent, _constructor, CLASS_SEALED);
 	c->setVariableByQName("ASYNC_ERROR","",Class<ASString>::getInstanceS("asyncError"),DECLARED_TRAIT);
 }
 
@@ -1043,9 +1014,7 @@ ShutdownEvent::ShutdownEvent():Event(NULL, "shutdownEvent")
 
 void HTTPStatusEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("HTTP_STATUS","",Class<ASString>::getInstanceS("httpStatus"),DECLARED_TRAIT);
 }
 
@@ -1109,18 +1078,14 @@ void ParseRPCMessageEvent::finalize()
 
 void StatusEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	/* TODO: dispatch this event */
 	c->setVariableByQName("STATUS","",Class<ASString>::getInstanceS("status"),DECLARED_TRAIT);
 }
 
 void DataEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<TextEvent>::getRef());
-
+	CLASS_SETUP(c, TextEvent, _constructor, CLASS_SEALED);
 	/* TODO: dispatch this event */
 	c->setVariableByQName("DATA","",Class<ASString>::getInstanceS("data"),DECLARED_TRAIT);
 	/* TODO: dispatch this event */
@@ -1160,9 +1125,7 @@ Event* DataEvent::cloneImpl() const
 
 void InvokeEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("INVOKE","",Class<ASString>::getInstanceS("invoke"),DECLARED_TRAIT);
 }
 
@@ -1179,9 +1142,7 @@ DRMErrorEvent::DRMErrorEvent(Class_base* c) : ErrorEvent(c, "drmAuthenticate")
 
 void DRMErrorEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ErrorEvent>::getRef());
-
+	CLASS_SETUP(c, ErrorEvent, _constructor, CLASS_SEALED);
 	c->setVariableByQName("DRM_ERROR","",Class<ASString>::getInstanceS("drmError"),DECLARED_TRAIT);
 	c->setVariableByQName("DRM_LOAD_DEVICEID_ERROR","",Class<ASString>::getInstanceS("drmLoadDeviceIdError"),DECLARED_TRAIT);
 }
@@ -1201,9 +1162,7 @@ DRMStatusEvent::DRMStatusEvent(Class_base* c) : Event(c, "drmAuthenticate")
 
 void DRMStatusEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("DRM_STATUS","",Class<ASString>::getInstanceS("drmStatus"),DECLARED_TRAIT);
 }
 
@@ -1223,11 +1182,8 @@ StageVideoEvent::StageVideoEvent(Class_base* c)
 
 void StageVideoEvent::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<Event>::getRef());
-	
+	CLASS_SETUP(c, Event, _constructor, CLASS_SEALED);
 	c->setVariableByQName("RENDER_STATE","",Class<ASString>::getInstanceS("renderState"),DECLARED_TRAIT);
-
 	REGISTER_GETTER(c,colorSpace);
 	REGISTER_GETTER(c,status);
 }
@@ -1273,6 +1229,7 @@ StageVideoAvailabilityEvent::StageVideoAvailabilityEvent(Class_base* c)
 
 void StageVideoAvailabilityEvent::sinit(Class_base* c)
 {
+	CLASS_SETUP_NO_CONSTRUCTOR(c, Event, CLASS_SEALED);
 	c->setVariableByQName("STAGE_VIDEO_AVAILABILITY","",Class<ASString>::getInstanceS("stageVideoAvailability"),DECLARED_TRAIT);
 	REGISTER_GETTER(c, availability);
 }
diff --git a/src/scripting/flash/external/ExternalInterface.cpp b/src/scripting/flash/external/ExternalInterface.cpp
index 7cc2130..267b167 100644
--- a/src/scripting/flash/external/ExternalInterface.cpp
+++ b/src/scripting/flash/external/ExternalInterface.cpp
@@ -26,7 +26,7 @@ using namespace lightspark;
 
 void ExternalInterface::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("available","",Class<IFunction>::getFunction(_getAvailable),GETTER_METHOD,false);
 	c->setDeclaredMethodByQName("objectID","",Class<IFunction>::getFunction(_getObjectID),GETTER_METHOD,false);
 	c->setDeclaredMethodByQName("marshallExceptions","",Class<IFunction>::getFunction(_getMarshallExceptions),GETTER_METHOD,false);
diff --git a/src/scripting/flash/filters/flashfilters.cpp b/src/scripting/flash/filters/flashfilters.cpp
index 8059c4e..a125d85 100644
--- a/src/scripting/flash/filters/flashfilters.cpp
+++ b/src/scripting/flash/filters/flashfilters.cpp
@@ -26,8 +26,7 @@ using namespace lightspark;
 
 void BitmapFilter::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_SEALED);
 	c->setDeclaredMethodByQName("clone","",Class<IFunction>::getFunction(clone),NORMAL_METHOD,true);
 }
 
@@ -50,8 +49,7 @@ GlowFilter::GlowFilter(Class_base* c):
 
 void GlowFilter::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<BitmapFilter>::getRef());
+	CLASS_SETUP(c, BitmapFilter, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, alpha);
 	REGISTER_GETTER_SETTER(c, blurX);
 	REGISTER_GETTER_SETTER(c, blurY);
@@ -108,8 +106,7 @@ DropShadowFilter::DropShadowFilter(Class_base* c):
 
 void DropShadowFilter::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<BitmapFilter>::getRef());
+	CLASS_SETUP(c, BitmapFilter, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c, alpha);
 	REGISTER_GETTER_SETTER(c, angle);
 	REGISTER_GETTER_SETTER(c, blurX);
@@ -171,8 +168,7 @@ BitmapFilter* DropShadowFilter::cloneImpl() const
 
 void BitmapFilterQuality::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("HIGH","",abstract_i(3),DECLARED_TRAIT);
 	c->setVariableByQName("LOW","",abstract_i(1),DECLARED_TRAIT);
 	c->setVariableByQName("MEDIUM","",abstract_i(3),DECLARED_TRAIT);
diff --git a/src/scripting/flash/geom/flashgeom.cpp b/src/scripting/flash/geom/flashgeom.cpp
index 4d7f12b..9cd0c84 100644
--- a/src/scripting/flash/geom/flashgeom.cpp
+++ b/src/scripting/flash/geom/flashgeom.cpp
@@ -26,7 +26,7 @@ using namespace std;
 
 void Rectangle::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	IFunction* gleft=Class<IFunction>::getFunction(_getLeft);
 	c->setDeclaredMethodByQName("left","",gleft,GETTER_METHOD,true);
 	gleft->incRef();
@@ -490,7 +490,7 @@ ColorTransform::ColorTransform(Class_base* c, const CXFORMWITHALPHA& cx)
 
 void ColorTransform::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 
 	// properties
 	c->setDeclaredMethodByQName("color","",Class<IFunction>::getFunction(getColor),GETTER_METHOD,true);
@@ -738,7 +738,7 @@ ASFUNCTIONBODY(ColorTransform,_toString)
 
 void Point::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("x","",Class<IFunction>::getFunction(_getX),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("y","",Class<IFunction>::getFunction(_getY),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("length","",Class<IFunction>::getFunction(_getlength),GETTER_METHOD,true);
@@ -930,7 +930,7 @@ void Transform::finalize()
 
 void Transform::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("colorTransform","",Class<IFunction>::getFunction(_getColorTransform),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("colorTransform","",Class<IFunction>::getFunction(_setColorTransform),SETTER_METHOD,true);
 	c->setDeclaredMethodByQName("matrix","",Class<IFunction>::getFunction(_setMatrix),SETTER_METHOD,true);
@@ -999,7 +999,7 @@ Matrix::Matrix(Class_base* c, const MATRIX& m):ASObject(c),matrix(m)
 
 void Matrix::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	
 	//Properties
 	c->setDeclaredMethodByQName("a","",Class<IFunction>::getFunction(_get_a),GETTER_METHOD,true);
@@ -1318,7 +1318,7 @@ ASFUNCTIONBODY(Matrix,deltaTransformPoint)
 
 void Vector3D::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 
 	// constants
 	Vector3D* tx = new (c->memoryAccount) Vector3D(c);
diff --git a/src/scripting/flash/media/flashmedia.cpp b/src/scripting/flash/media/flashmedia.cpp
index 4775d02..55c4823 100644
--- a/src/scripting/flash/media/flashmedia.cpp
+++ b/src/scripting/flash/media/flashmedia.cpp
@@ -32,8 +32,7 @@ using namespace std;
 
 void SoundTransform::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	REGISTER_GETTER_SETTER(c,volume);
 	REGISTER_GETTER_SETTER(c,pan);
 }
@@ -56,8 +55,7 @@ ASFUNCTIONBODY(SoundTransform,_constructor)
 
 void Video::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObject>::getRef());
+	CLASS_SETUP(c, DisplayObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("videoWidth","",Class<IFunction>::getFunction(_getVideoWidth),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("videoHeight","",Class<IFunction>::getFunction(_getVideoHeight),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("width","",Class<IFunction>::getFunction(Video::_getWidth),GETTER_METHOD,true);
@@ -243,8 +241,7 @@ Sound::~Sound()
 
 void Sound::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("load","",Class<IFunction>::getFunction(load),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("play","",Class<IFunction>::getFunction(play),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("close","",Class<IFunction>::getFunction(close),NORMAL_METHOD,true);
@@ -363,8 +360,7 @@ ASFUNCTIONBODY_GETTER(Sound,length);
 
 void SoundLoaderContext::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c,bufferTime);
 	REGISTER_GETTER_SETTER(c,checkPolicyFile);
 }
@@ -404,8 +400,7 @@ SoundChannel::~SoundChannel()
 
 void SoundChannel::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("stop","",Class<IFunction>::getFunction(stop),NORMAL_METHOD,true);
 
 	REGISTER_GETTER(c,position);
@@ -592,8 +587,7 @@ void SoundChannel::threadAbort()
 
 void StageVideo::sinit(Class_base *c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 }
 
 ASFUNCTIONBODY(StageVideo,_constructor)
@@ -604,14 +598,14 @@ ASFUNCTIONBODY(StageVideo,_constructor)
 
 void StageVideoAvailability::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("AVAILABLE","",Class<ASString>::getInstanceS("available"),DECLARED_TRAIT);
 	c->setVariableByQName("UNAVAILABLE","",Class<ASString>::getInstanceS("unavailable"),DECLARED_TRAIT);
 }
 
 void VideoStatus::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("ACCELERATED","",Class<ASString>::getInstanceS("accelerated"),DECLARED_TRAIT);
 	c->setVariableByQName("SOFTWARE","",Class<ASString>::getInstanceS("software"),DECLARED_TRAIT);
 	c->setVariableByQName("UNAVAILABLE","",Class<ASString>::getInstanceS("unavailable"),DECLARED_TRAIT);
diff --git a/src/scripting/flash/net/URLRequestHeader.cpp b/src/scripting/flash/net/URLRequestHeader.cpp
index cee832c..4bd97d6 100644
--- a/src/scripting/flash/net/URLRequestHeader.cpp
+++ b/src/scripting/flash/net/URLRequestHeader.cpp
@@ -10,8 +10,7 @@ URLRequestHeader::URLRequestHeader(Class_base* c) : ASObject(c)
 
 void URLRequestHeader::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL | CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c,name);
 	REGISTER_GETTER_SETTER(c,value);
 }
diff --git a/src/scripting/flash/net/URLStream.cpp b/src/scripting/flash/net/URLStream.cpp
index d1bcdc0..3702865 100644
--- a/src/scripting/flash/net/URLStream.cpp
+++ b/src/scripting/flash/net/URLStream.cpp
@@ -89,8 +89,7 @@ void URLStreamThread::execute()
 
 void URLStream::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("load","",Class<IFunction>::getFunction(load),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("close","",Class<IFunction>::getFunction(close),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("load","",Class<IFunction>::getFunction(load),NORMAL_METHOD,true);
diff --git a/src/scripting/flash/net/XMLSocket.cpp b/src/scripting/flash/net/XMLSocket.cpp
index 273ce00..8fe5abd 100644
--- a/src/scripting/flash/net/XMLSocket.cpp
+++ b/src/scripting/flash/net/XMLSocket.cpp
@@ -172,8 +172,7 @@ XMLSocket::~XMLSocket()
 
 void XMLSocket::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("close","",Class<IFunction>::getFunction(_close),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("connect","",Class<IFunction>::getFunction(_connect),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("send","",Class<IFunction>::getFunction(_send),NORMAL_METHOD,true);
diff --git a/src/scripting/flash/net/flashnet.cpp b/src/scripting/flash/net/flashnet.cpp
index 08b0c8d..c81aafa 100644
--- a/src/scripting/flash/net/flashnet.cpp
+++ b/src/scripting/flash/net/flashnet.cpp
@@ -42,8 +42,7 @@ URLRequest::URLRequest(Class_base* c):ASObject(c),method(GET),contentType("appli
 
 void URLRequest::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL | CLASS_SEALED);
 	c->setDeclaredMethodByQName("url","",Class<IFunction>::getFunction(_setURL),SETTER_METHOD,true);
 	c->setDeclaredMethodByQName("url","",Class<IFunction>::getFunction(_getURL),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("method","",Class<IFunction>::getFunction(_setMethod),SETTER_METHOD,true);
@@ -289,7 +288,7 @@ ASFUNCTIONBODY_GETTER_SETTER(URLRequest,requestHeaders);
 
 void URLRequestMethod::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("GET","",Class<ASString>::getInstanceS("GET"),DECLARED_TRAIT);
 	c->setVariableByQName("POST","",Class<ASString>::getInstanceS("POST"),DECLARED_TRAIT);
 }
@@ -386,8 +385,7 @@ void URLLoader::finalize()
 
 void URLLoader::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("dataFormat","",Class<IFunction>::getFunction(_getDataFormat),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("data","",Class<IFunction>::getFunction(_getData),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("data","",Class<IFunction>::getFunction(_setData),SETTER_METHOD,true);
@@ -544,7 +542,7 @@ ASFUNCTIONBODY(URLLoader,_setDataFormat)
 
 void URLLoaderDataFormat::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("VARIABLES","",Class<ASString>::getInstanceS("variables"),DECLARED_TRAIT);
 	c->setVariableByQName("TEXT","",Class<ASString>::getInstanceS("text"),DECLARED_TRAIT);
 	c->setVariableByQName("BINARY","",Class<ASString>::getInstanceS("binary"),DECLARED_TRAIT);
@@ -557,7 +555,9 @@ SharedObject::SharedObject(Class_base* c):EventDispatcher(c)
 
 void SharedObject::sinit(Class_base* c)
 {
-	c->setSuper(Class<EventDispatcher>::getRef());
+	// TODO: Use _constructorNotInstantiatable after getLocal is
+	// implemented
+	CLASS_SETUP_NO_CONSTRUCTOR(c, EventDispatcher, CLASS_SEALED);
 	c->setDeclaredMethodByQName("getLocal","",Class<IFunction>::getFunction(getLocal),NORMAL_METHOD,false);
 	REGISTER_GETTER(c,data);
 };
@@ -572,7 +572,7 @@ ASFUNCTIONBODY(SharedObject,getLocal)
 
 void ObjectEncoding::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("AMF0","",abstract_i(AMF0),DECLARED_TRAIT);
 	c->setVariableByQName("AMF3","",abstract_i(AMF3),DECLARED_TRAIT);
 	c->setVariableByQName("DEFAULT","",abstract_i(DEFAULT),DECLARED_TRAIT);
@@ -586,8 +586,7 @@ NetConnection::NetConnection(Class_base* c):
 
 void NetConnection::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("connect","",Class<IFunction>::getFunction(connect),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("call","",Class<IFunction>::getFunction(call),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("connected","",Class<IFunction>::getFunction(_getConnected),GETTER_METHOD,true);
@@ -961,8 +960,7 @@ NetStream::~NetStream()
 
 void NetStream::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setVariableByQName("CONNECT_TO_FMS","",Class<ASString>::getInstanceS("connectToFMS"),DECLARED_TRAIT);
 	c->setVariableByQName("DIRECT_CONNECTIONS","",Class<ASString>::getInstanceS("directConnections"),DECLARED_TRAIT);
 	c->setDeclaredMethodByQName("play","",Class<IFunction>::getFunction(play),NORMAL_METHOD,true);
@@ -1679,8 +1677,7 @@ void URLVariables::decode(const tiny_string& s)
 
 void URLVariables::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 	c->setDeclaredMethodByQName("decode","",Class<IFunction>::getFunction(decode),NORMAL_METHOD,true);
 	c->prototype->setVariableByQName("toString","",Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
 }
@@ -1856,8 +1853,7 @@ ASFUNCTIONBODY(lightspark,navigateToURL)
 
 void Responder::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("onResult","",Class<IFunction>::getFunction(onResult),NORMAL_METHOD,true);
 }
 
diff --git a/src/scripting/flash/sensors/flashsensors.cpp b/src/scripting/flash/sensors/flashsensors.cpp
index bee463b..3d4587f 100644
--- a/src/scripting/flash/sensors/flashsensors.cpp
+++ b/src/scripting/flash/sensors/flashsensors.cpp
@@ -29,10 +29,11 @@
 using namespace std;
 using namespace lightspark;
 
-Accelerometer::Accelerometer(Class_base* c):ASObject(c) {}
+Accelerometer::Accelerometer(Class_base* c):EventDispatcher(c) {}
 
 void Accelerometer::sinit(Class_base* c)
 {
+	CLASS_SETUP_NO_CONSTRUCTOR(c, EventDispatcher, CLASS_SEALED);
 	// properties
 	c->setDeclaredMethodByQName("isSupported", "", Class<IFunction>::getFunction(_isSupported),GETTER_METHOD,false);
 }
diff --git a/src/scripting/flash/sensors/flashsensors.h b/src/scripting/flash/sensors/flashsensors.h
index 9f9ef19..760c476 100644
--- a/src/scripting/flash/sensors/flashsensors.h
+++ b/src/scripting/flash/sensors/flashsensors.h
@@ -30,7 +30,7 @@
 
 namespace lightspark
 {
-class Accelerometer: public ASObject {
+class Accelerometer: public EventDispatcher {
 	public:
 		Accelerometer(Class_base* c);
 		static void sinit(Class_base* c);
diff --git a/src/scripting/flash/system/flashsystem.cpp b/src/scripting/flash/system/flashsystem.cpp
index 70185cc..94ee61b 100644
--- a/src/scripting/flash/system/flashsystem.cpp
+++ b/src/scripting/flash/system/flashsystem.cpp
@@ -43,6 +43,7 @@ const char* Capabilities::MANUFACTURER = "Adobe Linux";
 
 void Capabilities::sinit(Class_base* c)
 {
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("language","",Class<IFunction>::getFunction(_getLanguage),GETTER_METHOD,false);
 	c->setDeclaredMethodByQName("playerType","",Class<IFunction>::getFunction(_getPlayerType),GETTER_METHOD,false);
 	c->setDeclaredMethodByQName("version","",Class<IFunction>::getFunction(_getVersion),GETTER_METHOD,false);
@@ -127,7 +128,7 @@ ApplicationDomain::ApplicationDomain(Class_base* c, _NR<ApplicationDomain> p):AS
 
 void ApplicationDomain::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	//Static
 	c->setDeclaredMethodByQName("currentDomain","",Class<IFunction>::getFunction(_getCurrentDomain),GETTER_METHOD,false);
 	c->setDeclaredMethodByQName("MIN_DOMAIN_MEMORY_LENGTH","",Class<IFunction>::getFunction(_getMinDomainMemoryLength),GETTER_METHOD,false);
@@ -336,7 +337,7 @@ LoaderContext::LoaderContext(Class_base* c):
 
 void LoaderContext::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c, applicationDomain);
 	REGISTER_GETTER_SETTER(c, checkPolicyFile);
 	REGISTER_GETTER_SETTER(c, securityDomain);
@@ -369,7 +370,7 @@ bool LoaderContext::getCheckPolicyFile()
 
 void SecurityDomain::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	//Static
 	c->setDeclaredMethodByQName("currentDomain","",Class<IFunction>::getFunction(_getCurrentDomain),GETTER_METHOD,false);
 }
@@ -392,8 +393,8 @@ ASFUNCTIONBODY(SecurityDomain,_getCurrentDomain)
 
 void Security::sinit(Class_base* c)
 {
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_SEALED | CLASS_FINAL);
 	//Fully static class
-	c->setConstructor(NULL);
 	c->setDeclaredMethodByQName("exactSettings","",Class<IFunction>::getFunction(_getExactSettings),GETTER_METHOD,false);
 	c->setDeclaredMethodByQName("exactSettings","",Class<IFunction>::getFunction(_setExactSettings),SETTER_METHOD,false);
 	c->setDeclaredMethodByQName("sandboxType","",Class<IFunction>::getFunction(_getSandboxType),GETTER_METHOD,false);
@@ -484,6 +485,7 @@ ASFUNCTIONBODY(lightspark, fscommand)
 
 void System::sinit(Class_base* c)
 {
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("totalMemory","",Class<IFunction>::getFunction(totalMemory),GETTER_METHOD,false);
 }
 
diff --git a/src/scripting/flash/text/flashtext.cpp b/src/scripting/flash/text/flashtext.cpp
index 615bbb4..cc3d664 100644
--- a/src/scripting/flash/text/flashtext.cpp
+++ b/src/scripting/flash/text/flashtext.cpp
@@ -33,16 +33,14 @@ using namespace lightspark;
 
 void lightspark::AntiAliasType::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("ADVANCED","",Class<ASString>::getInstanceS("advanced"),DECLARED_TRAIT);
 	c->setVariableByQName("NORMAL","",Class<ASString>::getInstanceS("normal"),DECLARED_TRAIT);
 }
 
 void ASFont::sinit(Class_base* c)
 {
-//	c->constructor=Class<IFunction>::getFunction(_constructor);
-	//c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED);
 	c->setDeclaredMethodByQName("enumerateFonts","",Class<IFunction>::getFunction(enumerateFonts),NORMAL_METHOD,false);
 	c->setDeclaredMethodByQName("registerFont","",Class<IFunction>::getFunction(registerFont),NORMAL_METHOD,false);
 
@@ -110,8 +108,7 @@ TextField::TextField(Class_base* c, const TextData& textData, bool _selectable,
 
 void TextField::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<InteractiveObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, InteractiveObject, CLASS_SEALED);
 
 	// methods
 	c->setDeclaredMethodByQName("appendText","",Class<IFunction>::getFunction(TextField:: appendText),NORMAL_METHOD,true);
@@ -1139,8 +1136,9 @@ uint32_t TextField::HtmlTextParser::parseFontSize(const Glib::ustring& sizestr,
 	return (uint32_t)size;
 }
 
-void TextFieldAutoSize ::sinit(Class_base* c)
+void TextFieldAutoSize::sinit(Class_base* c)
 {
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("CENTER","",Class<ASString>::getInstanceS("center"),DECLARED_TRAIT);
 	c->setVariableByQName("LEFT","",Class<ASString>::getInstanceS("left"),DECLARED_TRAIT);
 	c->setVariableByQName("NONE","",Class<ASString>::getInstanceS("none"),DECLARED_TRAIT);
@@ -1149,12 +1147,14 @@ void TextFieldAutoSize ::sinit(Class_base* c)
 
 void TextFieldType::sinit(Class_base* c)
 {
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("DYNAMIC","",Class<ASString>::getInstanceS("dynamic"),DECLARED_TRAIT);
 	c->setVariableByQName("INPUT","",Class<ASString>::getInstanceS("input"),DECLARED_TRAIT);
 }
 
-void TextFormatAlign ::sinit(Class_base* c)
+void TextFormatAlign::sinit(Class_base* c)
 {
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("CENTER","",Class<ASString>::getInstanceS("center"),DECLARED_TRAIT);
 	c->setVariableByQName("END","",Class<ASString>::getInstanceS("end"),DECLARED_TRAIT);
 	c->setVariableByQName("JUSTIFY","",Class<ASString>::getInstanceS("justify"),DECLARED_TRAIT);
@@ -1165,8 +1165,7 @@ void TextFormatAlign ::sinit(Class_base* c)
 
 void TextFormat::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c,align);
 	REGISTER_GETTER_SETTER(c,blockIndent);
 	REGISTER_GETTER_SETTER(c,bold);
@@ -1265,8 +1264,7 @@ void StyleSheet::finalize()
 
 void StyleSheet::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, EventDispatcher, CLASS_DYNAMIC_NOT_FINAL);
 	c->setDeclaredMethodByQName("styleNames","",Class<IFunction>::getFunction(_getStyleNames),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("setStyle","",Class<IFunction>::getFunction(setStyle),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("getStyle","",Class<IFunction>::getFunction(getStyle),NORMAL_METHOD,true);
@@ -1325,9 +1323,10 @@ ASFUNCTIONBODY(StyleSheet,_getStyleNames)
 
 void StaticText::sinit(Class_base* c)
 {
-	//TODO: spec says that constructor should throw ArgumentError
-	c->setConstructor(NULL);
-	c->setSuper(Class<DisplayObject>::getRef());
+	// FIXME: the constructor should be
+	// _constructorNotInstantiatable but that breaks when
+	// DisplayObjectContainer::initFrame calls the constructor
+	CLASS_SETUP_NO_CONSTRUCTOR(c, DisplayObject, CLASS_FINAL | CLASS_SEALED);
 	c->setDeclaredMethodByQName("text","",Class<IFunction>::getFunction(_getText),GETTER_METHOD,true);
 }
 
@@ -1339,8 +1338,7 @@ ASFUNCTIONBODY(StaticText,_getText)
 
 void FontStyle::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("BOLD","",Class<ASString>::getInstanceS("bold"),DECLARED_TRAIT);
 	c->setVariableByQName("BOLD_ITALIC","",Class<ASString>::getInstanceS("boldItalic"),DECLARED_TRAIT);
 	c->setVariableByQName("ITALIC","",Class<ASString>::getInstanceS("italic"),DECLARED_TRAIT);
@@ -1349,8 +1347,7 @@ void FontStyle::sinit(Class_base* c)
 
 void FontType::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("DEVICE","",Class<ASString>::getInstanceS("device"),DECLARED_TRAIT);
 	c->setVariableByQName("EMBEDDED","",Class<ASString>::getInstanceS("embedded"),DECLARED_TRAIT);
 	c->setVariableByQName("EMBEDDED_CFF","",Class<ASString>::getInstanceS("embeddedCFF"),DECLARED_TRAIT);
@@ -1358,8 +1355,7 @@ void FontType::sinit(Class_base* c)
 
 void TextDisplayMode::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("CRT","",Class<ASString>::getInstanceS("crt"),DECLARED_TRAIT);
 	c->setVariableByQName("DEFAULT","",Class<ASString>::getInstanceS("default"),DECLARED_TRAIT);
 	c->setVariableByQName("LCD","",Class<ASString>::getInstanceS("lcd"),DECLARED_TRAIT);
@@ -1367,16 +1363,14 @@ void TextDisplayMode::sinit(Class_base* c)
 
 void TextColorType::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("DARK_COLOR","",Class<ASString>::getInstanceS("dark"),DECLARED_TRAIT);
 	c->setVariableByQName("LIGHT_COLOR","",Class<ASString>::getInstanceS("light"),DECLARED_TRAIT);
 }
 
 void GridFitType::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("NONE","",Class<ASString>::getInstanceS("none"),DECLARED_TRAIT);
 	c->setVariableByQName("PIXEL","",Class<ASString>::getInstanceS("pixel"),DECLARED_TRAIT);
 	c->setVariableByQName("SUBPIXEL","",Class<ASString>::getInstanceS("subpixel"),DECLARED_TRAIT);
@@ -1384,16 +1378,14 @@ void GridFitType::sinit(Class_base* c)
 
 void TextInteractionMode::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("NORMAL","",Class<ASString>::getInstanceS("normal"),DECLARED_TRAIT);
 	c->setVariableByQName("SELECTION","",Class<ASString>::getInstanceS("selection"),DECLARED_TRAIT);
 }
 
 void TextLineMetrics::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c, ascent);
 	REGISTER_GETTER_SETTER(c, descent);
 	REGISTER_GETTER_SETTER(c, height);
diff --git a/src/scripting/flash/text/flashtextengine.cpp b/src/scripting/flash/text/flashtextengine.cpp
index c9c4900..123ac2a 100644
--- a/src/scripting/flash/text/flashtextengine.cpp
+++ b/src/scripting/flash/text/flashtextengine.cpp
@@ -29,20 +29,12 @@ using namespace lightspark;
 
 void ContentElement::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
-}
-
-ASFUNCTIONBODY(ContentElement, _constructor)
-{
-	throwError<ArgumentError>(kCantInstantiateError, "ContentElement");
-	return NULL;
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_SEALED);
 }
 
 void ElementFormat::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("GRAPHIC_ELEMENT","",abstract_ui(0xFDEF),CONSTANT_TRAIT);
 }
 
@@ -54,8 +46,7 @@ ASFUNCTIONBODY(ElementFormat, _constructor)
 
 void FontDescription::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL | CLASS_SEALED);
 }
 
 ASFUNCTIONBODY(FontDescription, _constructor)
@@ -66,16 +57,14 @@ ASFUNCTIONBODY(FontDescription, _constructor)
 
 void FontWeight::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("BOLD","",Class<ASString>::getInstanceS("bold"),CONSTANT_TRAIT);
 	c->setVariableByQName("NORMAL","",Class<ASString>::getInstanceS("normal"),CONSTANT_TRAIT);
 }
 
 void TextBlock::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL | CLASS_SEALED);
 	c->setDeclaredMethodByQName("createTextLine","",Class<IFunction>::getFunction(createTextLine),NORMAL_METHOD,true);
 	REGISTER_GETTER_SETTER(c, content);
 }
@@ -120,8 +109,7 @@ ASFUNCTIONBODY(TextBlock, createTextLine)
 
 void TextElement::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ContentElement>::getRef());
+	CLASS_SETUP(c, ContentElement, _constructor, CLASS_FINAL | CLASS_SEALED);
 	REGISTER_GETTER_SETTER(c, text);
 }
 
@@ -156,8 +144,7 @@ TextLine::TextLine(Class_base* c, _NR<ContentElement> content, _NR<TextBlock> ow
 
 void TextLine::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<DisplayObjectContainer>::getRef());
+	CLASS_SETUP(c, DisplayObjectContainer, _constructor, CLASS_FINAL | CLASS_SEALED);
 	REGISTER_GETTER(c, textBlock);
 	c->setVariableByQName("MAX_LINE_WIDTH","",abstract_ui(MAX_LINE_WIDTH),CONSTANT_TRAIT);
 }
diff --git a/src/scripting/flash/text/flashtextengine.h b/src/scripting/flash/text/flashtextengine.h
index df28501..c22f650 100644
--- a/src/scripting/flash/text/flashtextengine.h
+++ b/src/scripting/flash/text/flashtextengine.h
@@ -34,7 +34,6 @@ class ContentElement: public ASObject
 public:
 	ContentElement(Class_base* c): ASObject(c) {};
 	static void sinit(Class_base* c);
-	ASFUNCTION(_constructor);
 };
 
 class ElementFormat: public ASObject
diff --git a/src/scripting/flash/ui/Keyboard.cpp b/src/scripting/flash/ui/Keyboard.cpp
index 0541cdb..5b1243c 100644
--- a/src/scripting/flash/ui/Keyboard.cpp
+++ b/src/scripting/flash/ui/Keyboard.cpp
@@ -27,8 +27,7 @@ using namespace lightspark;
 
 void Keyboard::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_FINAL | CLASS_SEALED);
 	c->setDeclaredMethodByQName("capsLock","",Class<IFunction>::getFunction(capsLock),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("hasVirtualKeyboard","",Class<IFunction>::getFunction(hasVirtualKeyboard),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("numLock","",Class<IFunction>::getFunction(numLock),GETTER_METHOD,true);
@@ -76,8 +75,7 @@ ASFUNCTIONBODY(Keyboard, isAccessible)
 
 void KeyboardType::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("ALPHANUMERIC","",Class<ASString>::getInstanceS("alphanumeric"),DECLARED_TRAIT);
 	c->setVariableByQName("KEYPAD","",Class<ASString>::getInstanceS("keypad"),DECLARED_TRAIT);
 	c->setVariableByQName("NONE","",Class<ASString>::getInstanceS("none"),DECLARED_TRAIT);
@@ -85,8 +83,7 @@ void KeyboardType::sinit(Class_base* c)
 
 void KeyLocation::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_FINAL | CLASS_SEALED);
 	c->setVariableByQName("LEFT","",Class<UInteger>::getInstanceS(1),DECLARED_TRAIT);
 	c->setVariableByQName("NUM_PAD","",Class<UInteger>::getInstanceS(3),DECLARED_TRAIT);
 	c->setVariableByQName("RIGHT","",Class<UInteger>::getInstanceS(2),DECLARED_TRAIT);
diff --git a/src/scripting/flash/ui/Mouse.cpp b/src/scripting/flash/ui/Mouse.cpp
index f4c8f30..f53d61b 100644
--- a/src/scripting/flash/ui/Mouse.cpp
+++ b/src/scripting/flash/ui/Mouse.cpp
@@ -29,8 +29,7 @@ using namespace lightspark;
 
 void Mouse::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructorNotInstantiatable, CLASS_FINAL | CLASS_SEALED);
 	c->setDeclaredMethodByQName("hide","",Class<IFunction>::getFunction(hide),NORMAL_METHOD,false);
 	c->setDeclaredMethodByQName("show","",Class<IFunction>::getFunction(show),NORMAL_METHOD,false);
 	c->setDeclaredMethodByQName("cursor","",Class<IFunction>::getFunction(getCursor),GETTER_METHOD,false);
@@ -39,12 +38,6 @@ void Mouse::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("supportsNativeCursor","",Class<IFunction>::getFunction(getSupportsNativeCursor),GETTER_METHOD,false);
 }
 
-ASFUNCTIONBODY(Mouse, _constructor)
-{
-	throwError<ArgumentError>(kCantInstantiateError, "Mouse");
-	return NULL;
-}
-
 ASFUNCTIONBODY(Mouse, hide)
 {
 	getSys()->showMouseCursor(false);
diff --git a/src/scripting/flash/ui/Mouse.h b/src/scripting/flash/ui/Mouse.h
index 06e8a06..e81d34e 100644
--- a/src/scripting/flash/ui/Mouse.h
+++ b/src/scripting/flash/ui/Mouse.h
@@ -30,7 +30,6 @@ class Mouse : public ASObject
 public:
 	Mouse(Class_base* c):ASObject(c){}
 	static void sinit(Class_base* c);
-	ASFUNCTION(_constructor);
 	ASFUNCTION(hide);
 	ASFUNCTION(show);
 	ASFUNCTION(getCursor);
diff --git a/src/scripting/flash/utils/flashutils.cpp b/src/scripting/flash/utils/flashutils.cpp
index 2fd9976..c99a60e 100644
--- a/src/scripting/flash/utils/flashutils.cpp
+++ b/src/scripting/flash/utils/flashutils.cpp
@@ -39,7 +39,7 @@ const char* Endian::bigEndian = "bigEndian";
 
 void Endian::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("LITTLE_ENDIAN","",Class<ASString>::getInstanceS(littleEndian),DECLARED_TRAIT);
 	c->setVariableByQName("BIG_ENDIAN","",Class<ASString>::getInstanceS(bigEndian),DECLARED_TRAIT);
 }
@@ -110,9 +110,7 @@ ByteArray::~ByteArray()
 
 void ByteArray::sinit(Class_base* c)
 {
-	c->setConstructor(NULL);
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED);
 	c->setDeclaredMethodByQName("length","",Class<IFunction>::getFunction(_getLength),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("length","",Class<IFunction>::getFunction(_setLength),SETTER_METHOD,true);
 	c->setDeclaredMethodByQName("bytesAvailable","",Class<IFunction>::getFunction(_getBytesAvailable),GETTER_METHOD,true);
@@ -1308,8 +1306,7 @@ ASFUNCTIONBODY(ByteArray,unshift)
 
 void Timer::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<EventDispatcher>::getRef());
+	CLASS_SETUP(c, EventDispatcher, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("currentCount","",Class<IFunction>::getFunction(_getCurrentCount),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("repeatCount","",Class<IFunction>::getFunction(_getRepeatCount),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("repeatCount","",Class<IFunction>::getFunction(_setRepeatCount),SETTER_METHOD,true);
@@ -1531,8 +1528,7 @@ void Dictionary::finalize()
 
 void Dictionary::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void Dictionary::buildTraits(ASObject* o)
@@ -1740,8 +1736,7 @@ tiny_string Dictionary::toString()
 
 void Proxy::sinit(Class_base* c)
 {
-	//c->constructor=Class<IFunction>::getFunction(_constructor);
-	c->setConstructor(NULL);
+	CLASS_SETUP_NO_CONSTRUCTOR(c, ASObject, CLASS_SEALED);
 }
 
 void Proxy::buildTraits(ASObject* o)
diff --git a/src/scripting/flash/xml/flashxml.cpp b/src/scripting/flash/xml/flashxml.cpp
index 3d0f0e7..b36af56 100644
--- a/src/scripting/flash/xml/flashxml.cpp
+++ b/src/scripting/flash/xml/flashxml.cpp
@@ -40,8 +40,7 @@ void XMLNode::finalize()
 
 void XMLNode::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("toString","",Class<IFunction>::getFunction(_toString),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("attributes","",Class<IFunction>::getFunction(attributes),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("childNodes","",Class<IFunction>::getFunction(XMLNode::childNodes),GETTER_METHOD,true);
@@ -262,8 +261,7 @@ XMLDocument::XMLDocument(Class_base* c, tiny_string s)
 
 void XMLDocument::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<XMLNode>::getRef());
+	CLASS_SETUP(c, XMLNode, _constructor, CLASS_SEALED);
 	c->setDeclaredMethodByQName("parseXML","",Class<IFunction>::getFunction(parseXML),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("toString","",Class<IFunction>::getFunction(_toString),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("firstChild","",Class<IFunction>::getFunction(XMLDocument::firstChild),GETTER_METHOD,true);
diff --git a/src/scripting/toplevel/ASString.cpp b/src/scripting/toplevel/ASString.cpp
index 10afb69..11e34c8 100644
--- a/src/scripting/toplevel/ASString.cpp
+++ b/src/scripting/toplevel/ASString.cpp
@@ -74,9 +74,7 @@ ASFUNCTIONBODY(ASString,_getLength)
 
 void ASString::sinit(Class_base* c)
 {
-	c->isFinal = true;
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL | CLASS_SEALED);
 	c->setDeclaredMethodByQName("split",AS3,Class<IFunction>::getFunction(split,2),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("substr",AS3,Class<IFunction>::getFunction(substr,2),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("substring",AS3,Class<IFunction>::getFunction(substring,2),NORMAL_METHOD,true);
diff --git a/src/scripting/toplevel/Array.cpp b/src/scripting/toplevel/Array.cpp
index 2dd5f36..77c6f56 100644
--- a/src/scripting/toplevel/Array.cpp
+++ b/src/scripting/toplevel/Array.cpp
@@ -37,10 +37,7 @@ Array::Array(Class_base* c):ASObject(c),
 
 void Array::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	// public constants
-	c->setSuper(Class<ASObject>::getRef());
-
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 	c->setVariableByQName("CASEINSENSITIVE","",abstract_d(CASEINSENSITIVE),CONSTANT_TRAIT);
 	c->setVariableByQName("DESCENDING","",abstract_d(DESCENDING),CONSTANT_TRAIT);
 	c->setVariableByQName("NUMERIC","",abstract_d(NUMERIC),CONSTANT_TRAIT);
diff --git a/src/scripting/toplevel/Boolean.cpp b/src/scripting/toplevel/Boolean.cpp
index 5f31167..288fc2b 100644
--- a/src/scripting/toplevel/Boolean.cpp
+++ b/src/scripting/toplevel/Boolean.cpp
@@ -69,9 +69,7 @@ ASFUNCTIONBODY(Boolean,generator)
 
 void Boolean::sinit(Class_base* c)
 {
-	c->isFinal=true;
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
 	c->prototype->setVariableByQName("valueOf",AS3,Class<IFunction>::getFunction(_valueOf),DYNAMIC_TRAIT);
 }
diff --git a/src/scripting/toplevel/Date.cpp b/src/scripting/toplevel/Date.cpp
index bceaba8..e618196 100644
--- a/src/scripting/toplevel/Date.cpp
+++ b/src/scripting/toplevel/Date.cpp
@@ -39,9 +39,7 @@ Date::~Date()
 
 void Date::sinit(Class_base* c)
 {
-	c->isFinal=true;
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor,7));
+	CLASS_SETUP_CONSTRUCTOR_LENGTH(c, ASObject, _constructor, 7, CLASS_FINAL);
 	c->setDeclaredMethodByQName("getTimezoneOffset",AS3,Class<IFunction>::getFunction(getTimezoneOffset),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("valueOf",AS3,Class<IFunction>::getFunction(valueOf),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("getTime",AS3,Class<IFunction>::getFunction(getTime),NORMAL_METHOD,true);
diff --git a/src/scripting/toplevel/Error.cpp b/src/scripting/toplevel/Error.cpp
index 3865195..a09131d 100644
--- a/src/scripting/toplevel/Error.cpp
+++ b/src/scripting/toplevel/Error.cpp
@@ -140,8 +140,7 @@ void ASError::errorGenerator(ASError* obj, ASObject* const* args, const unsigned
 
 void ASError::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 	c->setDeclaredMethodByQName("getStackTrace",AS3,Class<IFunction>::getFunction(getStackTrace),NORMAL_METHOD,true);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
 	REGISTER_GETTER(c, errorID);
@@ -177,8 +176,7 @@ ASFUNCTIONBODY(SecurityError,generator)
 
 void SecurityError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void SecurityError::buildTraits(ASObject* o)
@@ -205,8 +203,7 @@ ASFUNCTIONBODY(ArgumentError,generator)
 
 void ArgumentError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void ArgumentError::buildTraits(ASObject* o)
@@ -233,8 +230,7 @@ ASFUNCTIONBODY(DefinitionError,generator)
 
 void DefinitionError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void DefinitionError::buildTraits(ASObject* o)
@@ -261,8 +257,7 @@ ASFUNCTIONBODY(EvalError,generator)
 
 void EvalError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void EvalError::buildTraits(ASObject* o)
@@ -289,8 +284,7 @@ ASFUNCTIONBODY(RangeError,generator)
 
 void RangeError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void RangeError::buildTraits(ASObject* o)
@@ -317,8 +311,7 @@ ASFUNCTIONBODY(ReferenceError,generator)
 
 void ReferenceError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void ReferenceError::buildTraits(ASObject* o)
@@ -345,8 +338,7 @@ ASFUNCTIONBODY(SyntaxError,generator)
 
 void SyntaxError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void SyntaxError::buildTraits(ASObject* o)
@@ -373,8 +365,7 @@ ASFUNCTIONBODY(TypeError,generator)
 
 void TypeError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void TypeError::buildTraits(ASObject* o)
@@ -401,8 +392,7 @@ ASFUNCTIONBODY(URIError,generator)
 
 void URIError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void URIError::buildTraits(ASObject* o)
@@ -429,8 +419,7 @@ ASFUNCTIONBODY(VerifyError,generator)
 
 void VerifyError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void VerifyError::buildTraits(ASObject* o)
@@ -457,8 +446,7 @@ ASFUNCTIONBODY(UninitializedError,generator)
 
 void UninitializedError::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASError>::getRef());
+	CLASS_SETUP(c, ASError, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 }
 
 void UninitializedError::buildTraits(ASObject* o)
diff --git a/src/scripting/toplevel/Integer.cpp b/src/scripting/toplevel/Integer.cpp
index b920e45..751e27a 100644
--- a/src/scripting/toplevel/Integer.cpp
+++ b/src/scripting/toplevel/Integer.cpp
@@ -190,9 +190,7 @@ tiny_string Integer::toString(int32_t val)
 
 void Integer::sinit(Class_base* c)
 {
-	c->isFinal = true;
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("MAX_VALUE","",new (c->memoryAccount) Integer(c,numeric_limits<int32_t>::max()),CONSTANT_TRAIT);
 	c->setVariableByQName("MIN_VALUE","",new (c->memoryAccount) Integer(c,numeric_limits<int32_t>::min()),CONSTANT_TRAIT);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(Integer::_toString),DYNAMIC_TRAIT);
diff --git a/src/scripting/toplevel/Math.cpp b/src/scripting/toplevel/Math.cpp
index da4ffed..a4822b4 100644
--- a/src/scripting/toplevel/Math.cpp
+++ b/src/scripting/toplevel/Math.cpp
@@ -26,9 +26,7 @@ using namespace lightspark;
 
 void Math::sinit(Class_base* c)
 {
-	c->isFinal=true;
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	// public constants
 	c->setVariableByQName("E","",abstract_d(2.71828182845905),CONSTANT_TRAIT);
 	c->setVariableByQName("LN10","",abstract_d(2.302585092994046),CONSTANT_TRAIT);
diff --git a/src/scripting/toplevel/Number.cpp b/src/scripting/toplevel/Number.cpp
index 7c4dbaa..f56d2fa 100644
--- a/src/scripting/toplevel/Number.cpp
+++ b/src/scripting/toplevel/Number.cpp
@@ -258,9 +258,7 @@ tiny_string Number::toStringRadix(number_t val, int radix)
 
 void Number::sinit(Class_base* c)
 {
-	c->isFinal = true;
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	//Must create and link the number the hard way
 	Number* ninf=new (c->memoryAccount) Number(c, -numeric_limits<double>::infinity());
 	Number* pinf=new (c->memoryAccount) Number(c, numeric_limits<double>::infinity());
diff --git a/src/scripting/toplevel/RegExp.cpp b/src/scripting/toplevel/RegExp.cpp
index 1e1c5d5..c2705c9 100644
--- a/src/scripting/toplevel/RegExp.cpp
+++ b/src/scripting/toplevel/RegExp.cpp
@@ -35,8 +35,7 @@ RegExp::RegExp(Class_base* c, const tiny_string& _re):ASObject(c),dotall(false),
 
 void RegExp::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_DYNAMIC_NOT_FINAL);
 	c->setDeclaredMethodByQName("exec",AS3,Class<IFunction>::getFunction(exec),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("test",AS3,Class<IFunction>::getFunction(test),NORMAL_METHOD,true);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
diff --git a/src/scripting/toplevel/UInteger.cpp b/src/scripting/toplevel/UInteger.cpp
index 3a1fc96..508a74f 100644
--- a/src/scripting/toplevel/UInteger.cpp
+++ b/src/scripting/toplevel/UInteger.cpp
@@ -115,9 +115,7 @@ ASFUNCTIONBODY(UInteger,_valueOf)
 
 void UInteger::sinit(Class_base* c)
 {
-	c->isFinal = true;
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setVariableByQName("MAX_VALUE","",abstract_ui(0xFFFFFFFF),CONSTANT_TRAIT);
 	c->setVariableByQName("MIN_VALUE","",abstract_ui(0),CONSTANT_TRAIT);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
diff --git a/src/scripting/toplevel/Vector.cpp b/src/scripting/toplevel/Vector.cpp
index 97ea8d4..a154a0e 100644
--- a/src/scripting/toplevel/Vector.cpp
+++ b/src/scripting/toplevel/Vector.cpp
@@ -28,8 +28,7 @@ using namespace lightspark;
 
 void Vector::sinit(Class_base* c)
 {
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
-	c->setSuper(Class<ASObject>::getRef());
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_FINAL);
 	c->setDeclaredMethodByQName("length","",Class<IFunction>::getFunction(getLength),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("length","",Class<IFunction>::getFunction(setLength),SETTER_METHOD,true);
 	c->setDeclaredMethodByQName("toString","",Class<IFunction>::getFunction(_toString),NORMAL_METHOD,true);
diff --git a/src/scripting/toplevel/XML.cpp b/src/scripting/toplevel/XML.cpp
index 63acd6c..bc90f2c 100644
--- a/src/scripting/toplevel/XML.cpp
+++ b/src/scripting/toplevel/XML.cpp
@@ -61,8 +61,7 @@ void XML::finalize()
 
 void XML::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->prototype->setVariableByQName("toString","",Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
 	c->setDeclaredMethodByQName("toString",AS3,Class<IFunction>::getFunction(_toString),NORMAL_METHOD,true);
 	c->prototype->setVariableByQName("valueOf","",Class<IFunction>::getFunction(valueOf),DYNAMIC_TRAIT);
diff --git a/src/scripting/toplevel/XMLList.cpp b/src/scripting/toplevel/XMLList.cpp
index 6c2ab02..14dee08 100644
--- a/src/scripting/toplevel/XMLList.cpp
+++ b/src/scripting/toplevel/XMLList.cpp
@@ -78,8 +78,7 @@ void XMLList::finalize()
 
 void XMLList::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("length","",Class<IFunction>::getFunction(_getLength),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("attribute",AS3,Class<IFunction>::getFunction(attribute),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("attributes",AS3,Class<IFunction>::getFunction(attributes),NORMAL_METHOD,true);
diff --git a/src/scripting/toplevel/toplevel.cpp b/src/scripting/toplevel/toplevel.cpp
index a8f23e6..64fa8fd 100644
--- a/src/scripting/toplevel/toplevel.cpp
+++ b/src/scripting/toplevel/toplevel.cpp
@@ -1317,8 +1317,7 @@ void ASQName::setByNode(xmlpp::Node* node)
 
 void ASQName::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("uri","",Class<IFunction>::getFunction(_getURI),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("localName","",Class<IFunction>::getFunction(_getLocalName),GETTER_METHOD,true);
 	c->prototype->setVariableByQName("toString",AS3,Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
@@ -1540,8 +1539,7 @@ Namespace::Namespace(Class_base* c, const tiny_string& _uri, const tiny_string&
 
 void Namespace::sinit(Class_base* c)
 {
-	c->setSuper(Class<ASObject>::getRef());
-	c->setConstructor(Class<IFunction>::getFunction(_constructor));
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
 	c->setDeclaredMethodByQName("uri","",Class<IFunction>::getFunction(_setURI),SETTER_METHOD,true);
 	c->setDeclaredMethodByQName("uri","",Class<IFunction>::getFunction(_getURI),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("prefix","",Class<IFunction>::getFunction(_setPrefix),SETTER_METHOD,true);
-- 
1.8.5.3

