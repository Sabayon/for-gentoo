From aa1bbc9f03f5562500b4a50098605f67645d63dd Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sat, 9 Nov 2013 19:12:10 +0200
Subject: [PATCH 105/110] Don't overwrite local files when used as cache

---
 src/backends/streamcache.cpp | 11 ++++++++---
 src/backends/streamcache.h   |  2 +-
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/src/backends/streamcache.cpp b/src/backends/streamcache.cpp
index a6ed091..6db1b58 100644
--- a/src/backends/streamcache.cpp
+++ b/src/backends/streamcache.cpp
@@ -396,7 +396,7 @@ void FileStreamCache::openCache()
  * \throw RunTimeException File could not be opened
  * \throw RunTimeException Called when the cache is already open
  */
-void FileStreamCache::openExistingCache(const tiny_string& filename)
+void FileStreamCache::openExistingCache(const tiny_string& filename, bool forWriting)
 {
 	if (cache.is_open())
 	{
@@ -407,7 +407,12 @@ void FileStreamCache::openExistingCache(const tiny_string& filename)
 	cacheFilename = filename;
 
 	//Open the cache file
-	cache.open(cacheFilename.raw_buf(), std::fstream::binary | std::fstream::out);
+	ios_base::openmode mode;
+	if (forWriting)
+		mode = std::fstream::binary | std::fstream::out;
+	else
+		mode = std::fstream::binary | std::fstream::in;
+	cache.open(cacheFilename.raw_buf(), mode);
 	if (!cache.is_open())
 	{
 		markFinished(true);
@@ -423,7 +428,7 @@ void FileStreamCache::useExistingFile(const tiny_string& filename)
 	keepCache = true;
 
 	cacheFilename = filename;
-	openExistingCache(filename);
+	openExistingCache(filename, false);
 
 	cache.seekg(0, std::ios::end);
 	receivedLength = cache.tellg();
diff --git a/src/backends/streamcache.h b/src/backends/streamcache.h
index 7b03bb0..82a14fd 100644
--- a/src/backends/streamcache.h
+++ b/src/backends/streamcache.h
@@ -175,7 +175,7 @@ private:
 	bool keepCache:1;
 
 	void openCache() DLL_LOCAL;
-	void openExistingCache(const tiny_string& filename) DLL_LOCAL;
+	void openExistingCache(const tiny_string& filename, bool forWriting=true) DLL_LOCAL;
 
 	// Block until the cache file is opened by the writer stream
 	void waitForCache() DLL_LOCAL;
-- 
1.8.5.3

