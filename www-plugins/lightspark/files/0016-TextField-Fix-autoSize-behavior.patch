From 0b775d5b3b1e1fb064268d14dbc43fb4ab6bc569 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sun, 28 Apr 2013 10:44:41 +0300
Subject: [PATCH 016/110] [TextField] Fix autoSize behavior

---
 src/scripting/flash/text/flashtext.cpp | 66 ++++++++++++++++++++++++++--------
 src/scripting/flash/text/flashtext.h   |  1 +
 2 files changed, 52 insertions(+), 15 deletions(-)

diff --git a/src/scripting/flash/text/flashtext.cpp b/src/scripting/flash/text/flashtext.cpp
index 88013ac..47af5ff 100644
--- a/src/scripting/flash/text/flashtext.cpp
+++ b/src/scripting/flash/text/flashtext.cpp
@@ -216,8 +216,8 @@ ASFUNCTIONBODY(TextField,_getWordWrap)
 ASFUNCTIONBODY(TextField,_setWordWrap)
 {
 	TextField* th=Class<TextField>::cast(obj);
-	assert_and_throw(argslen==1);
-	th->wordWrap=Boolean_concrete(args[0]);
+	ARG_UNPACK(th->wordWrap);
+	th->setSizeAndPositionFromAutoSize();
 	if(th->onStage)
 		th->requestInvalidation(getSys());
 	return NULL;
@@ -243,23 +243,59 @@ ASFUNCTIONBODY(TextField,_getAutoSize)
 ASFUNCTIONBODY(TextField,_setAutoSize)
 {
 	TextField* th=Class<TextField>::cast(obj);
-	assert_and_throw(argslen==1);
-	tiny_string temp = args[0]->toString();
-	if(temp == "none")
-		th->autoSize = AS_NONE;//TODO: take care of corner cases : what to do with sizes when changing the autoSize
-	else if (temp == "left")
-		th->autoSize = AS_LEFT;
-	else if (temp == "right")
-		th->autoSize = AS_RIGHT;
-	else if (temp == "center")
-		th->autoSize = AS_CENTER;
+	tiny_string autoSizeString;
+	ARG_UNPACK(autoSizeString);
+
+	AUTO_SIZE newAutoSize = AS_NONE;
+	if(autoSizeString == "none")
+		newAutoSize = AS_NONE;
+	else if (autoSizeString == "left")
+		newAutoSize = AS_LEFT;
+	else if (autoSizeString == "right")
+		newAutoSize = AS_RIGHT;
+	else if (autoSizeString == "center")
+		newAutoSize = AS_CENTER;
 	else
-		throw Class<ArgumentError>::getInstanceS("Wrong argument in TextField.autoSize");
-	if(th->onStage)
-		th->requestInvalidation(getSys());//TODO:check if there was any change
+		throwError<ArgumentError>(kInvalidEnumError, "autoSize");
+
+	if (th->autoSize != newAutoSize)
+	{
+		th->autoSize = newAutoSize;
+		th->setSizeAndPositionFromAutoSize();
+		if(th->onStage)
+			th->requestInvalidation(getSys());
+	}
+
 	return NULL;
 }
 
+void TextField::setSizeAndPositionFromAutoSize()
+{
+	if (autoSize == AS_NONE)
+		return;
+
+	height = textHeight;
+	if (!wordWrap && width < textWidth)
+	{
+		if (autoSize == AS_RIGHT)
+		{
+			number_t oldX = getXY().x;
+			setX(oldX+width-textWidth);
+			width = textWidth;
+		}
+		else if (autoSize == AS_CENTER)
+		{
+			number_t oldX = getXY().x;
+			setX(oldX + width/2 - textWidth/2);
+			width = textWidth;
+		}
+		else // AS_LEFT, because AS_NONE was handled before
+		{
+			width = textWidth;
+		}
+	}
+}
+
 ASFUNCTIONBODY(TextField,_getWidth)
 {
 	TextField* th=Class<TextField>::cast(obj);
diff --git a/src/scripting/flash/text/flashtext.h b/src/scripting/flash/text/flashtext.h
index 14f3b83..643d188 100644
--- a/src/scripting/flash/text/flashtext.h
+++ b/src/scripting/flash/text/flashtext.h
@@ -93,6 +93,7 @@ private:
 	int32_t getMaxScrollH();
 	int32_t getMaxScrollV();
 	void textUpdated();
+	void setSizeAndPositionFromAutoSize();
 	EDIT_TYPE type;
 	ANTI_ALIAS_TYPE antiAliasType;
 	GRID_FIT_TYPE gridFitType;
-- 
1.8.5.3

