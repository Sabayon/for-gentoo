From b46be4d0176765989fc4c18c22ccf2b10110e185 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sun, 26 May 2013 21:22:26 +0300
Subject: [PATCH 053/110] [ASString] Improve toNumber

Whitespace characters from the ECMA specs, UTF-8, parse -Infinity
correctly.
---
 src/scripting/toplevel/ASString.cpp | 85 +++++++++++++++++++++++++++++--------
 src/scripting/toplevel/ASString.h   |  3 ++
 src/scripting/toplevel/Integer.cpp  |  2 +-
 3 files changed, 71 insertions(+), 19 deletions(-)

diff --git a/src/scripting/toplevel/ASString.cpp b/src/scripting/toplevel/ASString.cpp
index 6c0ad1f..1d9725a 100644
--- a/src/scripting/toplevel/ASString.cpp
+++ b/src/scripting/toplevel/ASString.cpp
@@ -454,35 +454,70 @@ double ASString::toNumber() const
 {
 	assert_and_throw(implEnable);
 
-	/* TODO: data holds a utf8-character sequence, not ascii! */
-	const char *s=data.raw_buf();
-	char *end=NULL;
-	while(g_ascii_isspace(*s))
-		s++;
-	double val=g_ascii_strtod(s, &end);
-
-	// strtod converts case-insensitive "inf" and "infinity" to
-	// inf, flash only accepts case-sensitive "Infinity".
-	if(std::isinf(val)) {
-		const char *tmp=s;
-		while(g_ascii_isspace(*tmp))
-			tmp++;
-		if(*tmp=='+' || *tmp=='-')
-			tmp++;
-		if(strncasecmp(tmp, "inf", 3)==0 && strcmp(tmp, "Infinity")!=0)
+	const char *s = data.raw_buf();
+	while (*s && isEcmaSpace(g_utf8_get_char(s)))
+		s = g_utf8_next_char(s);
+
+	double val;
+	char *end = NULL;
+	val = parseStringInfinite(s, &end);
+
+	// If did not parse as infinite, try decimal
+	if (!std::isinf(val))
+	{
+		errno = 0;
+		val = g_ascii_strtod(s, &end);
+
+		if (errno == ERANGE)
+		{
+			if (val == HUGE_VAL)
+				val = numeric_limits<double>::infinity();
+			else if (val == -HUGE_VAL)
+				val = -numeric_limits<double>::infinity();
+		}
+		else if (std::isinf(val))
+		{
+			// strtod accepts values such as "inf" and lowercase
+			// "infinity" which are not valid values in Flash
 			return numeric_limits<double>::quiet_NaN();
+		}
 	}
 
 	// Fail if there is any rubbish after the converted number
 	while(*end) {
-		if(!g_ascii_isspace(*end))
+		if(!isEcmaSpace(g_utf8_get_char(end)))
 			return numeric_limits<double>::quiet_NaN();
-		end++;
+		end = g_utf8_next_char(end);
 	}
 
 	return val;
 }
 
+number_t ASString::parseStringInfinite(const char *s, char **end) const
+{
+	if (end)
+		*end = const_cast<char *>(s);
+	double sign = 1.;
+	if (*s == '+')
+	{
+		sign = +1.;
+		s++;
+	}
+	else if (*s == '-')
+	{
+		sign = -1.;
+		s++;
+	}
+	if (strncmp(s, "Infinity", 8) == 0)
+	{
+		if (end)
+			*end = const_cast<char *>(s+8);
+		return sign*numeric_limits<double>::infinity();
+	}
+
+	return 0.; // not an infinite value
+}
+
 int32_t ASString::toInt()
 {
 	assert_and_throw(implEnable);
@@ -817,3 +852,17 @@ ASFUNCTIONBODY(ASString,generator)
 	else
 		return Class<ASString>::getInstanceS(args[0]->toString());
 }
+
+bool ASString::isEcmaSpace(uint32_t c)
+{
+	return (c == 0x09) || (c == 0x0B) || (c == 0x0C) || (c == 0x20) ||
+		(c == 0xA0) || (c == 0x1680) || (c == 0x180E) ||
+		((c >= 0x2000) && (c <= 0x200B)) || (c == 0x202F) ||
+		(c == 0x205F) || (c == 0x3000) || (c == 0xFEFF) || 
+		isEcmaLineTerminator(c);
+}
+
+bool ASString::isEcmaLineTerminator(uint32_t c)
+{
+	return (c == 0x0A) || (c == 0x0D) || (c == 0x2028) || (c == 0x2029);
+}
diff --git a/src/scripting/toplevel/ASString.h b/src/scripting/toplevel/ASString.h
index 4733829..09a36f8 100644
--- a/src/scripting/toplevel/ASString.h
+++ b/src/scripting/toplevel/ASString.h
@@ -34,6 +34,7 @@ class ASString: public ASObject
 {
 private:
 	tiny_string toString_priv() const;
+	number_t parseStringInfinite(const char *s, char **end) const;
 public:
 	ASString(Class_base* c);
 	ASString(Class_base* c, const std::string& s);
@@ -73,6 +74,8 @@ public:
 				std::map<const ASObject*, uint32_t>& objMap,
 				std::map<const Class_base*, uint32_t>& traitsMap);
 	std::string toDebugString() { return std::string("\"") + std::string(data) + "\""; }
+	static bool isEcmaSpace(uint32_t c);
+	static bool isEcmaLineTerminator(uint32_t c);
 };
 
 template<>
diff --git a/src/scripting/toplevel/Integer.cpp b/src/scripting/toplevel/Integer.cpp
index 52babf9..0ec4626 100644
--- a/src/scripting/toplevel/Integer.cpp
+++ b/src/scripting/toplevel/Integer.cpp
@@ -218,7 +218,7 @@ void Integer::serialize(ByteArray* out, std::map<tiny_string, uint32_t>& stringM
 bool Integer::fromStringFlashCompatible(const char* cur, int64_t& ret, int radix)
 {
 	//Skip whitespace chars
-	while(g_unichar_isspace(g_utf8_get_char(cur)))
+	while(ASString::isEcmaSpace(g_utf8_get_char(cur)))
 		cur = g_utf8_next_char(cur);
 
 	int64_t multiplier=1;
-- 
1.8.5.3

