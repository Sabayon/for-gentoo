From 73a7f0d3fbc26753d31274af548ab5fc38dd6ebe Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sat, 23 Mar 2013 20:47:06 +0200
Subject: [PATCH 002/110] Support embedded sounds (StartSoundTag)

Also, it is now possible to play Sound several times without
re-downloading.

Embedded streaming sounds (SoundStreamHead/Block) are not supported.
---
 ChangeLog                                |   4 ++
 src/backends/decoder.cpp                 | 119 ++++++++++++++++++++++++++-----
 src/backends/decoder.h                   |   7 +-
 src/parsing/tags.cpp                     |  93 ++++++++++++++++++++++--
 src/parsing/tags.h                       |  29 +++++++-
 src/parsing/tags_stub.cpp                |   6 --
 src/scripting/flash/media/flashmedia.cpp |  87 +++++++++++++++++-----
 src/scripting/flash/media/flashmedia.h   |  23 +++++-
 src/swf.cpp                              |  21 +++---
 src/swftypes.cpp                         |  23 ++++++
 src/swftypes.h                           |  17 ++++-
 11 files changed, 365 insertions(+), 64 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 3920617..787bb6a 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,9 @@
 lightspark: An open source flash player implementation
 
+Version NEXT:
+
+	* Support embedded audio
+
 Version 0.7.2:
 
 	* Improved image support: alpha in palettes, abbreviated JPEGs
diff --git a/src/backends/decoder.cpp b/src/backends/decoder.cpp
index 18e72e0..22eac2e 100755
--- a/src/backends/decoder.cpp
+++ b/src/backends/decoder.cpp
@@ -451,19 +451,7 @@ void AudioDecoder::skipAll()
 #ifdef ENABLE_LIBAVCODEC
 FFMpegAudioDecoder::FFMpegAudioDecoder(LS_AUDIO_CODEC audioCodec, uint8_t* initdata, uint32_t datalen):ownedContext(true)
 {
-	CodecID codecId;
-	switch(audioCodec)
-	{
-		case AAC:
-			codecId=CODEC_ID_AAC;
-			break;
-		case MP3:
-			codecId=CODEC_ID_MP3;
-			break;
-		default:
-			::abort();
-	}
-	AVCodec* codec=avcodec_find_decoder(codecId);
+	AVCodec* codec=avcodec_find_decoder(LSToFFMpegCodec(audioCodec));
 	assert(codec);
 
 	codecContext=avcodec_alloc_context3(codec);
@@ -490,7 +478,33 @@ FFMpegAudioDecoder::FFMpegAudioDecoder(LS_AUDIO_CODEC audioCodec, uint8_t* initd
 #endif
 }
 
-FFMpegAudioDecoder::FFMpegAudioDecoder(AVCodecContext* _c):codecContext(_c)
+FFMpegAudioDecoder::FFMpegAudioDecoder(LS_AUDIO_CODEC lscodec, int sampleRate, int channels, bool):ownedContext(true)
+{
+	status=INIT;
+
+	CodecID codecId = LSToFFMpegCodec(lscodec);
+	AVCodec* codec=avcodec_find_decoder(codecId);
+	assert(codec);
+	codecContext=avcodec_alloc_context3(codec);
+	codecContext->codec_id = codecId;
+	codecContext->sample_rate = sampleRate;
+	codecContext->channels = channels;
+
+#ifdef HAVE_AVCODEC_OPEN2
+	if(avcodec_open2(codecContext, codec, NULL)<0)
+#else
+	if(avcodec_open(codecContext, codec)<0)
+#endif //HAVE_AVCODEC_ALLOC_CONTEXT3
+		return;
+
+	if(fillDataAndCheckValidity())
+		status=VALID;
+#if HAVE_AVCODEC_DECODE_AUDIO4
+	frameIn=avcodec_alloc_frame();
+#endif
+}
+
+FFMpegAudioDecoder::FFMpegAudioDecoder(AVCodecContext* _c):ownedContext(false),codecContext(_c)
 {
 	status=INIT;
 	AVCodec* codec=avcodec_find_decoder(codecContext->codec_id);
@@ -520,6 +534,21 @@ FFMpegAudioDecoder::~FFMpegAudioDecoder()
 #endif
 }
 
+CodecID FFMpegAudioDecoder::LSToFFMpegCodec(LS_AUDIO_CODEC LSCodec)
+{
+	switch(LSCodec)
+	{
+		case AAC:
+			return CODEC_ID_AAC;
+		case MP3:
+			return CODEC_ID_MP3;
+		case ADPCM:
+			return CODEC_ID_ADPCM_SWF;
+		default:
+			return CODEC_ID_NONE;
+	}
+}
+
 bool FFMpegAudioDecoder::fillDataAndCheckValidity()
 {
 	if(codecContext->sample_rate!=0)
@@ -556,8 +585,25 @@ uint32_t FFMpegAudioDecoder::decodeData(uint8_t* data, int32_t datalen, uint32_t
 #if HAVE_AVCODEC_DECODE_AUDIO3 || HAVE_AVCODEC_DECODE_AUDIO4
 	AVPacket pkt;
 	av_init_packet(&pkt);
-	pkt.data=data;
-	pkt.size=datalen;
+
+	// If some data was left unprocessed on previous call,
+	// concatenate.
+	std::vector<uint8_t> combinedBuffer;
+	if (overflowBuffer.empty())
+	{
+		pkt.data=data;
+		pkt.size=datalen;
+	}
+	else
+	{
+		combinedBuffer.assign(overflowBuffer.begin(), overflowBuffer.end());
+		if (datalen > 0)
+			combinedBuffer.insert(combinedBuffer.end(), data, data+datalen);
+		pkt.data = &combinedBuffer[0];
+		pkt.size = combinedBuffer.size();
+		overflowBuffer.clear();
+	}
+
 #if HAVE_AVCODEC_DECODE_AUDIO4
 	avcodec_get_frame_defaults(frameIn);
 	int frameOk=0;
@@ -577,10 +623,16 @@ uint32_t FFMpegAudioDecoder::decodeData(uint8_t* data, int32_t datalen, uint32_t
 #else
 	int32_t ret=avcodec_decode_audio2(codecContext, curTail.samples, &maxLen, data, datalen);
 #endif
-	assert_and_throw(ret==datalen);
+	if (ret > 0)
+	{
+		pkt.data += ret;
+		pkt.size -= ret;
 
-	if(status==INIT && fillDataAndCheckValidity())
-		status=VALID;
+		if (pkt.size > 0)
+		{
+			overflowBuffer.assign(pkt.data, pkt.data+pkt.size);
+		}
+	}
 
 	curTail.len=maxLen;
 	assert(!(curTail.len&0x80000000));
@@ -588,6 +640,10 @@ uint32_t FFMpegAudioDecoder::decodeData(uint8_t* data, int32_t datalen, uint32_t
 	curTail.current=curTail.samples;
 	curTail.time=time;
 	samplesBuffer.commitLast();
+
+	if(status==INIT && fillDataAndCheckValidity())
+		status=VALID;
+
 	return maxLen;
 }
 
@@ -639,6 +695,31 @@ uint32_t FFMpegAudioDecoder::decodePacket(AVPacket* pkt, uint32_t time)
 	samplesBuffer.commitLast();
 	return maxLen;
 }
+
+uint32_t FFMpegAudioDecoder::decodeStreamSomePackets(std::istream& s, uint32_t time)
+{
+	const size_t BUF_SIZE = 4096;
+	uint32_t ret;
+	uint8_t inbuf[BUF_SIZE + FF_INPUT_BUFFER_PADDING_SIZE];
+	s.read((char*)inbuf, BUF_SIZE);
+	if (s.gcount() == 0)
+		return 0;
+
+	ret = decodeData(inbuf, s.gcount(), time);
+
+	// Keep the overflowBuffer from growing without bounds
+	size_t overflowSize = overflowBuffer.size();
+	while (overflowSize > BUF_SIZE)
+	{
+		ret = decodeData(NULL, 0, time);
+		if (overflowBuffer.size() == overflowSize)
+			break;
+		overflowSize = overflowBuffer.size();
+	}
+
+	return ret;
+}
+
 #endif //ENABLE_LIBAVCODEC
 
 StreamDecoder::~StreamDecoder()
diff --git a/src/backends/decoder.h b/src/backends/decoder.h
index cddf058..93950ad 100644
--- a/src/backends/decoder.h
+++ b/src/backends/decoder.h
@@ -40,7 +40,8 @@ namespace lightspark
 {
 
 enum LS_VIDEO_CODEC { H264=0, H263, VP6 };
-enum LS_AUDIO_CODEC { LINEAR_PCM_PLATFORM_ENDIAN=0, ADPCM=1, MP3=2, LINEAR_PCM_LE=3, AAC=10 };
+// "Audio coding formats" from Chapter 11 in SWF documentation
+enum LS_AUDIO_CODEC { CODEC_NONE=-1, LINEAR_PCM_PLATFORM_ENDIAN=0, ADPCM=1, MP3=2, LINEAR_PCM_LE=3, AAC=10 };
 
 class Decoder
 {
@@ -277,12 +278,15 @@ class FFMpegAudioDecoder: public AudioDecoder
 private:
 	bool ownedContext;
 	AVCodecContext* codecContext;
+	std::vector<uint8_t> overflowBuffer;
 	bool fillDataAndCheckValidity();
+	CodecID LSToFFMpegCodec(LS_AUDIO_CODEC lscodec);
 #if HAVE_AVCODEC_DECODE_AUDIO4
 	AVFrame* frameIn;
 #endif
 public:
 	FFMpegAudioDecoder(LS_AUDIO_CODEC codec, uint8_t* initdata, uint32_t datalen);
+	FFMpegAudioDecoder(LS_AUDIO_CODEC codec, int sampleRate, int channels, bool);
 	/*
 	   Specialized constructor used by FFMpegStreamDecoder
 	*/
@@ -293,6 +297,7 @@ public:
 	*/
 	uint32_t decodePacket(AVPacket* pkt, uint32_t time);
 	uint32_t decodeData(uint8_t* data, int32_t datalen, uint32_t time);
+	uint32_t decodeStreamSomePackets(std::istream& s, uint32_t time);
 };
 #endif
 
diff --git a/src/parsing/tags.cpp b/src/parsing/tags.cpp
index 665147d..ab696d4 100644
--- a/src/parsing/tags.cpp
+++ b/src/parsing/tags.cpp
@@ -24,10 +24,12 @@
 #include <list>
 #include <algorithm>
 #include <sstream>
+#include <alloca.h>
 #include "scripting/abc.h"
 #include "parsing/tags.h"
 #include "backends/geometry.h"
 #include "backends/security.h"
+#include "backends/streamcache.h"
 #include "swftypes.h"
 #include "logger.h"
 #include "compat.h"
@@ -35,6 +37,7 @@
 #include "scripting/flash/display/BitmapData.h"
 #include "scripting/flash/text/flashtext.h"
 #include "scripting/flash/media/flashmedia.h"
+#include "backends/audio.h"
 
 #undef RGB
 
@@ -383,6 +386,7 @@ DefineSpriteTag::DefineSpriteTag(RECORDHEADER h, std::istream& in, RootMovieClip
 			case SYMBOL_CLASS_TAG:
 			case ABC_TAG:
 			case CONTROL_TAG:
+			case ACTION_TAG:
 				delete tag;
 				throw ParseException("Control tag inside a sprite. Should not happen.");
 			case FRAMELABEL_TAG:
@@ -1532,7 +1536,7 @@ FileAttributesTag::FileAttributesTag(RECORDHEADER h, std::istream& in):Tag(h)
 	UB(24,bs);
 }
 
-DefineSoundTag::DefineSoundTag(RECORDHEADER h, std::istream& in,RootMovieClip* root):DictionaryTag(h,root)
+DefineSoundTag::DefineSoundTag(RECORDHEADER h, std::istream& in,RootMovieClip* root):DictionaryTag(h,root),SoundData(new MemoryStreamCache)
 {
 	LOG(LOG_TRACE,_("DefineSound Tag"));
 	in >> SoundId;
@@ -1542,8 +1546,13 @@ DefineSoundTag::DefineSoundTag(RECORDHEADER h, std::istream& in,RootMovieClip* r
 	SoundSize=UB(1,bs);
 	SoundType=UB(1,bs);
 	in >> SoundSampleCount;
-	//TODO: read and parse actual sound data
-	ignore(in,h.getLength()-7);
+
+	//TODO: get rid of the temporary copy
+	unsigned int soundDataLength = h.getLength()-7;
+	unsigned char *tmp = (unsigned char *)alloca(soundDataLength);
+	in.read((char *)tmp, soundDataLength);
+	SoundData->append(tmp, in.gcount());
+	SoundData->markFinished();
 }
 
 ASObject* DefineSoundTag::instance(Class_base* c) const
@@ -1556,8 +1565,82 @@ ASObject* DefineSoundTag::instance(Class_base* c) const
 	else
 		retClass=Class<Sound>::getClass();
 
-	//TODO: use the tag sound data
-	return new (retClass->memoryAccount) Sound(retClass);
+	return new (retClass->memoryAccount) Sound(retClass, SoundData,
+		AudioFormat(getAudioCodec(), getSampleRate(), getChannels()));
+}
+
+LS_AUDIO_CODEC DefineSoundTag::getAudioCodec() const
+{
+	return (LS_AUDIO_CODEC)SoundFormat;
+}
+
+int DefineSoundTag::getSampleRate() const
+{
+	switch(SoundRate)
+	{
+		case 0:
+			return 5500;
+		case 1:
+			return 11000;
+		case 2:
+			return 22000;
+		case 3:
+			return 44000;
+	}
+
+	// not reached
+	assert(false && "invalid sample rate");
+	return 0;
+}
+
+int DefineSoundTag::getChannels() const
+{
+	return (int)SoundType + 1;
+}
+
+_R<MemoryStreamCache> DefineSoundTag::getSoundData() const
+{
+	return SoundData;
+}
+
+std::streambuf *DefineSoundTag::createSoundStream() const
+{
+	return SoundData->createReader();
+}
+
+StartSoundTag::StartSoundTag(RECORDHEADER h, std::istream& in):ActionTag(h)
+{
+	LOG(LOG_TRACE,_("StartSound Tag"));
+	in >> SoundId >> SoundInfo;
+}
+
+void StartSoundTag::execute(RootMovieClip* root) const
+{
+	DefineSoundTag *soundTag = \
+		dynamic_cast<DefineSoundTag *>(root->dictionaryLookup(SoundId));
+
+	if (SoundInfo.SyncStop || SoundInfo.HasEnvelope || SoundInfo.HasLoops ||
+	    SoundInfo.HasOutPoint || SoundInfo.HasInPoint)
+	{
+		LOG(LOG_NOT_IMPLEMENTED, "StartSoundTag: some modifiers not supported");
+		if (SoundInfo.SyncStop)
+			return;
+	}
+
+	play(soundTag);
+}
+
+void StartSoundTag::play(const DefineSoundTag *soundTag) const
+{
+	SoundChannel *schannel = Class<SoundChannel>::getInstanceS(
+		soundTag->getSoundData(),
+		AudioFormat(soundTag->getAudioCodec(),
+			    soundTag->getSampleRate(),
+			    soundTag->getChannels()));
+
+	// SoundChannel thread keeps one reference, which will be
+	// removed thread is finished
+	schannel->decRef();
 }
 
 ScriptLimitsTag::ScriptLimitsTag(RECORDHEADER h, std::istream& in):ControlTag(h)
diff --git a/src/parsing/tags.h b/src/parsing/tags.h
index 3af0f4d..40d7bb7 100644
--- a/src/parsing/tags.h
+++ b/src/parsing/tags.h
@@ -31,7 +31,7 @@
 namespace lightspark
 {
 
-enum TAGTYPE {TAG=0,DISPLAY_LIST_TAG,SHOW_TAG,CONTROL_TAG,DICT_TAG,FRAMELABEL_TAG,SYMBOL_CLASS_TAG,ABC_TAG,END_TAG};
+enum TAGTYPE {TAG=0,DISPLAY_LIST_TAG,SHOW_TAG,CONTROL_TAG,DICT_TAG,FRAMELABEL_TAG,SYMBOL_CLASS_TAG,ACTION_TAG,ABC_TAG,END_TAG};
 
 void ignore(std::istream& i, int count);
 
@@ -94,6 +94,17 @@ public:
 	virtual void execute(RootMovieClip* root) const=0;
 };
 
+/*
+ * Initiates an action. Action is executed after a frame is parsed.
+ */
+class ActionTag: public ControlTag
+{
+public:
+	ActionTag(RECORDHEADER h):ControlTag(h){}
+	virtual TAGTYPE getType()const{ return ACTION_TAG; }
+	virtual void execute(RootMovieClip* root) const=0;
+};
+
 class DefineShapeTag: public DictionaryTag
 {
 protected:
@@ -212,6 +223,8 @@ public:
 	ASObject* instance(Class_base* c=NULL) const;
 };
 
+class MemoryStreamCache;
+
 class DefineSoundTag: public DictionaryTag
 {
 private:
@@ -221,16 +234,28 @@ private:
 	char SoundSize;
 	char SoundType;
 	UI32_SWF SoundSampleCount;
+	_R<MemoryStreamCache> SoundData;
 public:
 	DefineSoundTag(RECORDHEADER h, std::istream& s, RootMovieClip* root);
 	virtual int getId() const { return SoundId; }
 	ASObject* instance(Class_base* c=NULL) const;
+	LS_AUDIO_CODEC getAudioCodec() const;
+	int getSampleRate() const;
+	int getChannels() const;
+	_R<MemoryStreamCache> getSoundData() const;
+	std::streambuf *createSoundStream() const;
 };
 
-class StartSoundTag: public Tag
+class StartSoundTag: public ActionTag
 {
+private:
+	UI16_SWF SoundId;
+	SOUNDINFO SoundInfo;
+
+	void play(const DefineSoundTag *soundTag) const;
 public:
 	StartSoundTag(RECORDHEADER h, std::istream& s);
+	virtual void execute(RootMovieClip* root) const;
 };
 
 class SoundStreamHeadTag: public Tag
diff --git a/src/parsing/tags_stub.cpp b/src/parsing/tags_stub.cpp
index e1b0365..80162fd 100644
--- a/src/parsing/tags_stub.cpp
+++ b/src/parsing/tags_stub.cpp
@@ -39,12 +39,6 @@ DefineFontInfoTag::DefineFontInfoTag(RECORDHEADER h, std::istream& in):Tag(h)
 	skip(in);
 }
 
-StartSoundTag::StartSoundTag(RECORDHEADER h, std::istream& in):Tag(h)
-{
-	LOG(LOG_NOT_IMPLEMENTED,_("StartSound Tag"));
-	skip(in);
-}
-
 SoundStreamHeadTag::SoundStreamHeadTag(RECORDHEADER h, std::istream& in):Tag(h)
 {
 	LOG(LOG_NOT_IMPLEMENTED,_("SoundStreamHead Tag"));
diff --git a/src/scripting/flash/media/flashmedia.cpp b/src/scripting/flash/media/flashmedia.cpp
index 38c61e5..ce6bbc3 100644
--- a/src/scripting/flash/media/flashmedia.cpp
+++ b/src/scripting/flash/media/flashmedia.cpp
@@ -24,6 +24,7 @@
 #include <iostream>
 #include "backends/audio.h"
 #include "backends/rendering.h"
+#include "backends/streamcache.h"
 #include "scripting/argconv.h"
 
 using namespace lightspark;
@@ -215,7 +216,16 @@ _NR<DisplayObject> Video::hitTestImpl(_NR<DisplayObject> last, number_t x, numbe
 }
 
 Sound::Sound(Class_base* c)
- :EventDispatcher(c),downloader(NULL),soundChannelCreated(false),bytesLoaded(0),bytesTotal(0),length(60*1000)
+	:EventDispatcher(c),downloader(NULL),soundData(new MemoryStreamCache),
+	 container(true),format(CODEC_NONE, 0, 0),bytesLoaded(0),bytesTotal(0),length(60*1000)
+{
+}
+
+Sound::Sound(Class_base* c, _R<StreamCache> data, AudioFormat _format)
+	:EventDispatcher(c),downloader(NULL),soundData(data),
+	 container(false),format(_format),
+	 bytesLoaded(soundData->getReceivedLength()),
+	 bytesTotal(soundData->getReceivedLength()),length(60*1000)
 {
 }
 
@@ -261,6 +271,9 @@ ASFUNCTIONBODY(Sound,load)
 	th->url = urlRequest->getRequestURL();
 	urlRequest->getPostData(th->postData);
 
+	_R<StreamCache> c(_MR(new MemoryStreamCache()));
+	th->soundData = c;
+
 	if(!th->url.isValid())
 	{
 		//Notify an error during loading
@@ -275,13 +288,13 @@ ASFUNCTIONBODY(Sound,load)
 	{
 		//This is a GET request
 		//Use disk cache our downloaded files
-		th->downloader=getSys()->downloadManager->download(th->url, _MR(new FileStreamCache), th);
+		th->downloader=getSys()->downloadManager->download(th->url, th->soundData, th);
 	}
 	else
 	{
 		list<tiny_string> headers=urlRequest->getHeaders();
 		th->downloader=getSys()->downloadManager->downloadWithData(th->url,
-				_MR(new MemoryStreamCache), th->postData, headers, th);
+				th->soundData, th->postData, headers, th);
 		//Clean up the postData for the next load
 		th->postData.clear();
 	}
@@ -302,19 +315,11 @@ ASFUNCTIONBODY(Sound,play)
 	if(startTime!=0)
 		LOG(LOG_NOT_IMPLEMENTED,"startTime not supported in Sound::play");
 
-	if (!th->soundChannelCreated)
-	{
-		th->soundChannelCreated = true;
-		th->incRef();
-		return Class<SoundChannel>::getInstanceS(th->downloader->getCache());
-	}
+	th->incRef();
+	if (th->container)
+		return Class<SoundChannel>::getInstanceS(th->soundData);
 	else
-	{
-		LOG(LOG_NOT_IMPLEMENTED,"Sound::play called more than once");
-		// should return a new independent SoundChannel for
-		// the same downloaded data
-		return getSys()->getUndefinedRef();
-	}
+		return Class<SoundChannel>::getInstanceS(th->soundData, th->format);
 }
 
 ASFUNCTIONBODY(Sound,close)
@@ -374,8 +379,9 @@ ASFUNCTIONBODY(SoundLoaderContext,_constructor)
 ASFUNCTIONBODY_GETTER_SETTER(SoundLoaderContext,bufferTime);
 ASFUNCTIONBODY_GETTER_SETTER(SoundLoaderContext,checkPolicyFile);
 
-SoundChannel::SoundChannel(Class_base* c, _NR<StreamCache> _stream)
-  : EventDispatcher(c),stream(_stream),stopped(false),audioDecoder(NULL),audioStream(NULL),position(0)
+SoundChannel::SoundChannel(Class_base* c, _NR<StreamCache> _stream, AudioFormat _format)
+: EventDispatcher(c),stream(_stream),stopped(false),audioDecoder(NULL),audioStream(NULL),
+  format(_format),position(0)
 {
 	if (!stream.isNull())
 	{
@@ -421,8 +427,15 @@ ASFUNCTIONBODY(SoundChannel, stop)
 
 void SoundChannel::execute()
 {
-	assert(!stream.isNull());
+	if (format.codec == CODEC_NONE)
+		playStream();
+	else
+		playRaw();
+}
 
+void SoundChannel::playStream()
+{
+	assert(!stream.isNull());
 	std::streambuf *sbuf = stream->createReader();
 	istream s(sbuf);
 	s.exceptions ( istream::eofbit | istream::failbit | istream::badbit );
@@ -499,6 +512,44 @@ void SoundChannel::execute()
 	}
 }
 
+void SoundChannel::playRaw()
+{
+	assert(!stream.isNull());
+	FFMpegAudioDecoder *decoder = new FFMpegAudioDecoder(format.codec,
+							     format.sampleRate,
+							     format.channels,
+							     true);
+	if (!decoder)
+		return;
+	if(!getSys()->audioManager->pluginLoaded())
+		return;
+
+	AudioStream *audioStream = NULL;
+	std::streambuf *sbuf = stream->createReader();
+	istream stream(sbuf);
+	do
+	{
+		decoder->decodeStreamSomePackets(stream, 0);
+		if (decoder->isValid())
+			audioStream=getSys()->audioManager->createStreamPlugin(decoder);
+	}
+	while (!ACQUIRE_READ(stopped) && !stream.eof() && !stream.fail() && !stream.bad());
+
+	decoder->setFlushing();
+	decoder->waitFlushed();
+	sleep(1);
+	
+	delete audioStream;
+	delete decoder;
+	delete sbuf;
+
+	if (!ACQUIRE_READ(stopped))
+	{
+		incRef();
+		getVm()->addEvent(_MR(this),_MR(Class<Event>::getInstanceS("soundComplete")));
+	}
+}
+
 void SoundChannel::jobFence()
 {
 	this->decRef();
diff --git a/src/scripting/flash/media/flashmedia.h b/src/scripting/flash/media/flashmedia.h
index e8a5dcd..a0f93d7 100644
--- a/src/scripting/flash/media/flashmedia.h
+++ b/src/scripting/flash/media/flashmedia.h
@@ -34,6 +34,16 @@ namespace lightspark
 
 class AudioDecoder;
 class NetStream;
+class StreamCache;
+
+class AudioFormat
+{
+public:
+	AudioFormat(LS_AUDIO_CODEC co, int sr, int ch):codec(co),sampleRate(sr),channels(ch) {}
+	LS_AUDIO_CODEC codec;
+	int sampleRate;
+	int channels;
+};
 
 class Sound: public EventDispatcher, public ILoadable
 {
@@ -41,7 +51,12 @@ private:
 	URLInfo url;
 	std::vector<uint8_t> postData;
 	Downloader* downloader;
-	bool soundChannelCreated;
+	_R<StreamCache> soundData;
+	// If container is true, audio format is parsed from
+	// soundData. If container is false, soundData is raw samples
+	// and format is defined by format member.
+	bool container;
+	AudioFormat format;
 	ASPROPERTY_GETTER(uint32_t,bytesLoaded);
 	ASPROPERTY_GETTER(uint32_t,bytesTotal);
 	ASPROPERTY_GETTER(number_t,length);
@@ -50,6 +65,7 @@ private:
 	void setBytesLoaded(uint32_t b);
 public:
 	Sound(Class_base* c);
+	Sound(Class_base* c, _R<StreamCache> soundData, AudioFormat format);
 	~Sound();
 	static void sinit(Class_base*);
 	static void buildTraits(ASObject* o);
@@ -77,9 +93,12 @@ private:
 	ACQUIRE_RELEASE_FLAG(stopped);
 	AudioDecoder* audioDecoder;
 	AudioStream* audioStream;
+	AudioFormat format;
 	ASPROPERTY_GETTER_SETTER(uint32_t,position);
+	void playStream();
+	void playRaw();
 public:
-	SoundChannel(Class_base* c, _NR<StreamCache> stream=NullRef);
+	SoundChannel(Class_base* c, _NR<StreamCache> stream=NullRef, AudioFormat format=AudioFormat(CODEC_NONE,0,0));
 	~SoundChannel();
 	static void sinit(Class_base* c);
 	static void buildTraits(ASObject* o);
diff --git a/src/swf.cpp b/src/swf.cpp
index 008fdaf..6833d9a 100644
--- a/src/swf.cpp
+++ b/src/swf.cpp
@@ -1333,7 +1333,7 @@ void ParseThread::parseSWF(UI8 ver)
 	}
 	objectSpinlock.unlock();
 
-	std::queue<const ControlTag*> symbolClassTags;
+	std::queue<const ControlTag*> queuedTags;
 	try
 	{
 		parseSWFHeader(root, ver);
@@ -1378,14 +1378,14 @@ void ParseThread::parseSWF(UI8 ver)
 			{
 				case END_TAG:
 				{
-					// The whole frame has been parsed, now execute all queued SymbolClass tags,
+					// The whole frame has been parsed, now execute all queued tags,
 					// in the order in which they appeared in the file.
-					while(!symbolClassTags.empty())
+					while(!queuedTags.empty())
 					{
-						const ControlTag* t=symbolClassTags.front();
+						const ControlTag* t=queuedTags.front();
 						t->execute(root);
 						delete t;
-						symbolClassTags.pop();
+						queuedTags.pop();
 					}
 
 					if(!empty)
@@ -1411,12 +1411,12 @@ void ParseThread::parseSWF(UI8 ver)
 				case SHOW_TAG:
 					// The whole frame has been parsed, now execute all queued SymbolClass tags,
 					// in the order in which they appeared in the file.
-					while(!symbolClassTags.empty())
+					while(!queuedTags.empty())
 					{
-						const ControlTag* t=symbolClassTags.front();
+						const ControlTag* t=queuedTags.front();
 						t->execute(root);
 						delete t;
-						symbolClassTags.pop();
+						queuedTags.pop();
 					}
 
 					root->commitFrame(true);
@@ -1424,13 +1424,14 @@ void ParseThread::parseSWF(UI8 ver)
 					delete tag;
 					break;
 				case SYMBOL_CLASS_TAG:
+				case ACTION_TAG:
 				{
-					// Add symbol class tags to the queue, to be executed when the rest of the 
+					// Add symbol class tags or action to the queue, to be executed when the rest of the 
 					// frame has been parsed. This is to handle invalid SWF files that define ID's
 					// used in the SymbolClass tag only after the tag, which would otherwise result
 					// in "undefined dictionary ID" errors.
 					const ControlTag* stag = static_cast<const ControlTag*>(tag);
-					symbolClassTags.push(stag);
+					queuedTags.push(stag);
 					break;
 				}
 				case CONTROL_TAG:
diff --git a/src/swftypes.cpp b/src/swftypes.cpp
index 1ec1807..f47d2ec 100644
--- a/src/swftypes.cpp
+++ b/src/swftypes.cpp
@@ -1504,3 +1504,26 @@ tiny_string RGB::toString() const
 
 	return ss.str();
 }
+
+std::istream& lightspark::operator>>(std::istream& stream, SOUNDINFO& v)
+{
+	BitStream bs(stream);
+	UB(2,bs); // reserved
+	v.SyncStop = UB(1,bs);
+	v.SyncNoMultiple = UB(1,bs);
+	v.HasEnvelope = UB(1,bs);
+	v.HasLoops = UB(1,bs);
+	v.HasOutPoint = UB(1,bs);
+	v.HasInPoint = UB(1,bs);
+	if (v.HasInPoint)
+		stream >> v.InPoint;
+	if (v.HasOutPoint)
+		stream >> v.OutPoint;
+	if (v.HasLoops)
+		stream >> v.LoopCount;
+	if (v.HasEnvelope)
+		stream >> v.EnvPoints;
+	// TODO: EnvelopeRecords
+	return stream;
+}
+
diff --git a/src/swftypes.h b/src/swftypes.h
index 4022ec9..cbba249 100644
--- a/src/swftypes.h
+++ b/src/swftypes.h
@@ -1295,6 +1295,21 @@ public:
 	CLIPEVENTFLAGS AllEventFlags;
 };
 
+class SOUNDINFO
+{
+public:
+	UB SyncStop;
+	UB SyncNoMultiple;
+	UB HasEnvelope;
+	UB HasLoops;
+	UB HasOutPoint;
+	UB HasInPoint;
+	UI32_SWF InPoint;
+	UI32_SWF OutPoint;
+	UI16_SWF LoopCount;
+	UI8 EnvPoints;
+};
+
 class RunState
 {
 public:
@@ -1359,7 +1374,7 @@ std::istream& operator>>(std::istream& stream, GRADIENTGLOWFILTER& v);
 std::istream& operator>>(std::istream& stream, CONVOLUTIONFILTER& v);
 std::istream& operator>>(std::istream& stream, COLORMATRIXFILTER& v);
 std::istream& operator>>(std::istream& stream, GRADIENTBEVELFILTER& v);
-
+std::istream& operator>>(std::istream& stream, SOUNDINFO& v);
 
 };
 #endif /* SWFTYPES_H */
-- 
1.8.5.3

