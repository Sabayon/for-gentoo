From 0472d1ef5ff4773bdb7e336402e0fffcd9594f1e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ludger=20Kr=C3=A4mer?= <dbluelle@blau-weissoedingen.de>
Date: Sat, 26 Oct 2013 20:11:24 +0200
Subject: [PATCH 101/110] Implement JSON parsing

---
 ChangeLog                                |   1 +
 src/CMakeLists.txt                       |   1 +
 src/allclasses.cpp                       |   1 +
 src/allclasses.h                         |   1 +
 src/asobject.cpp                         | 165 +++++++
 src/asobject.h                           |   3 +
 src/scripting/abc.cpp                    |   6 +-
 src/scripting/flash/utils/ByteArray.cpp  |   6 +-
 src/scripting/flash/utils/ByteArray.h    |   1 +
 src/scripting/flash/utils/Dictionary.cpp |   6 +
 src/scripting/flash/utils/Dictionary.h   |   2 +
 src/scripting/toplevel/Array.cpp         |  53 +++
 src/scripting/toplevel/Array.h           |   1 +
 src/scripting/toplevel/JSON.cpp          | 774 +++++++++++++++++++++++++++++++
 src/scripting/toplevel/JSON.h            |  51 ++
 src/scripting/toplevel/XML.cpp           |   5 +
 src/scripting/toplevel/XML.h             |   1 +
 17 files changed, 1075 insertions(+), 3 deletions(-)
 create mode 100644 src/scripting/toplevel/JSON.cpp
 create mode 100644 src/scripting/toplevel/JSON.h

diff --git a/ChangeLog b/ChangeLog
index 787bb6a..2657922 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -3,6 +3,7 @@ lightspark: An open source flash player implementation
 Version NEXT:
 
 	* Support embedded audio
+	* Implement JSON parsing
 
 Version 0.7.2:
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a075d14..cd72561 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -112,6 +112,7 @@ SET(LIBSPARK_SOURCES
   scripting/toplevel/Date.cpp
   scripting/toplevel/Error.cpp
   scripting/toplevel/Integer.cpp
+  scripting/toplevel/JSON.cpp
   scripting/toplevel/Math.cpp
   scripting/toplevel/Number.cpp
   scripting/toplevel/RegExp.cpp
diff --git a/src/allclasses.cpp b/src/allclasses.cpp
index 4a4881e..fb46c26 100644
--- a/src/allclasses.cpp
+++ b/src/allclasses.cpp
@@ -19,6 +19,7 @@
 
 #include "scripting/toplevel/ASString.h"
 #include "scripting/toplevel/Date.h"
+#include "scripting/toplevel/JSON.h"
 #include "scripting/toplevel/Math.h"
 #include "scripting/toplevel/RegExp.h"
 #include "scripting/toplevel/Vector.h"
diff --git a/src/allclasses.h b/src/allclasses.h
index c4d5731..d9d51b5 100644
--- a/src/allclasses.h
+++ b/src/allclasses.h
@@ -28,6 +28,7 @@ REGISTER_CLASS_NAME(Date,"")
 REGISTER_CLASS_NAME2(Global,"global","")
 REGISTER_CLASS_NAME2(IFunction,"Function","")
 REGISTER_CLASS_NAME2(Integer,"int","")
+REGISTER_CLASS_NAME(JSON,"")
 REGISTER_CLASS_NAME(Math,"")
 REGISTER_CLASS_NAME(Namespace,"")
 REGISTER_CLASS_NAME(Number,"")
diff --git a/src/asobject.cpp b/src/asobject.cpp
index 94fab45..ce9d6ff 100644
--- a/src/asobject.cpp
+++ b/src/asobject.cpp
@@ -340,6 +340,46 @@ _R<ASObject> ASObject::call_toString()
 	return _MR(ret);
 }
 
+bool ASObject::has_toJSON()
+{
+	multiname toJSONName(NULL);
+	toJSONName.name_type=multiname::NAME_STRING;
+	toJSONName.name_s_id=getSys()->getUniqueStringId("toJSON");
+	toJSONName.ns.push_back(nsNameAndKind("",NAMESPACE));
+	toJSONName.ns.push_back(nsNameAndKind(AS3,NAMESPACE));
+	toJSONName.isAttribute = false;
+	return ASObject::hasPropertyByMultiname(toJSONName, true, true);
+}
+
+tiny_string ASObject::call_toJSON()
+{
+	multiname toJSONName(NULL);
+	toJSONName.name_type=multiname::NAME_STRING;
+	toJSONName.name_s_id=getSys()->getUniqueStringId("toJSON");
+	toJSONName.ns.push_back(nsNameAndKind("",NAMESPACE));
+	toJSONName.ns.push_back(nsNameAndKind(AS3,NAMESPACE));
+	toJSONName.isAttribute = false;
+	assert(ASObject::hasPropertyByMultiname(toJSONName, true, true));
+
+	_NR<ASObject> o=getVariableByMultiname(toJSONName,SKIP_IMPL);
+	assert_and_throw(o->is<IFunction>());
+	IFunction* f=o->as<IFunction>();
+
+	incRef();
+	ASObject *ret=f->call(this,NULL,0);
+	tiny_string res;
+	if (ret->is<ASString>())
+	{
+		res += "\"";
+		res += ret->toString();
+		res += "\"";
+	}
+	else 
+		res = ret->toString();
+	
+	return res;
+}
+
 bool ASObject::isPrimitive() const
 {
 	// ECMA 3, section 4.3.2, T_INTEGER and T_UINTEGER are added
@@ -1487,6 +1527,131 @@ ASObject *ASObject::describeType() const
 	return Class<XML>::getInstanceS(root);
 }
 
+tiny_string ASObject::toJSON(std::vector<ASObject *> &path, IFunction *replacer, const tiny_string &spaces,const tiny_string& filter)
+{
+	if (has_toJSON())
+	{
+		return call_toJSON();
+	}
+
+	tiny_string newline = (spaces.empty() ? "" : "\n");
+	tiny_string res;
+	if (this->isPrimitive())
+	{
+		switch(this->type)
+		{
+			case T_STRING:
+			{
+				res += "\"";
+				tiny_string sub = this->toString();
+				for (CharIterator it=sub.begin(); it!=sub.end(); it++)
+				{
+					switch (*it)
+					{
+						case '\b':
+							res += "\\b";
+							break;
+						case '\f':
+							res += "\\f";
+							break;
+						case '\n':
+							res += "\\n";
+							break;
+						case '\r':
+							res += "\\r";
+							break;
+						case '\t':
+							res += "\\t";
+							break;
+						case '\"':
+							res += "\\\"";
+							break;
+						case '\\':
+							res += "\\\\";
+							break;
+						default:
+							if (*it < 0x20 || *it > 0xff)
+							{
+								char hexstr[7];
+								sprintf(hexstr,"\\u%04x",*it);
+								res += hexstr;
+							}
+							else
+								res += *it;
+							break;
+					}
+				}
+				res += "\"";
+				break;
+			}
+			case T_UNDEFINED:
+				res += "null";
+				break;
+			default:
+				res += this->toString();
+				break;
+		}
+	}
+	else
+	{
+		res += "{";
+		const variables_map::const_var_iterator beginIt = Variables.Variables.begin();
+		const variables_map::const_var_iterator endIt = Variables.Variables.end();
+		bool bfirst = true;
+		for(variables_map::const_var_iterator varIt=beginIt; varIt != endIt; ++varIt)
+		{
+			// check for cylic reference
+			if (std::find(path.begin(),path.end(), varIt->second.var) != path.end())
+				throwError<TypeError>(kJSONCyclicStructure);
+
+			if (replacer != NULL)
+			{
+				if (!bfirst)
+					res += ",";
+				res += newline+spaces;
+				res += "\"";
+				res += getSys()->getStringFromUniqueId(varIt->first.nameId);
+				res += "\"";
+				res += ":";
+				if (!spaces.empty())
+					res += " ";
+				ASObject* params[2];
+				
+				params[0] = Class<ASString>::getInstanceS(getSys()->getStringFromUniqueId(varIt->first.nameId));
+				params[1] = varIt->second.var;
+				params[1]->incRef();
+				ASObject *funcret=replacer->call(getSys()->getNullRef(), params, 2);
+				LOG(LOG_ERROR,"funcall:"<<res<<"|"<<funcret);
+				if (funcret)
+					res += funcret->toString();
+				else
+					res += varIt->second.var->toJSON(path,replacer,spaces+spaces,filter);
+				bfirst = false;
+			}
+			else if (filter.empty() || filter.find(tiny_string(" ")+getSys()->getStringFromUniqueId(varIt->first.nameId)+" ") != tiny_string::npos)
+			{
+				if (!bfirst)
+					res += ",";
+				res += newline+spaces;
+				res += "\"";
+				res += getSys()->getStringFromUniqueId(varIt->first.nameId);
+				res += "\"";
+				res += ":";
+				if (!spaces.empty())
+					res += " ";
+				res += varIt->second.var->toJSON(path,replacer,spaces+spaces,filter);
+				bfirst = false;
+			}
+			path.push_back(varIt->second.var);
+		}
+		if (!bfirst)
+			res += newline+spaces.substr_bytes(0,spaces.numBytes()/2);
+
+		res += "}";
+	}
+	return res;
+}
+
 bool ASObject::hasprop_prototype()
 {
 	variable* var=Variables.findObjVar(BUILTIN_STRINGS::PROTOTYPE,nsNameAndKind(BUILTIN_NAMESPACES::EMPTY_NS),
diff --git a/src/asobject.h b/src/asobject.h
index 756af41..2f0a737 100644
--- a/src/asobject.h
+++ b/src/asobject.h
@@ -427,6 +427,8 @@ public:
 	_R<ASObject> call_valueOf();
 	bool has_toString();
 	_R<ASObject> call_toString();
+	bool has_toJSON();
+	tiny_string call_toJSON();
 
 	/* Helper function for calling getClass()->getQualifiedClassName() */
 	virtual tiny_string getClassName();
@@ -465,6 +467,7 @@ public:
 
 	virtual ASObject *describeType() const;
 
+	virtual tiny_string toJSON(std::vector<ASObject *> &path, IFunction *replacer, const tiny_string &spaces,const tiny_string& filter);
 	/* returns true if the current object is of type T */
 	template<class T> bool is() const { return dynamic_cast<const T*>(this); }
 	/* returns this object casted to the given type.
diff --git a/src/scripting/abc.cpp b/src/scripting/abc.cpp
index 4a253b9..19343b0 100644
--- a/src/scripting/abc.cpp
+++ b/src/scripting/abc.cpp
@@ -56,6 +56,7 @@
 #include "swf.h"
 #include "scripting/toplevel/ASString.h"
 #include "scripting/toplevel/Date.h"
+#include "scripting/toplevel/JSON.h"
 #include "scripting/toplevel/Math.h"
 #include "scripting/toplevel/RegExp.h"
 #include "scripting/toplevel/Vector.h"
@@ -220,6 +221,7 @@ void ABCVm::registerClasses()
 	builtin->registerBuiltin("Namespace","",Class<Namespace>::getRef());
 	builtin->registerBuiltin("AS3","",_MR(Class<Namespace>::getInstanceS(AS3)));
 	builtin->registerBuiltin("Date","",Class<Date>::getRef());
+	builtin->registerBuiltin("JSON","",Class<JSON>::getRef());
 	builtin->registerBuiltin("RegExp","",Class<RegExp>::getRef());
 	builtin->registerBuiltin("QName","",Class<ASQName>::getRef());
 	builtin->registerBuiltin("uint","",Class<UInteger>::getRef());
@@ -1975,9 +1977,9 @@ void ABCContext::buildTrait(ASObject* obj, const traits_info* t, bool isBorrowed
 				//do interfaces have cinit methods?
 				//TODO: call them, set constructor property, do something
 				if(classes[t->classi].cinit != 0)
-					LOG(LOG_NOT_IMPLEMENTED,"Interface cinit (static)");
+					LOG(LOG_NOT_IMPLEMENTED,"Interface cinit (static):"<<className);
 				if(instances[t->classi].init != 0)
-					LOG(LOG_NOT_IMPLEMENTED,"Interface cinit (constructor)");
+					LOG(LOG_NOT_IMPLEMENTED,"Interface cinit (constructor):"<<className);
 				ret = ci;
 			}
 			else
diff --git a/src/scripting/flash/utils/ByteArray.cpp b/src/scripting/flash/utils/ByteArray.cpp
index 60bcad9..3982ece 100644
--- a/src/scripting/flash/utils/ByteArray.cpp
+++ b/src/scripting/flash/utils/ByteArray.cpp
@@ -105,7 +105,7 @@ void ByteArray::sinit(Class_base* c)
 	REGISTER_GETTER_SETTER(c,shareable);
 	c->setDeclaredMethodByQName("atomicCompareAndSwapIntAt","",Class<IFunction>::getFunction(atomicCompareAndSwapIntAt),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("atomicCompareAndSwapLength","",Class<IFunction>::getFunction(atomicCompareAndSwapLength),NORMAL_METHOD,true);
-
+	c->setDeclaredMethodByQName("toJSON",AS3,Class<IFunction>::getFunction(_toJSON),NORMAL_METHOD,true);
 
 	c->addImplementedInterface(InterfaceClass<IDataInput>::getClass());
 	IDataInput::linkTraits(c);
@@ -1377,3 +1377,7 @@ ASFUNCTIONBODY(ByteArray,atomicCompareAndSwapLength)
 	return abstract_i(ret);
 }
 
+ASFUNCTIONBODY(ByteArray,_toJSON)
+{
+	return Class<ASString>::getInstanceS("ByteArray");
+}
diff --git a/src/scripting/flash/utils/ByteArray.h b/src/scripting/flash/utils/ByteArray.h
index 33c8278..19f5ff7 100644
--- a/src/scripting/flash/utils/ByteArray.h
+++ b/src/scripting/flash/utils/ByteArray.h
@@ -110,6 +110,7 @@ public:
 	ASPROPERTY_GETTER_SETTER(bool,shareable);
 	ASFUNCTION(atomicCompareAndSwapIntAt);
 	ASFUNCTION(atomicCompareAndSwapLength);
+	ASFUNCTION(_toJSON);
 
 	// these are internal methods used if the generic Array-Methods are called on a ByteArray
 	ASFUNCTION(pop);
diff --git a/src/scripting/flash/utils/Dictionary.cpp b/src/scripting/flash/utils/Dictionary.cpp
index f28f781..cebc396 100644
--- a/src/scripting/flash/utils/Dictionary.cpp
+++ b/src/scripting/flash/utils/Dictionary.cpp
@@ -43,6 +43,7 @@ void Dictionary::finalize()
 void Dictionary::sinit(Class_base* c)
 {
 	CLASS_SETUP(c, ASObject, _constructor, CLASS_DYNAMIC_NOT_FINAL);
+	c->setDeclaredMethodByQName("toJSON",AS3,Class<IFunction>::getFunction(_toJSON),NORMAL_METHOD,true);
 }
 
 void Dictionary::buildTraits(ASObject* o)
@@ -54,6 +55,11 @@ ASFUNCTIONBODY(Dictionary,_constructor)
 	return NULL;
 }
 
+ASFUNCTIONBODY(Dictionary,_toJSON)
+{
+	return Class<ASString>::getInstanceS("Dictionary");
+}
+
 Dictionary::dictType::iterator Dictionary::findKey(ASObject *o)
 {
 	Dictionary::dictType::iterator it = data.begin();
diff --git a/src/scripting/flash/utils/Dictionary.h b/src/scripting/flash/utils/Dictionary.h
index 7d66b43..a3732d4 100644
--- a/src/scripting/flash/utils/Dictionary.h
+++ b/src/scripting/flash/utils/Dictionary.h
@@ -41,6 +41,8 @@ public:
 	static void sinit(Class_base*);
 	static void buildTraits(ASObject* o);
 	ASFUNCTION(_constructor);
+	ASFUNCTION(_toJSON);
+
 	_NR<ASObject> getVariableByMultiname(const multiname& name, GET_VARIABLE_OPTION opt=NONE);
 	int32_t getVariableByMultiname_i(const multiname& name)
 	{
diff --git a/src/scripting/toplevel/Array.cpp b/src/scripting/toplevel/Array.cpp
index 430ddd5..a27b8e6 100644
--- a/src/scripting/toplevel/Array.cpp
+++ b/src/scripting/toplevel/Array.cpp
@@ -1568,6 +1568,59 @@ void Array::serialize(ByteArray* out, std::map<tiny_string, uint32_t>& stringMap
 	}
 }
 
+tiny_string Array::toJSON(std::vector<ASObject *> &path, IFunction *replacer, const tiny_string& spaces,const tiny_string& filter)
+{
+	if (has_toJSON())
+	{
+		return call_toJSON();
+	}
+
+	tiny_string res = "[";
+	std::map<uint32_t,data_slot>::iterator it;
+	// check for cylic reference
+	if (std::find(path.begin(),path.end(), this) != path.end())
+		throwError<TypeError>(kJSONCyclicStructure);
+	path.push_back(this);
+	bool bfirst = true;
+	tiny_string newline = (spaces.empty() ? "" : "\n");
+	for (it=data.begin() ; it != data.end(); ++it)
+	{
+		if(it->second.type==DATA_OBJECT && it->second.data)
+		{
+			tiny_string subres;
+			if (replacer != NULL)
+			{
+				ASObject* params[2];
+				
+				params[0] = Class<Number>::getInstanceS(it->first);
+				params[0]->incRef();
+				params[1] = it->second.data;
+				params[1]->incRef();
+				ASObject *funcret=replacer->call(getSys()->getNullRef(), params, 2);
+				if (funcret)
+					subres = funcret->toJSON(path,NULL,spaces,filter);
+			}
+			else
+				subres = it->second.data->toJSON(path,replacer,spaces,filter);
+			if (!subres.empty())
+			{
+				if (!bfirst)
+					res += ",";
+				res += newline+spaces;
+
+				bfirst = false;
+				res += subres;
+			}
+			path.push_back(it->second.data);
+		}
+	}
+	if (!bfirst)
+		res += newline+spaces.substr_bytes(0,spaces.numBytes()/2);
+	res += "]";
+	return res;
+	
+}
+
 Array::~Array()
 {
 	Array::finalize();
diff --git a/src/scripting/toplevel/Array.h b/src/scripting/toplevel/Array.h
index f80ccfa..d8f9732 100644
--- a/src/scripting/toplevel/Array.h
+++ b/src/scripting/toplevel/Array.h
@@ -166,6 +166,7 @@ public:
 	void serialize(ByteArray* out, std::map<tiny_string, uint32_t>& stringMap,
 				std::map<const ASObject*, uint32_t>& objMap,
 				std::map<const Class_base*, uint32_t>& traitsMap);
+	virtual tiny_string toJSON(std::vector<ASObject *> &path,IFunction* replacer, const tiny_string &spaces,const tiny_string& filter);
 };
 
 
diff --git a/src/scripting/toplevel/JSON.cpp b/src/scripting/toplevel/JSON.cpp
new file mode 100644
index 0000000..193bee3
--- /dev/null
+++ b/src/scripting/toplevel/JSON.cpp
@@ -0,0 +1,774 @@
+/**************************************************************************
+    Lightspark, a free flash player implementation
+
+    Copyright (C) 2009-2013  Alessandro Pignotti (a.pignotti@sssup.it)
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU Lesser General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+**************************************************************************/
+
+#include "scripting/argconv.h"
+#include "scripting/toplevel/JSON.h"
+
+using namespace std;
+using namespace lightspark;
+
+JSON::JSON(Class_base* c):ASObject(c)
+{
+}
+
+
+void JSON::sinit(Class_base* c)
+{
+	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
+	c->setDeclaredMethodByQName("parse","",Class<IFunction>::getFunction(_parse,2),NORMAL_METHOD,false);
+	c->setDeclaredMethodByQName("stringify","",Class<IFunction>::getFunction(_stringify,3),NORMAL_METHOD,false);
+}
+void JSON::buildTraits(ASObject* o)
+{
+}
+ASFUNCTIONBODY(JSON,_constructor)
+{
+	throwError<ArgumentError>(kCantInstantiateError);
+	return NULL;
+}
+ASFUNCTIONBODY(JSON,generator)
+{
+	throwError<ArgumentError>(kCoerceArgumentCountError);
+	return NULL;
+}
+
+ASFUNCTIONBODY(JSON,_parse)
+{
+	tiny_string text;
+	IFunction* reviver = NULL;
+
+	if (argslen > 0 && (args[0]->is<Null>() ||args[0]->is<Undefined>()))
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+	ARG_UNPACK(text);
+	if (argslen > 1)
+	{
+		if (!args[1]->is<IFunction>())
+			throwError<TypeError>(kCheckTypeFailedError);
+		reviver = args[1]->as<IFunction>();
+	}
+	ASObject* res = NULL;
+	multiname dummy(NULL);
+	
+	parseAll(text,&res,dummy,reviver);
+	return res;
+}
+
+ASFUNCTIONBODY(JSON,_stringify)
+{
+	_NR<ASObject> value;
+	ARG_UNPACK(value);
+	if (value->has_toJSON())
+		return Class<ASString>::getInstanceS(value->call_toJSON());
+	std::vector<ASObject *> path;
+	tiny_string filter;
+	IFunction* replacer = NULL;
+	if (argslen > 1 && !args[1]->is<Null>() && !args[1]->is<Undefined>())
+	{
+		if (args[1]->is<IFunction>())
+		{
+			replacer = args[1]->as<IFunction>();
+		}
+		else if (args[1]->is<Array>())
+		{
+			filter = " ";
+			Array* ar = args[1]->as<Array>();
+			for (uint64_t i = 0; i < ar->size(); i++)
+			{
+				filter += ar->at(i)->toString();
+				filter += " ";
+			}
+		}
+		else
+			throwError<TypeError>(kJSONInvalidReplacer);
+	}
+
+	tiny_string spaces = "";
+	if (argslen > 2)
+	{
+		ASObject* space = args[2];
+		spaces = "          ";
+		if (space->is<Number>() || space->is<Integer>() || space->is<UInteger>())
+		{
+			int32_t v = space->toInt();
+			if (v < 0) v = 0;
+			if (v > 10) v = 10;
+			spaces = spaces.substr_bytes(0,v);
+		}
+		else if (space->is<Boolean>() || space->is<Null>())
+		{
+			spaces = "";
+		}
+		else
+		{
+			if(space->has_toString())
+			{
+				_R<ASObject> ret = space->call_toString();
+				spaces = ret->toString();
+			}
+			else
+				spaces = space->toString();
+			if (spaces.numBytes() > 10)
+				spaces = spaces.substr_bytes(0,10);
+		}
+	}
+	tiny_string res = value->toJSON(path,replacer,spaces,filter);
+
+	return Class<ASString>::getInstanceS(res);
+}
+void JSON::parseAll(const tiny_string &jsonstring, ASObject** parent , const multiname& key, IFunction *reviver)
+{
+	int len = jsonstring.numBytes();
+	int pos = 0;
+	while (pos < len)
+	{
+		if (*parent && (*parent)->isPrimitive())
+			throwError<SyntaxError>(kJSONInvalidParseInput);
+		pos = parse(jsonstring, pos, parent , key, reviver);
+		while (jsonstring.charAt(pos) == ' ' ||
+			   jsonstring.charAt(pos) == '\t' ||
+			   jsonstring.charAt(pos) == '\n' ||
+			   jsonstring.charAt(pos) == '\r'
+			   )
+			pos++;
+	}
+}
+int JSON::parse(const tiny_string &jsonstring, int pos, ASObject** parent , const multiname& key, IFunction *reviver)
+{
+	while (jsonstring.charAt(pos) == ' ' ||
+		   jsonstring.charAt(pos) == '\t' ||
+		   jsonstring.charAt(pos) == '\n' ||
+		   jsonstring.charAt(pos) == '\r'
+		   )
+		   pos++;
+	int len = jsonstring.numBytes();
+	if (pos < len)
+	{
+		char c = jsonstring.charAt(pos);
+		switch(c)
+		{
+			case '{':
+				pos = parseObject(jsonstring,pos,parent,key, reviver);
+				break;
+			case '[': 
+				pos = parseArray(jsonstring,pos,parent,key, reviver);
+				break;
+			case '"':
+				pos = parseString(jsonstring,pos,parent,key);
+				break;
+			case '0':
+			case '1':
+			case '2':
+			case '3':
+			case '4':
+			case '5':
+			case '6':
+			case '7':
+			case '8':
+			case '9':
+			case '-':
+				pos = parseNumber(jsonstring,pos,parent,key);
+				break;
+			case 't':
+				pos = parseTrue(jsonstring,pos,parent,key);
+				break;
+			case 'f':
+				pos = parseFalse(jsonstring,pos,parent,key);
+				break;
+			case 'n':
+				pos = parseNull(jsonstring,pos,parent,key);
+				break;
+			default:
+				throwError<SyntaxError>(kJSONInvalidParseInput);
+		}
+	}
+	if (reviver)
+	{
+		bool haskey = key.name_type!= multiname::NAME_OBJECT;
+		ASObject* params[2];
+		
+		if (haskey)
+		{
+			params[0] = Class<ASString>::getInstanceS(key.normalizedName());
+			if ((*parent)->hasPropertyByMultiname(key,true,false))
+			{
+				params[1] = (*parent)->getVariableByMultiname(key).getPtr();
+				params[1]->incRef();
+			}
+			else
+				params[1] = getSys()->getNullRef();
+		}
+		else
+		{
+			params[0] = Class<ASString>::getInstanceS("");
+			params[1] = *parent;
+			params[1]->incRef();
+		}
+
+		ASObject *funcret=reviver->call(getSys()->getNullRef(), params, 2);
+		if(funcret)
+		{
+			if (haskey)
+			{
+				if (funcret->is<Undefined>())
+				{
+					(*parent)->deleteVariableByMultiname(key);
+					funcret->decRef();
+				}
+				else
+				{
+					(*parent)->setVariableByMultiname(key,funcret,ASObject::CONST_NOT_ALLOWED);
+				}
+			}
+			else 
+				*parent= funcret;
+		}
+	}
+	return pos;
+}
+int JSON::parseTrue(const tiny_string &jsonstring, int pos,ASObject** parent,const multiname& key)
+{
+	int len = jsonstring.numBytes();
+	if (len >= pos+4)
+	{
+		if (jsonstring.charAt(pos) == 't' && 
+				jsonstring.charAt(pos + 1) == 'r' &&
+				jsonstring.charAt(pos + 2) == 'u' && 
+				jsonstring.charAt(pos + 3) == 'e')
+		{
+			pos += 4;
+			if (*parent == NULL)
+				*parent = abstract_b(true);
+			else 
+				(*parent)->setVariableByMultiname(key,abstract_b(true),ASObject::CONST_NOT_ALLOWED);
+		}
+		else
+			throwError<SyntaxError>(kJSONInvalidParseInput);
+	}
+	else
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+	return pos;
+}
+int JSON::parseFalse(const tiny_string &jsonstring, int pos,ASObject** parent,const multiname& key)
+{
+	int len = jsonstring.numBytes();
+	if (len >= pos+5)
+	{
+		if (jsonstring.charAt(pos) == 'f' && 
+				jsonstring.charAt(pos + 1) == 'a' &&
+				jsonstring.charAt(pos + 2) == 'l' && 
+				jsonstring.charAt(pos + 3) == 's' && 
+				jsonstring.charAt(pos + 4) == 'e')
+		{
+			pos += 5;
+			if (*parent == NULL)
+				*parent = abstract_b(false);
+			else 
+				(*parent)->setVariableByMultiname(key,abstract_b(false),ASObject::CONST_NOT_ALLOWED);
+		}
+		else
+			throwError<SyntaxError>(kJSONInvalidParseInput);
+	}
+	else
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+	return pos;
+}
+int JSON::parseNull(const tiny_string &jsonstring, int pos,ASObject** parent,const multiname& key)
+{
+	int len = jsonstring.numBytes();
+	if (len >= pos+4)
+	{
+		if (jsonstring.charAt(pos) == 'n' && 
+				jsonstring.charAt(pos + 1) == 'u' &&
+				jsonstring.charAt(pos + 2) == 'l' && 
+				jsonstring.charAt(pos + 3) == 'l')
+		{
+			pos += 4;
+			if (*parent == NULL)
+				*parent = getSys()->getNullRef();
+			else 
+				(*parent)->setVariableByMultiname(key,getSys()->getNullRef(),ASObject::CONST_NOT_ALLOWED);
+		}
+		else
+			throwError<SyntaxError>(kJSONInvalidParseInput);
+	}
+	else
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+	return pos;
+}
+int JSON::parseString(const tiny_string &jsonstring, int pos,ASObject** parent,const multiname& key, tiny_string* result)
+{
+	pos++; // ignore starting quotes
+	int len = jsonstring.numChars();
+	if (pos >= len)
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+
+	tiny_string sub = jsonstring.substr(pos,len-pos);
+	
+	tiny_string res;
+	bool done = false;
+	for (CharIterator it=sub.begin(); it!=sub.end(); it++)
+	{
+		pos++;
+		if (*it == '\"')
+		{
+			done = true;
+			break;
+		}
+		else if(*it == '\\')
+		{
+			it++;
+			pos++;
+			if(it == sub.end())
+				break;
+			if(*it == '\"')
+				res += '\"';
+			else if(*it == '\\')
+				res += '\\';
+			else if(*it == '/')
+				res += '/';
+			else if(*it == 'b')
+				res += '\b';
+			else if(*it == 'f')
+				res += '\f';
+			else if(*it == 'n')
+				res += '\n';
+			else if(*it == 'r')
+				res += '\r';
+			else if(*it == 't')
+				res += '\t';
+			else if(*it == 'u')
+			{
+				tiny_string strhex;
+				for (int i = 0; i < 4; i++)
+				{
+					it++; pos++; 
+					if (it==sub.end()) 
+						throwError<SyntaxError>(kJSONInvalidParseInput);
+					switch(*it)
+					{
+						case '0':
+						case '1':
+						case '2':
+						case '3':
+						case '4':
+						case '5':
+						case '6':
+						case '7':
+						case '8':
+						case '9':
+						case 'a':
+						case 'b':
+						case 'c':
+						case 'd':
+						case 'e':
+						case 'f':
+						case 'A':
+						case 'B':
+						case 'C':
+						case 'D':
+						case 'E':
+						case 'F':
+							strhex += *it;
+							break;
+						default:
+							throwError<SyntaxError>(kJSONInvalidParseInput);
+					}
+					if (it==sub.end()) 
+						throwError<SyntaxError>(kJSONInvalidParseInput);
+				}
+				int64_t hexnum;
+				if (Integer::fromStringFlashCompatible(strhex.raw_buf(),hexnum,16))
+				{
+					if (hexnum < 0x20 && hexnum != 0xf)
+						throwError<SyntaxError>(kJSONInvalidParseInput);
+					res += tiny_string::fromChar(hexnum);
+				}
+				else
+					break;
+			}
+			else
+				throwError<SyntaxError>(kJSONInvalidParseInput);
+		}
+		else if (*it < 0x20)
+		{
+			throwError<SyntaxError>(kJSONInvalidParseInput);
+		}
+		else
+		{
+			res += *it;
+		}
+	}
+	if (!done)
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+	
+	if (parent != NULL)
+	{
+		if (*parent == NULL)
+			*parent = Class<ASString>::getInstanceS(res);
+		else 
+			(*parent)->setVariableByMultiname(key,Class<ASString>::getInstanceS(res),ASObject::CONST_NOT_ALLOWED);
+	}
+	if (result)
+		*result =res;
+	return pos;
+}
+int JSON::parseNumber(const tiny_string &jsonstring, int pos, ASObject** parent, const multiname& key)
+{
+	int len = jsonstring.numBytes();
+	tiny_string res;
+	bool done = false;
+	while (!done && pos < len)
+	{
+		char c = jsonstring.charAt(pos);
+		switch(c)
+		{
+			case '0':
+			case '1':
+			case '2':
+			case '3':
+			case '4':
+			case '5':
+			case '6':
+			case '7':
+			case '8':
+			case '9':
+			case '-':
+			case '+':
+			case '.':
+			case 'E':
+			case 'e':
+				res += c;
+				pos++;
+				break;
+			default:
+				done = true;
+				break;
+		}
+	}
+	ASString* numstr = Class<ASString>::getInstanceS(res);
+	number_t num = numstr->toNumber();
+
+	if (std::isnan(num))
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+
+	if (*parent == NULL)
+		*parent = Class<Number>::getInstanceS(num);
+	else 
+	{
+		(*parent)->setVariableByMultiname(key,Class<Number>::getInstanceS(num),ASObject::CONST_NOT_ALLOWED);
+	}
+	return pos;
+}
+int JSON::parseObject(const tiny_string &jsonstring, int pos,ASObject** parent,const multiname& key, IFunction *reviver)
+{
+	int len = jsonstring.numChars();
+	pos++; // ignore '{' or ','
+	ASObject* subobj = Class<ASObject>::getInstanceS();
+	if (*parent == NULL)
+		*parent = subobj;
+	else 
+		(*parent)->setVariableByMultiname(key,subobj,ASObject::CONST_NOT_ALLOWED);
+	multiname name(NULL);
+	name.name_type=multiname::NAME_STRING;
+	name.ns.push_back(nsNameAndKind("",NAMESPACE));
+	name.isAttribute = false;
+	bool done = false;
+	bool bfirst = true;
+	bool needkey = true;
+	bool needvalue = false;
+
+	while (!done && pos < len)
+	{
+		while (jsonstring.charAt(pos) == ' ' ||
+			   jsonstring.charAt(pos) == '\t' ||
+			   jsonstring.charAt(pos) == '\n' ||
+			   jsonstring.charAt(pos) == '\r'
+			   )
+			pos++;
+		char c = jsonstring.charAt(pos);
+		switch(c)
+		{
+			case '}':
+				if (!bfirst && (needkey || needvalue))
+					throwError<SyntaxError>(kJSONInvalidParseInput);
+				done = true;
+				pos++;
+				break;
+			case '\"':
+				{
+					tiny_string keyname;
+					pos = parseString(jsonstring,pos,NULL,name,&keyname);
+					name.name_s_id=getSys()->getUniqueStringId(keyname);
+					needkey = false;
+					needvalue = true;
+				}
+				break;
+			case ',':
+				if (needkey || needvalue)
+					throwError<SyntaxError>(kJSONInvalidParseInput);
+				pos++;
+				name.name_s_id=0;
+				needkey = true;
+				break;
+			case ':':
+				pos++;
+				pos = parse(jsonstring,pos,&subobj,name,reviver);
+				needvalue = false;
+				break;
+			default:
+				throwError<SyntaxError>(kJSONInvalidParseInput);
+		}
+		bfirst=false;
+	}
+	if (!done)
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+
+	return pos;
+}
+
+int JSON::parseArray(const tiny_string &jsonstring, int pos, ASObject** parent, const multiname& key, IFunction *reviver)
+{
+	int len = jsonstring.numChars();
+	pos++; // ignore '['
+	ASObject* subobj = Class<Array>::getInstanceS();
+	if (*parent == NULL)
+		*parent = subobj;
+	else 
+		(*parent)->setVariableByMultiname(key,subobj,ASObject::CONST_NOT_ALLOWED);
+	multiname name(NULL);
+	name.name_type=multiname::NAME_INT;
+	name.name_i = 0;
+	name.ns.push_back(nsNameAndKind("",NAMESPACE));
+	name.isAttribute = false;
+	bool done = false;
+	while (!done && pos < len)
+	{
+		while (jsonstring.charAt(pos) == ' ' ||
+			   jsonstring.charAt(pos) == '\t' ||
+			   jsonstring.charAt(pos) == '\n' ||
+			   jsonstring.charAt(pos) == '\r'
+			   )
+			pos++;
+		char c = jsonstring.charAt(pos);
+		switch(c)
+		{
+			case ']':
+				done = true;
+				pos++;
+				break;
+			case ',':
+				name.name_i++;
+				pos++;
+				break;
+			default:
+				pos = parse(jsonstring,pos,&subobj,name, reviver);
+				break;
+		}
+	}
+	if (!done)
+		throwError<SyntaxError>(kJSONInvalidParseInput);
+
+	return pos;
+}
+
+
+
+
+/***** 
+
+static QString sanitizeString(QString str)
+{
+        str.replace(QLatin1String("\\"), QLatin1String("\\\\"));
+        str.replace(QLatin1String("\""), QLatin1String("\\\""));
+        str.replace(QLatin1String("\b"), QLatin1String("\\b"));
+        str.replace(QLatin1String("\f"), QLatin1String("\\f"));
+        str.replace(QLatin1String("\n"), QLatin1String("\\n"));
+        str.replace(QLatin1String("\r"), QLatin1String("\\r"));
+        str.replace(QLatin1String("\t"), QLatin1String("\\t"));
+        return QString(QLatin1String("\"%1\"")).arg(str);
+}
+
+static QByteArray join(const QList<QByteArray> &list, const QByteArray &sep)
+{
+        QByteArray res;
+        Q_FOREACH(const QByteArray &i, list)
+        {
+                if(!res.isEmpty())
+                {
+                        res += sep;
+                }
+                res += i;
+        }
+        return res;
+}
+
+
+
+static DSVariantList parseArray(const QString &json, int &index, bool &success)
+{
+        DSVariantList list;
+
+        nextToken(json, index);
+
+        bool done = false;
+        while(!done)
+        {
+                int token = lookAhead(json, index);
+
+                if(token == JsonTokenNone)
+                {
+                        success = false;
+                        return DSVariantList();
+                }
+                else if(token == JsonTokenComma)
+                {
+                        nextToken(json, index);
+                }
+                else if(token == JsonTokenSquaredClose)
+                {
+                        nextToken(json, index);
+                        break;
+                }
+                else
+                {
+                        QVariant value = parseValue(json, index, success);
+
+                        if(!success)
+                        {
+                            return DSVariantList();
+                        }
+
+                        list.push_back(value);
+                }
+        }
+
+        return list;
+}
+
+
+static QVariant parseNumber(const QString &json, int &index)
+{
+        eatWhitespace(json, index);
+
+        int lastIndex = lastIndexOfNumber(json, index);
+        int charLength = (lastIndex - index) + 1;
+        QString numberStr;
+
+        numberStr = json.mid(index, charLength);
+
+        index = lastIndex + 1;
+
+        if (numberStr.contains('.')) {
+                return QVariant(numberStr.toDouble(NULL));
+        } else if (numberStr.startsWith('-')) {
+                return QVariant(numberStr.toLongLong(NULL));
+        } else {
+                return QVariant(numberStr.toULongLong(NULL));
+        }
+}
+
+static int lastIndexOfNumber(const QString &json, int index)
+{
+        int lastIndex;
+
+        for(lastIndex = index; lastIndex < json.size(); lastIndex++)
+        {
+                if(QString("0123456789+-.eE").indexOf(json[lastIndex]) == -1)
+                {
+                        break;
+                }
+        }
+
+        return lastIndex -1;
+}
+
+
+
+static int lookAhead(const QString &json, int index)
+{
+        int saveIndex = index;
+        return nextToken(json, saveIndex);
+}
+
+static int nextToken(const QString &json, int &index)
+{
+        eatWhitespace(json, index);
+
+        if(index == json.size())
+        {
+                return JsonTokenNone;
+        }
+
+        QChar c = json[index];
+        index++;
+        switch(c.toLatin1())
+        {
+                case '{': return JsonTokenCurlyOpen;
+                case '}': return JsonTokenCurlyClose;
+                case '[': return JsonTokenSquaredOpen;
+                case ']': return JsonTokenSquaredClose;
+                case ',': return JsonTokenComma;
+                case '"': return JsonTokenString;
+                case '0': case '1': case '2': case '3': case '4':
+                case '5': case '6': case '7': case '8': case '9':
+                case '-': return JsonTokenNumber;
+                case ':': return JsonTokenColon;
+        }
+
+        index--;
+
+        int remainingLength = json.size() - index;
+
+        //True
+        if(remainingLength >= 4)
+        {
+                if (json[index] == 't' && json[index + 1] == 'r' &&
+                        json[index + 2] == 'u' && json[index + 3] == 'e')
+                {
+                        index += 4;
+                        return JsonTokenTrue;
+                }
+        }
+
+        //False
+        if (remainingLength >= 5)
+        {
+                if (json[index] == 'f' && json[index + 1] == 'a' &&
+                        json[index + 2] == 'l' && json[index + 3] == 's' &&
+                        json[index + 4] == 'e')
+                {
+                        index += 5;
+                        return JsonTokenFalse;
+                }
+        }
+
+        //Null
+        if (remainingLength >= 4)
+        {
+                if (json[index] == 'n' && json[index + 1] == 'u' &&
+                        json[index + 2] == 'l' && json[index + 3] == 'l')
+                {
+                        index += 4;
+                        return JsonTokenNull;
+                }
+        }
+
+        return JsonTokenNone;
+}
+*****/
diff --git a/src/scripting/toplevel/JSON.h b/src/scripting/toplevel/JSON.h
new file mode 100644
index 0000000..1614cc7
--- /dev/null
+++ b/src/scripting/toplevel/JSON.h
@@ -0,0 +1,51 @@
+/**************************************************************************
+    Lightspark, a free flash player implementation
+
+    Copyright (C) 2009-2013  Alessandro Pignotti (a.pignotti@sssup.it)
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU Lesser General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+**************************************************************************/
+
+#ifndef SCRIPTING_TOPLEVEL_JSON_H
+#define SCRIPTING_TOPLEVEL_JSON_H 1
+#include "compat.h"
+#include "asobject.h"
+
+namespace lightspark
+{
+
+class JSON : public ASObject
+{
+public:
+	JSON(Class_base* c);
+	static void sinit(Class_base* c);
+	static void buildTraits(ASObject* o);
+	ASFUNCTION(_constructor);
+	ASFUNCTION(generator);
+	ASFUNCTION(_parse);
+	ASFUNCTION(_stringify);
+private:
+	static void parseAll(const tiny_string &jsonstring, ASObject** parent , const multiname& key, IFunction *reviver);
+	static int parse(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key,IFunction* reviver);
+	static int parseTrue(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key);
+	static int parseFalse(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key);
+	static int parseNull(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key);
+	static int parseString(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key, tiny_string *result = NULL);
+	static int parseNumber(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key);
+	static int parseObject(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key, IFunction *reviver);
+	static int parseArray(const tiny_string &jsonstring, int pos, ASObject **parent, const multiname &key, IFunction *reviver);
+};
+
+}
+#endif /* SCRIPTING_TOPLEVEL_JSON_H */
diff --git a/src/scripting/toplevel/XML.cpp b/src/scripting/toplevel/XML.cpp
index 01e4612..a3c51ae 100644
--- a/src/scripting/toplevel/XML.cpp
+++ b/src/scripting/toplevel/XML.cpp
@@ -125,6 +125,7 @@ void XML::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("setNamespace",AS3,Class<IFunction>::getFunction(_setNamespace),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("copy",AS3,Class<IFunction>::getFunction(_copy),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("setChildren",AS3,Class<IFunction>::getFunction(_setChildren),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("toJSON",AS3,Class<IFunction>::getFunction(_toJSON),NORMAL_METHOD,true);
 }
 
 ASFUNCTIONBODY(XML,generator)
@@ -1512,6 +1513,10 @@ ASFUNCTIONBODY(XML,_getDefaultSettings)
 	res->setVariableByMultiname(mn,abstract_b(true),CONST_NOT_ALLOWED);
 	return res;
 }
+ASFUNCTIONBODY(XML,_toJSON)
+{
+	return Class<ASString>::getInstanceS("XML");
+}
 
 tiny_string XML::toString_priv()
 {
diff --git a/src/scripting/toplevel/XML.h b/src/scripting/toplevel/XML.h
index f00f093..2064b7c 100644
--- a/src/scripting/toplevel/XML.h
+++ b/src/scripting/toplevel/XML.h
@@ -112,6 +112,7 @@ public:
 	ASFUNCTION(_getSettings);
 	ASFUNCTION(_setSettings);
 	ASFUNCTION(_getDefaultSettings);
+	ASFUNCTION(_toJSON);
 
 	static void buildTraits(ASObject* o){};
 	static void sinit(Class_base* c);
-- 
1.8.5.3

