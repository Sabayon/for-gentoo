From 8dbcf5c173bff476f89ea9b072d6df1b2f6c9485 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ludger=20Kr=C3=A4mer?= <dbluelle@blau-weissoedingen.de>
Date: Sun, 18 Aug 2013 13:03:45 +0200
Subject: [PATCH 086/110] partially implement xml settings handling

---
 src/scripting/toplevel/XML.cpp | 189 ++++++++++++++++++++++++++++++++++++++++-
 src/scripting/toplevel/XML.h   |  20 +++--
 2 files changed, 202 insertions(+), 7 deletions(-)

diff --git a/src/scripting/toplevel/XML.cpp b/src/scripting/toplevel/XML.cpp
index 1ed2ed8..db9e0d3 100644
--- a/src/scripting/toplevel/XML.cpp
+++ b/src/scripting/toplevel/XML.cpp
@@ -32,7 +32,22 @@
 using namespace std;
 using namespace lightspark;
 
-XML::XML(Class_base* c):ASObject(c),node(NULL),constructed(false),ignoreComments(true)
+static bool ignoreComments;
+static bool ignoreProcessingInstructions;
+static bool ignoreWhitespace;
+static uint32_t prettyIndent;
+static bool prettyPrinting;
+
+void setDefaultXMLSettings()
+{
+	ignoreComments = true;
+	ignoreProcessingInstructions = true;
+	ignoreWhitespace = true;
+	prettyIndent = 2;
+	prettyPrinting = true;
+}
+
+XML::XML(Class_base* c):ASObject(c),node(NULL),constructed(false)
 {
 }
 
@@ -62,6 +77,22 @@ void XML::finalize()
 void XML::sinit(Class_base* c)
 {
 	CLASS_SETUP(c, ASObject, _constructor, CLASS_SEALED | CLASS_FINAL);
+	setDefaultXMLSettings();
+
+	c->setDeclaredMethodByQName("ignoreComments","",Class<IFunction>::getFunction(_getIgnoreComments),GETTER_METHOD,false);
+	c->setDeclaredMethodByQName("ignoreComments","",Class<IFunction>::getFunction(_setIgnoreComments),SETTER_METHOD,false);
+	c->setDeclaredMethodByQName("ignoreProcessingInstructions","",Class<IFunction>::getFunction(_getIgnoreProcessingInstructions),GETTER_METHOD,false);
+	c->setDeclaredMethodByQName("ignoreProcessingInstructions","",Class<IFunction>::getFunction(_setIgnoreProcessingInstructions),SETTER_METHOD,false);
+	c->setDeclaredMethodByQName("ignoreWhitespace","",Class<IFunction>::getFunction(_getIgnoreWhitespace),GETTER_METHOD,false);
+	c->setDeclaredMethodByQName("ignoreWhitespace","",Class<IFunction>::getFunction(_setIgnoreWhitespace),SETTER_METHOD,false);
+	c->setDeclaredMethodByQName("prettyIndent","",Class<IFunction>::getFunction(_getPrettyIndent),GETTER_METHOD,false);
+	c->setDeclaredMethodByQName("prettyIndent","",Class<IFunction>::getFunction(_setPrettyIndent),SETTER_METHOD,false);
+	c->setDeclaredMethodByQName("prettyPrinting","",Class<IFunction>::getFunction(_getPrettyPrinting),GETTER_METHOD,false);
+	c->setDeclaredMethodByQName("prettyPrinting","",Class<IFunction>::getFunction(_setPrettyPrinting),SETTER_METHOD,false);
+	c->setDeclaredMethodByQName("settings","",Class<IFunction>::getFunction(_getSettings),NORMAL_METHOD,false);
+	c->setDeclaredMethodByQName("setSettings","",Class<IFunction>::getFunction(_setSettings),NORMAL_METHOD,false);
+	c->setDeclaredMethodByQName("defaultSettings","",Class<IFunction>::getFunction(_getDefaultSettings),NORMAL_METHOD,false);
+
 	c->prototype->setVariableByQName("toString","",Class<IFunction>::getFunction(_toString),DYNAMIC_TRAIT);
 	c->setDeclaredMethodByQName("toString",AS3,Class<IFunction>::getFunction(_toString),NORMAL_METHOD,true);
 	c->prototype->setVariableByQName("valueOf","",Class<IFunction>::getFunction(valueOf),DYNAMIC_TRAIT);
@@ -406,7 +437,7 @@ void XML::toXMLString_priv(xmlBufferPtr buf)
 			//Override the node defined namespaces
 			cNode->nsDef=&localNamespaces.front();
 		}
-		retVal=xmlNodeDump(buf, xmlDoc, cNode, 0, 0);
+		retVal=xmlNodeDump(buf, xmlDoc, cNode, 0, prettyPrinting);
 		//Restore the previously defined namespaces
 		cNode->nsDef=oldNsDef;
 	}
@@ -1322,6 +1353,160 @@ ASFUNCTIONBODY(XML,_toString)
 	return Class<ASString>::getInstanceS(th->toString_priv());
 }
 
+ASFUNCTIONBODY(XML,_getIgnoreComments)
+{
+	return abstract_b(ignoreComments);
+}
+ASFUNCTIONBODY(XML,_setIgnoreComments)
+{
+	assert(args && argslen==1);
+	ignoreComments = Boolean_concrete(args[0]);
+	LOG(LOG_INFO,"ignoreComments handling is not implemented yet");
+	return NULL;
+}
+ASFUNCTIONBODY(XML,_getIgnoreProcessingInstructions)
+{
+	return abstract_b(ignoreProcessingInstructions);
+}
+ASFUNCTIONBODY(XML,_setIgnoreProcessingInstructions)
+{
+	assert(args && argslen==1);
+	ignoreProcessingInstructions = Boolean_concrete(args[0]);
+	LOG(LOG_INFO,"ignoreProcessingInstructions handling is not implemented yet");
+	return NULL;
+}
+ASFUNCTIONBODY(XML,_getIgnoreWhitespace)
+{
+	return abstract_b(ignoreWhitespace);
+}
+ASFUNCTIONBODY(XML,_setIgnoreWhitespace)
+{
+	assert(args && argslen==1);
+	ignoreWhitespace = Boolean_concrete(args[0]);
+	xmlKeepBlanksDefault(ignoreWhitespace ? 0 : 1);
+	return NULL;
+}
+ASFUNCTIONBODY(XML,_getPrettyIndent)
+{
+	return abstract_i(prettyIndent);
+}
+ASFUNCTIONBODY(XML,_setPrettyIndent)
+{
+	assert(args && argslen==1);
+	prettyIndent = args[0]->toInt();
+	xmlThrDefIndentTreeOutput(prettyIndent);
+	return NULL;
+}
+ASFUNCTIONBODY(XML,_getPrettyPrinting)
+{
+	return abstract_b(prettyPrinting);
+}
+ASFUNCTIONBODY(XML,_setPrettyPrinting)
+{
+	assert(args && argslen==1);
+	prettyPrinting = Boolean_concrete(args[0]);
+	return NULL;
+}
+ASFUNCTIONBODY(XML,_getSettings)
+{
+	ASObject* res = Class<ASObject>::getInstanceS();
+	multiname mn(NULL);
+	mn.name_type=multiname::NAME_STRING;
+	mn.ns.push_back(nsNameAndKind("",NAMESPACE));
+	mn.ns.push_back(nsNameAndKind(AS3,NAMESPACE));
+	mn.isAttribute = true;
+
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreComments");
+	res->setVariableByMultiname(mn,abstract_b(ignoreComments),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreProcessingInstructions");
+	res->setVariableByMultiname(mn,abstract_b(ignoreProcessingInstructions),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreWhitespace");
+	res->setVariableByMultiname(mn,abstract_b(ignoreWhitespace),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("prettyIndent");
+	res->setVariableByMultiname(mn,abstract_i(prettyIndent),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("prettyPrinting");
+	res->setVariableByMultiname(mn,abstract_b(prettyPrinting),CONST_NOT_ALLOWED);
+	return res;
+}
+ASFUNCTIONBODY(XML,_setSettings)
+{
+	if (argslen == 0)
+	{
+		setDefaultXMLSettings();
+		return getSys()->getNullRef();
+	}
+	_NR<ASObject> arg0;
+	ARG_UNPACK(arg0);
+	if (arg0->is<Null>() || arg0->is<Undefined>())
+	{
+		setDefaultXMLSettings();
+		return getSys()->getNullRef();
+	}
+	multiname mn(NULL);
+	mn.name_type=multiname::NAME_STRING;
+	mn.ns.push_back(nsNameAndKind("",NAMESPACE));
+	mn.ns.push_back(nsNameAndKind(AS3,NAMESPACE));
+	mn.isAttribute = true;
+	_NR<ASObject> o;
+
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreComments");
+	if (arg0->hasPropertyByMultiname(mn,true,true))
+	{
+		o=arg0->getVariableByMultiname(mn,SKIP_IMPL);
+		ignoreComments = o->toInt();
+	}
+
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreProcessingInstructions");
+	if (arg0->hasPropertyByMultiname(mn,true,true))
+	{
+		o=arg0->getVariableByMultiname(mn,SKIP_IMPL);
+		ignoreProcessingInstructions = o->toInt();
+	}
+
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreWhitespace");
+	if (arg0->hasPropertyByMultiname(mn,true,true))
+	{
+		o=arg0->getVariableByMultiname(mn,SKIP_IMPL);
+		ignoreWhitespace = o->toInt();
+	}
+
+	mn.name_s_id=getSys()->getUniqueStringId("prettyIndent");
+	if (arg0->hasPropertyByMultiname(mn,true,true))
+	{
+		o=arg0->getVariableByMultiname(mn,SKIP_IMPL);
+		prettyIndent = o->toInt();
+	}
+
+	mn.name_s_id=getSys()->getUniqueStringId("prettyPrinting");
+	if (arg0->hasPropertyByMultiname(mn,true,true))
+	{
+		o=arg0->getVariableByMultiname(mn,SKIP_IMPL);
+		prettyPrinting = o->toInt();
+	}
+	return getSys()->getNullRef();
+}
+ASFUNCTIONBODY(XML,_getDefaultSettings)
+{
+	ASObject* res = Class<ASObject>::getInstanceS();
+	multiname mn(NULL);
+	mn.name_type=multiname::NAME_STRING;
+	mn.ns.push_back(nsNameAndKind("",NAMESPACE));
+	mn.ns.push_back(nsNameAndKind(AS3,NAMESPACE));
+	mn.isAttribute = true;
+
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreComments");
+	res->setVariableByMultiname(mn,abstract_b(true),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreProcessingInstructions");
+	res->setVariableByMultiname(mn,abstract_b(true),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("ignoreWhitespace");
+	res->setVariableByMultiname(mn,abstract_b(true),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("prettyIndent");
+	res->setVariableByMultiname(mn,abstract_i(2),CONST_NOT_ALLOWED);
+	mn.name_s_id=getSys()->getUniqueStringId("prettyPrinting");
+	res->setVariableByMultiname(mn,abstract_b(true),CONST_NOT_ALLOWED);
+	return res;
+}
+
 tiny_string XML::toString_priv()
 {
 	//We have to use vanilla libxml2, libxml++ is not enough
diff --git a/src/scripting/toplevel/XML.h b/src/scripting/toplevel/XML.h
index 55c163e..a02de34 100644
--- a/src/scripting/toplevel/XML.h
+++ b/src/scripting/toplevel/XML.h
@@ -45,11 +45,6 @@ private:
 	XMLList* getAllAttributes();
 	void getText(XMLVector& ret);
 	_NR<XML> getRootNode();
-	bool ignoreComments;
-	bool ignoreProcessingInstructions;
-	bool ignoreWhitespace;
-	uint32_t prettyIndent;
-	bool prettyPrinting;
 	/*
 	 * @param name The name of the wanted children, "*" for all children
 	 *
@@ -102,6 +97,21 @@ public:
 	ASFUNCTION(_setName);
 	ASFUNCTION(_setNamespace);
 	ASFUNCTION(_setChildren);
+
+	ASFUNCTION(_getIgnoreComments);
+	ASFUNCTION(_setIgnoreComments);
+	ASFUNCTION(_getIgnoreProcessingInstructions);
+	ASFUNCTION(_setIgnoreProcessingInstructions);
+	ASFUNCTION(_getIgnoreWhitespace);
+	ASFUNCTION(_setIgnoreWhitespace);
+	ASFUNCTION(_getPrettyIndent);
+	ASFUNCTION(_setPrettyIndent);
+	ASFUNCTION(_getPrettyPrinting);
+	ASFUNCTION(_setPrettyPrinting);
+	ASFUNCTION(_getSettings);
+	ASFUNCTION(_setSettings);
+	ASFUNCTION(_getDefaultSettings);
+
 	static void buildTraits(ASObject* o){};
 	static void sinit(Class_base* c);
 	void getDescendantsByQName(const tiny_string& name, const tiny_string& ns, XMLVector& ret);
-- 
1.8.5.3

