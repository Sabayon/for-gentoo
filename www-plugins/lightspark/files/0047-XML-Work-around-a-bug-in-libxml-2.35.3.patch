From ff43f7753a974a8652cb715a6363d1707ffed403 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sat, 25 May 2013 18:11:06 +0300
Subject: [PATCH 047/110] [XML] Work around a bug in libxml++ < 2.35.3

The bug was causing segfaults when text nodes were concatenated in
appendChild()
---
 src/scripting/toplevel/XML.cpp     | 18 +++++++++++++++---
 src/scripting/toplevel/XML.h       | 11 +++++++----
 src/scripting/toplevel/XMLList.cpp |  6 +++---
 src/scripting/toplevel/XMLList.h   |  2 +-
 4 files changed, 26 insertions(+), 11 deletions(-)

diff --git a/src/scripting/toplevel/XML.cpp b/src/scripting/toplevel/XML.cpp
index bc90f2c..1ed2ed8 100644
--- a/src/scripting/toplevel/XML.cpp
+++ b/src/scripting/toplevel/XML.cpp
@@ -80,7 +80,7 @@ void XML::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("namespace",AS3,Class<IFunction>::getFunction(_namespace),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("normalize",AS3,Class<IFunction>::getFunction(_normalize),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("descendants",AS3,Class<IFunction>::getFunction(descendants),NORMAL_METHOD,true);
-	c->setDeclaredMethodByQName("appendChild",AS3,Class<IFunction>::getFunction(appendChild),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("appendChild",AS3,Class<IFunction>::getFunction(_appendChild),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("parent",AS3,Class<IFunction>::getFunction(parent),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("inScopeNamespaces",AS3,Class<IFunction>::getFunction(inScopeNamespaces),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("addNamespace",AS3,Class<IFunction>::getFunction(addNamespace),NORMAL_METHOD,true);
@@ -256,7 +256,7 @@ ASFUNCTIONBODY(XML,descendants)
  	return Class<XMLList>::getInstanceS(ret);
 }
 
-ASFUNCTIONBODY(XML,appendChild)
+ASFUNCTIONBODY(XML,_appendChild)
 {
 	XML* th=Class<XML>::cast(obj);
 	assert_and_throw(argslen==1);
@@ -281,11 +281,23 @@ ASFUNCTIONBODY(XML,appendChild)
 		arg=_MR(Class<XML>::getInstanceS(args[0]->toString()));
 	}
 
-	th->node->import_node(arg->node, true);
+	th->appendChild(arg);
 	th->incRef();
 	return th;
 }
 
+void XML::appendChild(_R<XML> newChild)
+{
+	// Work around a text node concatenation bug in libxml++ older
+	// than 2.35.3 by importing manually instead of calling
+	// import_node().
+	xmlNode* imported_node = xmlDocCopyNode(newChild->node->cobj(), node->cobj()->doc, 1);
+	if (!imported_node)
+		return;
+
+	xmlAddChild(node->cobj(), imported_node);
+}
+
 /* returns the named attribute in an XMLList */
 ASFUNCTIONBODY(XML,attribute)
 {
diff --git a/src/scripting/toplevel/XML.h b/src/scripting/toplevel/XML.h
index 73cf101..55c163e 100644
--- a/src/scripting/toplevel/XML.h
+++ b/src/scripting/toplevel/XML.h
@@ -57,9 +57,12 @@ private:
 	void childrenImpl(XMLVector& ret, const tiny_string& name);
 	void childrenImpl(XMLVector& ret, uint32_t index);
 	tiny_string getNamespacePrefixByURI(const tiny_string& uri, bool create=false);
-        void setLocalName(const tiny_string& localname);
-        void setNamespace(const tiny_string& ns_uri, const tiny_string& ns_prefix="");
+	void setLocalName(const tiny_string& localname);
+	void setNamespace(const tiny_string& ns_uri, const tiny_string& ns_prefix="");
 	void removeAllChildren();
+	// Append node or attribute to this. Concatenates adjacent
+	// text nodes.
+	void appendChild(_R<XML> child);
 	static void normalizeRecursive(xmlpp::Node *node);
 	void addTextContent(const tiny_string& str);
 public:
@@ -79,7 +82,7 @@ public:
 	ASFUNCTION(_copy);
 	ASFUNCTION(attributes);
 	ASFUNCTION(attribute);
-	ASFUNCTION(appendChild);
+	ASFUNCTION(_appendChild);
 	ASFUNCTION(length);
 	ASFUNCTION(localName);
 	ASFUNCTION(name);
@@ -112,7 +115,7 @@ public:
 	void toXMLString_priv(xmlBufferPtr buf);
 	bool hasSimpleContent() const;
 	bool hasComplexContent() const;
-        xmlElementType getNodeKind() const;
+	xmlElementType getNodeKind() const;
 	ASObject *getParentNode();
 	XML *copy() const;
 	void normalize();
diff --git a/src/scripting/toplevel/XMLList.cpp b/src/scripting/toplevel/XMLList.cpp
index 14dee08..f4bf064 100644
--- a/src/scripting/toplevel/XMLList.cpp
+++ b/src/scripting/toplevel/XMLList.cpp
@@ -99,7 +99,7 @@ void XMLList::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("toXMLString",AS3,Class<IFunction>::getFunction(toXMLString),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("text",AS3,Class<IFunction>::getFunction(text),NORMAL_METHOD,true);
 	REGISTER_XML_DELEGATE(addNamespace);
-	REGISTER_XML_DELEGATE(appendChild);
+	REGISTER_XML_DELEGATE2(appendChild,_appendChild);
 	REGISTER_XML_DELEGATE(childIndex);
 	REGISTER_XML_DELEGATE(inScopeNamespaces);
 	//REGISTER_XML_DELEGATE(insertChildAfter);
@@ -119,7 +119,7 @@ void XMLList::sinit(Class_base* c)
 }
 
 ASFUNCTIONBODY_XML_DELEGATE(addNamespace);
-ASFUNCTIONBODY_XML_DELEGATE(appendChild);
+ASFUNCTIONBODY_XML_DELEGATE(_appendChild);
 ASFUNCTIONBODY_XML_DELEGATE(childIndex);
 ASFUNCTIONBODY_XML_DELEGATE(inScopeNamespaces);
 //ASFUNCTIONBODY_XML_DELEGATE(insertChildAfter);
@@ -826,7 +826,7 @@ void XMLList::appendNodesTo(XML *dest) const
 	for (it=nodes.begin(); it!=nodes.end(); ++it)
 	{
 		ASObject *arg0=it->getPtr();
-		ASObject *ret=XML::appendChild(dest, &arg0, 1);
+		ASObject *ret=XML::_appendChild(dest, &arg0, 1);
 		if(ret)
 			ret->decRef();
 	}
diff --git a/src/scripting/toplevel/XMLList.h b/src/scripting/toplevel/XMLList.h
index f964b25..7711629 100644
--- a/src/scripting/toplevel/XMLList.h
+++ b/src/scripting/toplevel/XMLList.h
@@ -51,7 +51,7 @@ public:
 	ASFUNCTION(_getLength);
 	ASFUNCTION(attribute);
 	ASFUNCTION(attributes);
-	ASFUNCTION(appendChild);
+	ASFUNCTION(_appendChild);
 	ASFUNCTION(child);
 	ASFUNCTION(children);
 	ASFUNCTION(childIndex);
-- 
1.8.5.3

