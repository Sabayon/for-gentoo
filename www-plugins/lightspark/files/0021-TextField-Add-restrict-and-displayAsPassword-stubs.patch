From 8987f43813ced64c8a3ce2580d28611e4785012e Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Wed, 1 May 2013 18:32:41 +0300
Subject: [PATCH 021/110] [TextField] Add restrict and displayAsPassword stubs

---
 src/scripting/flash/text/flashtext.cpp | 40 ++++++++++++++++++++++++++++------
 src/scripting/flash/text/flashtext.h   |  4 ++++
 2 files changed, 37 insertions(+), 7 deletions(-)

diff --git a/src/scripting/flash/text/flashtext.cpp b/src/scripting/flash/text/flashtext.cpp
index 47af5ff..20de026 100644
--- a/src/scripting/flash/text/flashtext.cpp
+++ b/src/scripting/flash/text/flashtext.cpp
@@ -95,7 +95,8 @@ ASFUNCTIONBODY(ASFont,registerFont)
 TextField::TextField(Class_base* c, const TextData& textData, bool _selectable, bool readOnly)
 	: InteractiveObject(c), TextData(textData), type(ET_READ_ONLY), 
 	  antiAliasType(AA_NORMAL), gridFitType(GF_PIXEL),
-	  alwaysShowSelection(false), condenseWhite(false), maxChars(0),
+	  alwaysShowSelection(false), condenseWhite(false), 
+	  displayAsPassword(false), maxChars(0),
 	  mouseWheelEnabled(true), selectable(_selectable), sharpness(0),
 	  useRichTextClipboard(false)
 {
@@ -148,6 +149,8 @@ void TextField::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("maxScrollH","",Class<IFunction>::getFunction(TextField::_getMaxScrollH),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("maxScrollV","",Class<IFunction>::getFunction(TextField::_getMaxScrollV),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("bottomScrollV","",Class<IFunction>::getFunction(TextField::_getBottomScrollV),GETTER_METHOD,true);
+	c->setDeclaredMethodByQName("restrict","",Class<IFunction>::getFunction(TextField::_getRestrict),GETTER_METHOD,true);
+	c->setDeclaredMethodByQName("restrict","",Class<IFunction>::getFunction(TextField::_setRestrict),SETTER_METHOD,true);
 
 	REGISTER_GETTER_SETTER(c, alwaysShowSelection);
 	REGISTER_GETTER_SETTER(c, background);
@@ -155,6 +158,7 @@ void TextField::sinit(Class_base* c)
 	REGISTER_GETTER_SETTER(c, border);
 	REGISTER_GETTER_SETTER(c, borderColor);
 	REGISTER_GETTER_SETTER(c, condenseWhite);
+	REGISTER_GETTER_SETTER(c, displayAsPassword);
 	REGISTER_GETTER_SETTER(c, maxChars);
 	REGISTER_GETTER_SETTER(c, multiline);
 	REGISTER_GETTER_SETTER(c, mouseWheelEnabled);
@@ -167,21 +171,22 @@ void TextField::sinit(Class_base* c)
 	REGISTER_GETTER_SETTER(c, useRichTextClipboard);
 }
 
-ASFUNCTIONBODY_GETTER_SETTER(TextField, alwaysShowSelection);
+ASFUNCTIONBODY_GETTER_SETTER(TextField, alwaysShowSelection); // stub
 ASFUNCTIONBODY_GETTER_SETTER(TextField, background);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, backgroundColor);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, border);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, borderColor);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, condenseWhite);
-ASFUNCTIONBODY_GETTER_SETTER(TextField, maxChars);
+ASFUNCTIONBODY_GETTER_SETTER(TextField, displayAsPassword); // stub
+ASFUNCTIONBODY_GETTER_SETTER(TextField, maxChars); // stub
 ASFUNCTIONBODY_GETTER_SETTER(TextField, multiline);
-ASFUNCTIONBODY_GETTER_SETTER(TextField, mouseWheelEnabled);
+ASFUNCTIONBODY_GETTER_SETTER(TextField, mouseWheelEnabled); // stub
 ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, scrollH, validateScrollH);
 ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, scrollV, validateScrollV);
-ASFUNCTIONBODY_GETTER_SETTER(TextField, selectable);
-ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, sharpness, validateSharpness);
+ASFUNCTIONBODY_GETTER_SETTER(TextField, selectable); // stub
+ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, sharpness, validateSharpness); // stub
 ASFUNCTIONBODY_GETTER_SETTER(TextField, textColor);
-ASFUNCTIONBODY_GETTER_SETTER(TextField, useRichTextClipboard);
+ASFUNCTIONBODY_GETTER_SETTER(TextField, useRichTextClipboard); // stub
 
 void TextField::buildTraits(ASObject* o)
 {
@@ -674,6 +679,27 @@ ASFUNCTIONBODY(TextField,_getBottomScrollV)
 	return abstract_i(lines.size() + 1);
 }
 
+ASFUNCTIONBODY(TextField,_getRestrict)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	if (th->restrictChars.isNull())
+		return NULL;
+	else
+	{
+		th->restrictChars->incRef();
+		return th->restrictChars.getPtr();
+	}
+}
+
+ASFUNCTIONBODY(TextField,_setRestrict)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	ARG_UNPACK(th->restrictChars);
+	if (!th->restrictChars.isNull())
+		LOG(LOG_NOT_IMPLEMENTED, "TextField restrict property");
+	return NULL;
+}
+
 void TextField::validateSharpness(number_t /*oldValue*/)
 {
 	sharpness = dmin(dmax(sharpness, -400.), 400.);
diff --git a/src/scripting/flash/text/flashtext.h b/src/scripting/flash/text/flashtext.h
index 643d188..57fcc14 100644
--- a/src/scripting/flash/text/flashtext.h
+++ b/src/scripting/flash/text/flashtext.h
@@ -97,6 +97,7 @@ private:
 	EDIT_TYPE type;
 	ANTI_ALIAS_TYPE antiAliasType;
 	GRID_FIT_TYPE gridFitType;
+        _NR<ASString> restrictChars;
 public:
 	TextField(Class_base* c, const TextData& textData=TextData(), bool _selectable=true, bool readOnly=true);
 	static void sinit(Class_base* c);
@@ -136,12 +137,15 @@ public:
 	ASFUNCTION(_getMaxScrollH);
 	ASFUNCTION(_getMaxScrollV);
 	ASFUNCTION(_getBottomScrollV);
+	ASFUNCTION(_getRestrict);
+	ASFUNCTION(_setRestrict);
 	ASPROPERTY_GETTER_SETTER(bool, alwaysShowSelection);
 	ASFUNCTION_GETTER_SETTER(background);
 	ASFUNCTION_GETTER_SETTER(backgroundColor);
 	ASFUNCTION_GETTER_SETTER(border);
 	ASFUNCTION_GETTER_SETTER(borderColor);
 	ASPROPERTY_GETTER_SETTER(bool, condenseWhite);
+	ASPROPERTY_GETTER_SETTER(bool, displayAsPassword);
 	ASPROPERTY_GETTER_SETTER(int32_t, maxChars);
 	ASFUNCTION_GETTER_SETTER(multiline);
 	ASPROPERTY_GETTER_SETTER(bool, mouseWheelEnabled);
-- 
1.8.5.3

