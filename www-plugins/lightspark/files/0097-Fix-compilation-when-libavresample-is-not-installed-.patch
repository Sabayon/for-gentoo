From e957947e80876dab2b7352976319a18a5074d525 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sun, 13 Oct 2013 13:26:35 +0300
Subject: [PATCH 097/110] Fix compilation when libavresample is not installed
 (Ubuntu) or AVCodecID is defined (new libavcodec)

If resampling is required but libavresample is not available, sound
will not be played!
---
 CMakeLists.txt           | 18 +++++++++++---
 src/backends/decoder.cpp | 65 +++++++++++++++++++++++-------------------------
 src/backends/decoder.h   |  5 +++-
 3 files changed, 50 insertions(+), 38 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d3a964b..0448fff 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -286,13 +286,18 @@ IF(AUDIO_BACKEND)
 ENDIF(AUDIO_BACKEND)
 
 IF(ENABLE_LIBAVCODEC)
-	pkg_check_modules(FFMPEG libavcodec libavutil libavformat libavresample)
+	pkg_check_modules(FFMPEG libavcodec libavutil libavformat)
+	pkg_check_modules(LIBAVRESAMPLE libavresample)
 	IF(NOT(FFMPEG_FOUND))
 		INCLUDE(FindFFMpeg REQUIRED)
 	ENDIF(NOT(FFMPEG_FOUND))
 	# Compatibility checks for ffmpeg deprecated functions
   INCLUDE(CheckFunctionExists REQUIRED)
-  SET(CMAKE_REQUIRED_FLAGS ${LIBAVCODEC_CFLAGS})
+  INCLUDE(CheckCSourceCompiles)
+  SET(FFMPEG_FLAGS "${LIBAVCODEC_CFLAGS} ${LIBAVRESAMPLE_FLAGS}")
+  SET(FFMPEG_INCLUDE_DIRS "${FFMPEG_INCLUDE_DIRS} ${LIBAVRESAMPLE_INCLUDE_DIRS}")
+  SET(FFMPEG_LIBRARIES "${FFMPEG_LIBRARIES};${LIBAVRESAMPLE_LIBRARIES}")
+  SET(CMAKE_REQUIRED_FLAGS ${FFMPEG_FLAGS})
   SET(CMAKE_REQUIRED_INCLUDES ${FFMPEG_INCLUDE_DIRS})
   SET(CMAKE_REQUIRED_LIBRARIES ${FFMPEG_LIBRARIES})
   CHECK_FUNCTION_EXISTS(avcodec_decode_video2 HAVE_AVCODEC_DECODE_VIDEO2)
@@ -303,7 +308,8 @@ IF(ENABLE_LIBAVCODEC)
   CHECK_FUNCTION_EXISTS(avcodec_open2 HAVE_AVCODEC_OPEN2)
   CHECK_FUNCTION_EXISTS(avformat_close_input HAVE_AVFORMAT_CLOSE_INPUT)
   CHECK_FUNCTION_EXISTS(avformat_find_stream_info HAVE_AVFORMAT_FIND_STREAM_INFO)
-  
+  CHECK_C_SOURCE_COMPILES("#include <libavcodec/avcodec.h>\nint main() { enum AVCodecID c; return 0; }" HAVE_AVCODECID)
+
   SET(CMAKE_REQUIRED_FLAGS)
   SET(CMAKE_REQUIRED_INCLUDES)
   SET(CMAKE_REQUIRED_LIBRARIES)
@@ -331,6 +337,12 @@ IF(ENABLE_LIBAVCODEC)
   IF(HAVE_AVFORMAT_FIND_STREAM_INFO)
     ADD_DEFINITIONS(-DHAVE_AVFORMAT_FIND_STREAM_INFO)
   ENDIF(HAVE_AVFORMAT_FIND_STREAM_INFO)
+  IF(HAVE_AVCODECID)
+    ADD_DEFINITIONS(-DHAVE_AVCODECID)
+  ENDIF(HAVE_AVCODECID)
+  IF(LIBAVRESAMPLE_FOUND)
+    ADD_DEFINITIONS(-DHAVE_LIBAVRESAMPLE)
+  ENDIF(LIBAVRESAMPLE_FOUND)
   ADD_DEFINITIONS(-DENABLE_LIBAVCODEC)
 ENDIF(ENABLE_LIBAVCODEC)
 
diff --git a/src/backends/decoder.cpp b/src/backends/decoder.cpp
index 4b3148c..755a575 100755
--- a/src/backends/decoder.cpp
+++ b/src/backends/decoder.cpp
@@ -616,23 +616,7 @@ uint32_t FFMpegAudioDecoder::decodeData(uint8_t* data, int32_t datalen, uint32_t
 	{
 		if (frameIn->format != AV_SAMPLE_FMT_S16)
 		{
-			AVAudioResampleContext * avr = avresample_alloc_context();
-			av_opt_set_int(avr, "in_channel_layout",  frameIn->channel_layout, 0);
-			av_opt_set_int(avr, "out_channel_layout", frameIn->channel_layout,  0);
-			av_opt_set_int(avr, "in_sample_rate",     frameIn->sample_rate,     0);
-			av_opt_set_int(avr, "out_sample_rate",    frameIn->sample_rate,     0);
-			av_opt_set_int(avr, "in_sample_fmt",      frameIn->format,   0);
-			av_opt_set_int(avr, "out_sample_fmt",     AV_SAMPLE_FMT_S16,    0);
-			avresample_open(avr);
-			
-			uint8_t *output;
-			int out_linesize;
-			int out_samples = avresample_available(avr) + av_rescale_rnd(avresample_get_delay(avr) + frameIn->linesize[0], frameIn->sample_rate, frameIn->sample_rate, AV_ROUND_UP);
-			av_samples_alloc(&output, &out_linesize, frameIn->nb_samples, out_samples, AV_SAMPLE_FMT_S16, 0);
-			maxLen = avresample_convert(avr, &output, out_linesize, out_samples, frameIn->extended_data, frameIn->linesize[0], frameIn->nb_samples)*4;
-			memcpy(curTail.samples, output, maxLen);
-			av_freep(&output);
-			avresample_free(&avr);
+			maxLen = resampleFrameToS16(curTail);
 		}
 		else 
 		{
@@ -687,23 +671,7 @@ uint32_t FFMpegAudioDecoder::decodePacket(AVPacket* pkt, uint32_t time)
 	{
 		if (frameIn->format != AV_SAMPLE_FMT_S16)
 		{
-			AVAudioResampleContext * avr = avresample_alloc_context();
-			av_opt_set_int(avr, "in_channel_layout",  frameIn->channel_layout, 0);
-			av_opt_set_int(avr, "out_channel_layout", frameIn->channel_layout,  0);
-			av_opt_set_int(avr, "in_sample_rate",     frameIn->sample_rate,     0);
-			av_opt_set_int(avr, "out_sample_rate",    frameIn->sample_rate,     0);
-			av_opt_set_int(avr, "in_sample_fmt",      frameIn->format,   0);
-			av_opt_set_int(avr, "out_sample_fmt",     AV_SAMPLE_FMT_S16,    0);
-			avresample_open(avr);
-			
-			uint8_t *output;
-			int out_linesize;
-			int out_samples = avresample_available(avr) + av_rescale_rnd(avresample_get_delay(avr) + frameIn->linesize[0], frameIn->sample_rate, frameIn->sample_rate, AV_ROUND_UP);
-			av_samples_alloc(&output, &out_linesize, frameIn->nb_samples, out_samples, AV_SAMPLE_FMT_S16, 0);
-			maxLen = avresample_convert(avr, &output, out_linesize, out_samples, frameIn->extended_data, frameIn->linesize[0], frameIn->nb_samples)*4;
-			memcpy(curTail.samples, output, maxLen);
-			av_freep(&output);
-			avresample_free(&avr);
+			maxLen = resampleFrameToS16(curTail);
 		}
 		else 
 		{
@@ -744,6 +712,35 @@ uint32_t FFMpegAudioDecoder::decodePacket(AVPacket* pkt, uint32_t time)
 	return maxLen;
 }
 
+int FFMpegAudioDecoder::resampleFrameToS16(FrameSamples& curTail)
+{
+	int maxLen;
+#ifdef HAVE_LIBAVRESAMPLE
+	AVAudioResampleContext * avr = avresample_alloc_context();
+	av_opt_set_int(avr, "in_channel_layout",  frameIn->channel_layout, 0);
+	av_opt_set_int(avr, "out_channel_layout", frameIn->channel_layout,  0);
+	av_opt_set_int(avr, "in_sample_rate",     frameIn->sample_rate,     0);
+	av_opt_set_int(avr, "out_sample_rate",    frameIn->sample_rate,     0);
+	av_opt_set_int(avr, "in_sample_fmt",      frameIn->format,   0);
+	av_opt_set_int(avr, "out_sample_fmt",     AV_SAMPLE_FMT_S16,    0);
+	avresample_open(avr);
+
+	uint8_t *output;
+	int out_linesize;
+	int out_samples = avresample_available(avr) + av_rescale_rnd(avresample_get_delay(avr) + frameIn->linesize[0], frameIn->sample_rate, frameIn->sample_rate, AV_ROUND_UP);
+	av_samples_alloc(&output, &out_linesize, frameIn->nb_samples, out_samples, AV_SAMPLE_FMT_S16, 0);
+	maxLen = avresample_convert(avr, &output, out_linesize, out_samples, frameIn->extended_data, frameIn->linesize[0], frameIn->nb_samples)*4;
+	memcpy(curTail.samples, output, maxLen);
+	av_freep(&output);
+	avresample_free(&avr);
+#else
+	LOG(LOG_ERROR, "unexpected sample format and can't resample, recompile with libavresample");
+	memset(curTail.samples, 0, frameIn->linesize[0]);
+	maxLen = frameIn->linesize[0];
+#endif
+	return maxLen;
+}
+
 uint32_t FFMpegAudioDecoder::decodeStreamSomePackets(std::istream& s, uint32_t time)
 {
 	const size_t BUF_SIZE = 4096;
diff --git a/src/backends/decoder.h b/src/backends/decoder.h
index 35dbaab..4a12a5c 100644
--- a/src/backends/decoder.h
+++ b/src/backends/decoder.h
@@ -28,13 +28,15 @@ extern "C"
 {
 #include <libavcodec/avcodec.h>
 #include <libavformat/avformat.h>
+#ifdef HAVE_LIBAVRESAMPLE
 #include <libavresample/avresample.h>
+#endif
 #include <libavutil/opt.h>
 #include <libavutil/mathematics.h>
 #ifndef AVCODEC_MAX_AUDIO_FRAME_SIZE
 #define AVCODEC_MAX_AUDIO_FRAME_SIZE 192000 // 1 second of 48khz 32bit audio
 #endif
-#ifndef CodecID
+#ifdef HAVE_AVCODECID
 #define CodecID AVCodecID
 #endif
 #define MAX_AUDIO_FRAME_SIZE AVCODEC_MAX_AUDIO_FRAME_SIZE
@@ -293,6 +295,7 @@ private:
 #if HAVE_AVCODEC_DECODE_AUDIO4
 	AVFrame* frameIn;
 #endif
+	int resampleFrameToS16(FrameSamples& curTail);
 public:
 	FFMpegAudioDecoder(LS_AUDIO_CODEC codec, uint8_t* initdata, uint32_t datalen);
 	FFMpegAudioDecoder(LS_AUDIO_CODEC codec, int sampleRate, int channels, bool);
-- 
1.8.5.3

