From 848f2eebbe8ae22c0aba6fcf910882f607daa94d Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sun, 19 May 2013 21:40:46 +0300
Subject: [PATCH 046/110] [tiny_string] Improve handling of NUL characters

---
 src/scripting/toplevel/ASString.cpp |  2 +-
 src/tiny_string.cpp                 | 44 ++++++++++++++++++++++++++++++-------
 2 files changed, 37 insertions(+), 9 deletions(-)

diff --git a/src/scripting/toplevel/ASString.cpp b/src/scripting/toplevel/ASString.cpp
index 11e34c8..6c0ad1f 100644
--- a/src/scripting/toplevel/ASString.cpp
+++ b/src/scripting/toplevel/ASString.cpp
@@ -63,7 +63,7 @@ ASFUNCTIONBODY(ASString,_constructor)
 {
 	ASString* th=static_cast<ASString*>(obj);
 	if(args && argslen==1)
-		th->data=args[0]->toString().raw_buf();
+		th->data=args[0]->toString();
 	return NULL;
 }
 
diff --git a/src/tiny_string.cpp b/src/tiny_string.cpp
index ff0b513..2004582 100644
--- a/src/tiny_string.cpp
+++ b/src/tiny_string.cpp
@@ -499,19 +499,47 @@ std::list<tiny_string> tiny_string::split(uint32_t delimiter) const
 
 tiny_string tiny_string::lowercase() const
 {
-	//TODO: omit copy, handle \0 in string
-	char *strdown = g_utf8_strdown(buf,numBytes());
-	tiny_string ret(strdown,/*copy:*/true);
-	g_free(strdown);
+	// have to loop manually, because g_utf8_strdown doesn't
+	// handle nul-chars
+	tiny_string ret;
+	uint32_t allocated = 2*numBytes()+7;
+	ret.createBuffer(allocated);
+	char *p = ret.buf;
+	char *pend = ret.buf + allocated;
+	uint32_t len = 0;
+	for (CharIterator it=begin(); it!=end(); it++)
+	{
+		assert(pend-p >= 6);
+		gunichar c = g_unichar_tolower(*it);
+		gint n = g_unichar_to_utf8(c, p);
+		p += n;
+		len += n;
+	}
+	*p = '\0';
+	ret.stringSize = len+1;
 	return ret;
 }
 
 tiny_string tiny_string::uppercase() const
 {
-	//TODO: omit copy, handle \0 in string
-	char *strup = g_utf8_strup(buf,numBytes());
-	tiny_string ret(strup,/*copy:*/true);
-	g_free(strup);
+	// have to loop manually, because g_utf8_strup doesn't
+	// handle nul-chars
+	tiny_string ret;
+	uint32_t allocated = 2*numBytes()+7;
+	ret.createBuffer(allocated);
+	char *p = ret.buf;
+	char *pend = ret.buf + allocated;
+	uint32_t len = 0;
+	for (CharIterator it=begin(); it!=end(); it++)
+	{
+		assert(pend-p >= 6);
+		gunichar c = g_unichar_toupper(*it);
+		gint n = g_unichar_to_utf8(c, p);
+		p += n;
+		len += n;
+	}
+	*p = '\0';
+	ret.stringSize = len+1;
 	return ret;
 }
 
-- 
1.8.5.3

