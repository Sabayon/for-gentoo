From ee9c694931cbe03f1bce586714fb538ac6589431 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sat, 27 Apr 2013 21:03:09 +0300
Subject: [PATCH 010/110] [TextField] Add line information functions

---
 src/backends/graphics.cpp              |  29 +++++---
 src/backends/graphics.h                |  26 ++++++-
 src/scripting/flash/text/flashtext.cpp | 119 ++++++++++++++++++++++++++++++---
 src/scripting/flash/text/flashtext.h   |   5 ++
 src/tiny_string.cpp                    |   8 +++
 src/tiny_string.h                      |   2 +
 6 files changed, 169 insertions(+), 20 deletions(-)

diff --git a/src/backends/graphics.cpp b/src/backends/graphics.cpp
index b4b9744..ee1eb76 100644
--- a/src/backends/graphics.cpp
+++ b/src/backends/graphics.cpp
@@ -959,7 +959,7 @@ PangoRectangle CairoPangoRenderer::lineExtents(PangoLayout *layout, int lineNumb
 	return rect;
 }
 
-std::vector<RECT> CairoPangoRenderer::getLineData(const TextData& _textData)
+std::vector<LineData> CairoPangoRenderer::getLineData(const TextData& _textData)
 {
 	//TODO:check locking
 	Locker l(pangoMutex);
@@ -972,18 +972,25 @@ std::vector<RECT> CairoPangoRenderer::getLineData(const TextData& _textData)
 
 	int XOffset = _textData.scrollH;
 	int YOffset = PANGO_PIXELS(lineExtents(layout, _textData.scrollV-1).y);
-	std::vector<RECT> extents;
-	extents.reserve(pango_layout_get_line_count(layout));
+	std::vector<LineData> data;
+	data.reserve(pango_layout_get_line_count(layout));
 	PangoLayoutIter* lineIter = pango_layout_get_iter(layout);
 	do
 	{
-		PangoRectangle logical_rect;
-		pango_layout_iter_get_line_extents(lineIter, NULL, &logical_rect);
-		extents.emplace_back(
-			PANGO_PIXELS(logical_rect.x) - XOffset,
-			PANGO_PIXELS(logical_rect.x) - XOffset + PANGO_PIXELS(logical_rect.width),
-			PANGO_PIXELS(logical_rect.y) - YOffset,
-			PANGO_PIXELS(logical_rect.y) - YOffset + PANGO_PIXELS(logical_rect.height));
+		PangoRectangle rect;
+		pango_layout_iter_get_line_extents(lineIter, NULL, &rect);
+		PangoLayoutLine* line = pango_layout_iter_get_line(lineIter);
+		data.emplace_back(_textData,
+				  PANGO_PIXELS(rect.x) - XOffset,
+				  PANGO_PIXELS(rect.y) - YOffset,
+				  PANGO_PIXELS(rect.width),
+				  PANGO_PIXELS(rect.height),
+				  _textData.text.bytePosToIndex(line->start_index),
+				  _textData.text.substr_bytes(line->start_index, line->length).numChars(),
+				  PANGO_PIXELS(PANGO_ASCENT(rect)),
+				  PANGO_PIXELS(PANGO_DESCENT(rect)),
+				  PANGO_PIXELS(PANGO_LBEARING(rect)),
+				  0); // FIXME
 	} while (pango_layout_iter_next_line(lineIter));
 	pango_layout_iter_free(lineIter);
 
@@ -991,7 +998,7 @@ std::vector<RECT> CairoPangoRenderer::getLineData(const TextData& _textData)
 	cairo_destroy(cr);
 	cairo_surface_destroy(cairoSurface);
 
-	return extents;
+	return data;
 }
 
 void CairoPangoRenderer::applyCairoMask(cairo_t* cr, int32_t xOffset, int32_t yOffset) const
diff --git a/src/backends/graphics.h b/src/backends/graphics.h
index 53659f5..4ffa53e 100644
--- a/src/backends/graphics.h
+++ b/src/backends/graphics.h
@@ -367,6 +367,30 @@ public:
 	bool wordWrap;
 };
 
+class LineData {
+public:
+	LineData(const TextData& o, int32_t x, int32_t y, int32_t _width,
+		 int32_t _height, int32_t _firstCharOffset, int32_t _length,
+		 number_t _ascent, number_t _descent, number_t _leading,
+		 number_t _indent):
+		owner(o), extents(x, x+_width, y, y+_height), 
+		firstCharOffset(_firstCharOffset), length(_length),
+		ascent(_ascent), descent(_descent), leading(_leading),
+		indent(_indent) {}
+	// This line belongs to owner
+	const TextData& owner;
+	// position and size
+	RECT extents;
+	// Offset of the first character on this line
+	int32_t firstCharOffset;
+	// length of the line in characters
+	int32_t length;
+	number_t ascent;
+	number_t descent;
+	number_t leading;
+	number_t indent;
+};
+
 class CairoPangoRenderer : public CairoRenderer
 {
 	static StaticMutex pangoMutex;
@@ -388,7 +412,7 @@ public:
 		@param w,h,tw,th are the (text)width and (text)height of the textData.
 	*/
 	static bool getBounds(const TextData& _textData, uint32_t& w, uint32_t& h, uint32_t& tw, uint32_t& th);
-	static std::vector<RECT> getLineData(const TextData& _textData);
+	static std::vector<LineData> getLineData(const TextData& _textData);
 };
 
 class InvalidateQueue
diff --git a/src/scripting/flash/text/flashtext.cpp b/src/scripting/flash/text/flashtext.cpp
index dcf8130..c85620c 100644
--- a/src/scripting/flash/text/flashtext.cpp
+++ b/src/scripting/flash/text/flashtext.cpp
@@ -114,7 +114,12 @@ void TextField::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("appendText","",Class<IFunction>::getFunction(TextField:: appendText),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("getTextFormat","",Class<IFunction>::getFunction(_getTextFormat),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("setTextFormat","",Class<IFunction>::getFunction(_setTextFormat),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("getLineIndexAtPoint","",Class<IFunction>::getFunction(_getLineIndexAtPoint),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("getLineIndexOfChar","",Class<IFunction>::getFunction(_getLineIndexOfChar),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("getLineLength","",Class<IFunction>::getFunction(_getLineLength),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("getLineMetrics","",Class<IFunction>::getFunction(_getLineMetrics),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("getLineOffset","",Class<IFunction>::getFunction(_getLineOffset),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("getLineText","",Class<IFunction>::getFunction(_getLineText),NORMAL_METHOD,true);
 
 	// properties
 	c->setDeclaredMethodByQName("antiAliasType","",Class<IFunction>::getFunction(TextField::_getAntiAliasType),GETTER_METHOD,true);
@@ -429,10 +434,108 @@ ASFUNCTIONBODY(TextField, _setter_type)
 	return NULL;
 }
 
+ASFUNCTIONBODY(TextField,_getLineIndexAtPoint)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	number_t x;
+	number_t y;
+	ARG_UNPACK(x) (y);
+
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*th);
+	std::vector<LineData>::const_iterator it;
+	int i;
+	for (i=0, it=lines.begin(); it!=lines.end(); ++i, ++it)
+	{
+		if (x > it->extents.Xmin && x <= it->extents.Xmax &&
+		    y > it->extents.Ymin && y <= it->extents.Ymax)
+			return abstract_i(i);
+	}
+
+	return abstract_i(-1);
+}
+
+ASFUNCTIONBODY(TextField,_getLineIndexOfChar)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	int32_t charIndex;
+	ARG_UNPACK(charIndex);
+
+	if (charIndex < 0)
+		return abstract_i(-1);
+
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*th);
+	std::vector<LineData>::const_iterator it;
+	int i;
+	for (i=0, it=lines.begin(); it!=lines.end(); ++i, ++it)
+	{
+		if (charIndex >= it->firstCharOffset &&
+		    charIndex < it->firstCharOffset + it->length)
+			return abstract_i(i);
+	}
+
+	// testing shows that returns -1 on invalid index instead of
+	// throwing RangeError
+	return abstract_i(-1);
+}
+
+ASFUNCTIONBODY(TextField,_getLineLength)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	int32_t  lineIndex;
+	ARG_UNPACK(lineIndex);
+
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*th);
+	if (lineIndex < 0 || lineIndex >= (int32_t)lines.size())
+		throwError<RangeError>(kParamRangeError);
+
+	return abstract_i(lines[lineIndex].length);
+}
+
 ASFUNCTIONBODY(TextField,_getLineMetrics)
 {
-	LOG(LOG_NOT_IMPLEMENTED, "TextField.getLineMetrics() returns bogus values");
-	return Class<TextLineMetrics>::getInstanceS(19, 280, 14, 11, 3.5, 0);
+	TextField* th=Class<TextField>::cast(obj);
+	int32_t  lineIndex;
+	ARG_UNPACK(lineIndex);
+
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*th);
+	if (lineIndex < 0 || lineIndex >= (int32_t)lines.size())
+		throwError<RangeError>(kParamRangeError);
+
+	return Class<TextLineMetrics>::getInstanceS(
+		lines[lineIndex].indent,
+		lines[lineIndex].extents.Xmax - lines[lineIndex].extents.Xmin,
+		lines[lineIndex].extents.Ymax - lines[lineIndex].extents.Ymin,
+		lines[lineIndex].ascent,
+		lines[lineIndex].descent,
+		lines[lineIndex].leading);
+}
+
+ASFUNCTIONBODY(TextField,_getLineOffset)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	int32_t  lineIndex;
+	ARG_UNPACK(lineIndex);
+
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*th);
+	if (lineIndex < 0 || lineIndex >= (int32_t)lines.size())
+		throwError<RangeError>(kParamRangeError);
+
+	return abstract_i(lines[lineIndex].firstCharOffset);
+}
+
+ASFUNCTIONBODY(TextField,_getLineText)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	int32_t  lineIndex;
+	ARG_UNPACK(lineIndex);
+
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*th);
+	if (lineIndex < 0 || lineIndex >= (int32_t)lines.size())
+		throwError<RangeError>(kParamRangeError);
+
+	tiny_string substr = th->text.substr(lines[lineIndex].firstCharOffset,
+					     lines[lineIndex].length);
+	return Class<ASString>::getInstanceS(substr);
 }
 
 ASFUNCTIONBODY(TextField,_getAntiAliasType)
@@ -518,10 +621,10 @@ ASFUNCTIONBODY(TextField,_getMaxScrollV)
 ASFUNCTIONBODY(TextField,_getBottomScrollV)
 {
 	TextField* th=Class<TextField>::cast(obj);
-	std::vector<RECT> lines = CairoPangoRenderer::getLineData(*th);
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*th);
 	for (unsigned int k=0; k<lines.size()-1; k++)
 	{
-		if (lines[k+1].Ymin >= (int)th->height)
+		if (lines[k+1].extents.Ymin >= (int)th->height)
 			return abstract_i(k + 1);
 	}
 
@@ -565,19 +668,19 @@ int32_t TextField::getMaxScrollH()
 
 int32_t TextField::getMaxScrollV()
 {
-	std::vector<RECT> lines = CairoPangoRenderer::getLineData(*this);
+	std::vector<LineData> lines = CairoPangoRenderer::getLineData(*this);
 	if (lines.size() <= 1)
 		return 1;
 
-	int32_t Ymax = lines[lines.size()-1].Ymax;
-	int32_t measuredTextHeight = Ymax - lines[0].Ymin;
+	int32_t Ymax = lines[lines.size()-1].extents.Ymax;
+	int32_t measuredTextHeight = Ymax - lines[0].extents.Ymin;
 	if (measuredTextHeight <= (int32_t)height)
 		return 1;
 
 	// one full page from the bottom
 	for (int k=(int)lines.size()-1; k>=0; k--)
 	{
-		if (Ymax - lines[k].Ymin > (int32_t)height)
+		if (Ymax - lines[k].extents.Ymin > (int32_t)height)
 		{
 			return imin(k+1+1, lines.size());
 		}
diff --git a/src/scripting/flash/text/flashtext.h b/src/scripting/flash/text/flashtext.h
index 38e1596..1574a25 100644
--- a/src/scripting/flash/text/flashtext.h
+++ b/src/scripting/flash/text/flashtext.h
@@ -123,7 +123,12 @@ public:
 	ASFUNCTION(_setTextFormat);
 	ASFUNCTION(_getDefaultTextFormat);
 	ASFUNCTION(_setDefaultTextFormat);
+	ASFUNCTION(_getLineIndexAtPoint);
+	ASFUNCTION(_getLineIndexOfChar);
+	ASFUNCTION(_getLineLength);
 	ASFUNCTION(_getLineMetrics);
+	ASFUNCTION(_getLineOffset);
+	ASFUNCTION(_getLineText);
 	ASFUNCTION(_getNumLines);
 	ASFUNCTION(_getMaxScrollH);
 	ASFUNCTION(_getMaxScrollV);
diff --git a/src/tiny_string.cpp b/src/tiny_string.cpp
index 8257cae..44f7bd2 100644
--- a/src/tiny_string.cpp
+++ b/src/tiny_string.cpp
@@ -202,6 +202,14 @@ std::list<tiny_string> tiny_string::split(uint32_t delimiter) const
 	return res;
 }
 
+uint32_t tiny_string::bytePosToIndex(uint32_t bytepos) const
+{
+	if (bytepos >= numBytes())
+		return numChars();
+
+	return g_utf8_pointer_to_offset(raw_buf(), raw_buf() + bytepos);
+}
+
 #ifdef MEMORY_USAGE_PROFILING
 void tiny_string::reportMemoryChange(int32_t change) const
 {
diff --git a/src/tiny_string.h b/src/tiny_string.h
index 8c05750..8b034fe 100644
--- a/src/tiny_string.h
+++ b/src/tiny_string.h
@@ -418,6 +418,8 @@ public:
 	}
 	/* split string at each occurrence of delimiter character */
 	std::list<tiny_string> split(uint32_t delimiter) const;
+	/* Convert from byte offset to UTF-8 character index */
+	uint32_t bytePosToIndex(uint32_t bytepos) const;
 	/* iterate over utf8 characters */
 	CharIterator begin()
 	{
-- 
1.8.5.3

