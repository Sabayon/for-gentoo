From f67d929aafc2d3a7a05b39076b2b80c95c52a5fc Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Sat, 20 Apr 2013 21:21:55 +0300
Subject: [PATCH 006/110] [Graphics] Implement lineBitmapStyle and
 lineGraphicsStyle

---
 src/backends/graphics.cpp                      |  14 +-
 src/scripting/flash/display/TokenContainer.cpp |  21 ++-
 src/scripting/flash/display/TokenContainer.h   |   1 +
 src/scripting/flash/display/flashdisplay.cpp   | 190 +++++++++++++++++--------
 src/scripting/flash/display/flashdisplay.h     |  15 ++
 src/swftypes.h                                 |   4 +-
 6 files changed, 177 insertions(+), 68 deletions(-)

diff --git a/src/backends/graphics.cpp b/src/backends/graphics.cpp
index b8a79a2..38f09e8 100644
--- a/src/backends/graphics.cpp
+++ b/src/backends/graphics.cpp
@@ -458,10 +458,20 @@ bool CairoTokenRenderer::cairoPathFromTokens(cairo_t* cr, const std::vector<Geom
 				cairo_stroke(stroke_cr);
 
 				const LINESTYLE2& style = tokens[i].lineStyle;
-				const RGBA& color = style.Color;
 
 				cairo_set_operator(stroke_cr, CAIRO_OPERATOR_OVER);
-				cairo_set_source_rgba(stroke_cr, color.rf(), color.gf(), color.bf(), color.af());
+				if (style.HasFillFlag)
+				{
+					cairo_pattern_t* pattern = FILLSTYLEToCairo(style.FillType, scaleCorrection);
+					if (pattern)
+					{
+						cairo_set_source(stroke_cr, pattern);
+						cairo_pattern_destroy(pattern);
+					}
+				} else {
+					const RGBA& color = style.Color;
+					cairo_set_source_rgba(stroke_cr, color.rf(), color.gf(), color.bf(), color.af());
+				}
 
 				// TODO: EndCapStyle
 				if (style.StartCapStyle == 0)
diff --git a/src/scripting/flash/display/TokenContainer.cpp b/src/scripting/flash/display/TokenContainer.cpp
index d1ad664..ddc6481 100644
--- a/src/scripting/flash/display/TokenContainer.cpp
+++ b/src/scripting/flash/display/TokenContainer.cpp
@@ -235,12 +235,11 @@ void TokenContainer::getTextureSize(int *width, int *height) const
 	*width=0;
 	*height=0;
 
-	unsigned int len=tokens.size();
-	for(unsigned int i=0;i<len;i++)
+	for(int i=tokens.size()-1;i>=0;i--)
 	{
-		const FILLSTYLE& style=tokens[len-i-1].fillStyle;
+		const FILLSTYLE& style=tokens[i].fillStyle;
 		const FILL_STYLE_TYPE& fstype=style.FillStyleType;
-		if(tokens[len-i-1].type==SET_FILL && 
+		if(tokens[i].type==SET_FILL && 
 		   (fstype==REPEATING_BITMAP ||
 		    fstype==NON_SMOOTHED_REPEATING_BITMAP ||
 		    fstype==CLIPPED_BITMAP ||
@@ -255,3 +254,17 @@ void TokenContainer::getTextureSize(int *width, int *height) const
 		}
 	}
 }
+
+/* Return the width of the latest SET_STROKE */
+uint16_t TokenContainer::getCurrentLineWidth() const
+{
+	for(int i=tokens.size()-1;i>=0;i--)
+	{
+		if(tokens[i].type==SET_STROKE)
+		{
+			return tokens[i].lineStyle.Width;
+		}
+	}
+
+	return 0;
+}
diff --git a/src/scripting/flash/display/TokenContainer.h b/src/scripting/flash/display/TokenContainer.h
index 5fdb7b8..8d752c1 100644
--- a/src/scripting/flash/display/TokenContainer.h
+++ b/src/scripting/flash/display/TokenContainer.h
@@ -50,6 +50,7 @@ public:
 					 tokensVector& tokens, const std::list<FILLSTYLE>& fillStyles,
 					 const MATRIX& matrix = MATRIX());
 	void getTextureSize(int *width, int *height) const;
+	uint16_t getCurrentLineWidth() const;
 	float scaling;
 protected:
 	TokenContainer(DisplayObject* _o);
diff --git a/src/scripting/flash/display/flashdisplay.cpp b/src/scripting/flash/display/flashdisplay.cpp
index d3d5e8e..70b1122 100644
--- a/src/scripting/flash/display/flashdisplay.cpp
+++ b/src/scripting/flash/display/flashdisplay.cpp
@@ -2221,6 +2221,8 @@ void Graphics::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("curveTo","",Class<IFunction>::getFunction(curveTo),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("cubicCurveTo","",Class<IFunction>::getFunction(cubicCurveTo),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("lineTo","",Class<IFunction>::getFunction(lineTo),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("lineBitmapStyle","",Class<IFunction>::getFunction(lineBitmapStyle),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("lineGradientStyle","",Class<IFunction>::getFunction(lineGradientStyle),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("lineStyle","",Class<IFunction>::getFunction(lineStyle),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("beginFill","",Class<IFunction>::getFunction(beginFill),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("beginGradientFill","",Class<IFunction>::getFunction(beginGradientFill),NORMAL_METHOD,true);
@@ -2712,41 +2714,117 @@ ASFUNCTIONBODY(Graphics,lineStyle)
 	return NULL;
 }
 
-ASFUNCTIONBODY(Graphics,beginGradientFill)
+ASFUNCTIONBODY(Graphics,lineBitmapStyle)
 {
 	Graphics* th=static_cast<Graphics*>(obj);
-	assert_and_throw(argslen>=4);
 	th->checkAndSetScaling();
 
-	FILLSTYLE style(0xff);
+	_NR<BitmapData> bitmap;
+	_NR<Matrix> matrix;
+	bool repeat, smooth;
+	ARG_UNPACK (bitmap) (matrix, NullRef) (repeat, true) (smooth, false);
 
-	assert_and_throw(args[1]->getObjectType()==T_ARRAY);
-	Array* colors=Class<Array>::cast(args[1]);
+	if (bitmap.isNull())
+		return NULL;
 
-	assert_and_throw(args[2]->getObjectType()==T_ARRAY);
-	Array* alphas=Class<Array>::cast(args[2]);
+	LINESTYLE2 style(0xff);
+	style.Width = th->owner->getCurrentLineWidth();
+	style.HasFillFlag = true;
+	style.FillType = createBitmapFill(bitmap, matrix, repeat, smooth);
+	
+	th->owner->tokens.emplace_back(GeomToken(SET_STROKE, style));
+
+	return NULL;
+}
+
+ASFUNCTIONBODY(Graphics,lineGradientStyle)
+{
+	Graphics* th=static_cast<Graphics*>(obj);
+	th->checkAndSetScaling();
+
+	tiny_string type;
+	_NR<Array> colors;
+	_NR<Array> alphas;
+	_NR<Array> ratios;
+	_NR<Matrix> matrix;
+	tiny_string spreadMethod;
+	tiny_string interpolationMethod;
+	number_t focalPointRatio;
+	ARG_UNPACK (type) (colors) (alphas) (ratios) (matrix, NullRef)
+		(spreadMethod, "pad") (interpolationMethod, "rgb") (focalPointRatio, 0);
+
+	LINESTYLE2 style(0xff);
+	style.Width = th->owner->getCurrentLineWidth();
+	style.HasFillFlag = true;
+	style.FillType = createGradientFill(type, colors, alphas, ratios, matrix,
+					    spreadMethod, interpolationMethod,
+					    focalPointRatio);
+
+	th->owner->tokens.emplace_back(GeomToken(SET_STROKE, style));
+
+	return NULL;
+}
+
+ASFUNCTIONBODY(Graphics,beginGradientFill)
+{
+	Graphics* th=static_cast<Graphics*>(obj);
+	th->checkAndSetScaling();
+
+	tiny_string type;
+	_NR<Array> colors;
+	_NR<Array> alphas;
+	_NR<ASObject> ratiosParam;
+	_NR<Matrix> matrix;
+	tiny_string spreadMethod;
+	tiny_string interpolationMethod;
+	number_t focalPointRatio;
+	ARG_UNPACK (type) (colors) (alphas) (ratiosParam) (matrix, NullRef)
+		(spreadMethod, "pad") (interpolationMethod, "rgb") (focalPointRatio, 0);
 
-	//assert_and_throw(args[3]->getObjectType()==T_ARRAY);
 	//Work around for bug in YouTube player of July 13 2011
-	if(args[3]->getObjectType()==T_UNDEFINED)
+	if (!ratiosParam->is<Array>())
+		return NULL;
+	if (ratiosParam.isNull())
 		return NULL;
-	Array* ratios=Class<Array>::cast(args[3]);
+
+	ratiosParam->incRef();
+	_NR<Array> ratios = _MNR(ratiosParam->as<Array>());
+
+	FILLSTYLE style = createGradientFill(type, colors, alphas, ratios, matrix,
+					     spreadMethod, interpolationMethod,
+					     focalPointRatio);
+	th->owner->tokens.emplace_back(GeomToken(SET_FILL, style));
+
+	return NULL;
+}
+
+FILLSTYLE Graphics::createGradientFill(const tiny_string& type,
+				       _NR<Array> colors,
+				       _NR<Array> alphas,
+				       _NR<Array> ratios,
+				       _NR<Matrix> matrix,
+				       const tiny_string& spreadMethod,
+				       const tiny_string& interpolationMethod,
+				       number_t focalPointRatio)
+{
+	FILLSTYLE style(0xff);
+
+	if (colors.isNull() || alphas.isNull() || ratios.isNull())
+		return style;
 
 	int NumGradient = colors->size();
 	if (NumGradient != (int)alphas->size() || NumGradient != (int)ratios->size())
-		return NULL;
+		return style;
 
 	if (NumGradient < 1 || NumGradient > 15)
-		return NULL;
-
-	const tiny_string& type=args[0]->toString();
+		return style;
 
 	if(type == "linear")
 		style.FillStyleType=LINEAR_GRADIENT;
 	else if(type == "radial")
 		style.FillStyleType=RADIAL_GRADIENT;
 	else
-		return NULL;
+		return style;
 
 	// Don't support FOCALGRADIENT for now.
 	GRADIENT grad(0xff);
@@ -2758,65 +2836,39 @@ ASFUNCTIONBODY(Graphics,beginGradientFill)
 		grad.GradientRecords.push_back(record);
 	}
 
-	if(argslen > 4 && args[4]->getClass()==Class<Matrix>::getClass())
-	{
-		style.Matrix = static_cast<Matrix*>(args[4])->getMATRIX();
-		//Conversion from twips to pixels
-		cairo_matrix_scale(&style.Matrix, 1.0f/20.0f, 1.0f/20.0f);
-	}
-	else
+	if(matrix.isNull())
 	{
 		cairo_matrix_scale(&style.Matrix, 100.0/16384.0, 100.0/16384.0);
 	}
-
-	if(argslen > 5)
-	{
-		const tiny_string& spread=args[5]->toString();
-		if (spread == "pad")
-			grad.SpreadMode = 0;
-		else if (spread == "reflect")
-			grad.SpreadMode = 1;
-		else if (spread == "repeat")
-			grad.SpreadMode = 2;
-	}
 	else
 	{
-		//default is pad
-		grad.SpreadMode = 0;
+		style.Matrix = matrix->getMATRIX();
+		//Conversion from twips to pixels
+		cairo_matrix_scale(&style.Matrix, 1.0f/20.0f, 1.0f/20.0f);
 	}
 
-
-	if(argslen > 6)
-	{
-		const tiny_string& interp=args[6]->toString();
-		if (interp == "rgb")
-			grad.InterpolationMode = 0;
-		else if (interp == "linearRGB")
-			grad.InterpolationMode = 1;
-	}
+	if (spreadMethod == "pad")
+		grad.SpreadMode = 0;
+	else if (spreadMethod == "reflect")
+		grad.SpreadMode = 1;
+	else if (spreadMethod == "repeat")
+		grad.SpreadMode = 2;
 	else
-	{
-		//default is rgb
+		grad.SpreadMode = 0; // should not be reached
+
+	if (interpolationMethod == "rgb")
 		grad.InterpolationMode = 0;
-	}
+	else if (interpolationMethod == "linearRGB")
+		grad.InterpolationMode = 1;
+	else
+		grad.InterpolationMode = 0; // should not be reached
 
 	style.Gradient = grad;
-	th->owner->tokens.emplace_back(GeomToken(SET_FILL, style));
-	return NULL;
+	return style;
 }
 
-ASFUNCTIONBODY(Graphics,beginBitmapFill)
+FILLSTYLE Graphics::createBitmapFill(_R<BitmapData> bitmap, _NR<Matrix> matrix, bool repeat, bool smooth)
 {
-	Graphics* th = obj->as<Graphics>();
-	_NR<BitmapData> bitmap;
-	_NR<Matrix> matrix;
-	bool repeat, smooth;
-	ARG_UNPACK (bitmap) (matrix, NullRef) (repeat, true) (smooth, false);
-
-	if(bitmap.isNull())
-		return NULL;
-
-	th->checkAndSetScaling();
 	FILLSTYLE style(0xff);
 	if(repeat && smooth)
 		style.FillStyleType = REPEATING_BITMAP;
@@ -2831,6 +2883,24 @@ ASFUNCTIONBODY(Graphics,beginBitmapFill)
 		style.Matrix = matrix->getMATRIX();
 
 	style.bitmap = bitmap->getBitmapContainer();
+
+	return style;
+}
+
+ASFUNCTIONBODY(Graphics,beginBitmapFill)
+{
+	Graphics* th = obj->as<Graphics>();
+	_NR<BitmapData> bitmap;
+	_NR<Matrix> matrix;
+	bool repeat, smooth;
+	ARG_UNPACK (bitmap) (matrix, NullRef) (repeat, true) (smooth, false);
+
+	if(bitmap.isNull())
+		return NULL;
+
+	th->checkAndSetScaling();
+
+	FILLSTYLE style = createBitmapFill(bitmap, matrix, repeat, smooth);
 	th->owner->tokens.emplace_back(GeomToken(SET_FILL, style));
 	return NULL;
 }
diff --git a/src/scripting/flash/display/flashdisplay.h b/src/scripting/flash/display/flashdisplay.h
index a84fb97..d70c248 100644
--- a/src/scripting/flash/display/flashdisplay.h
+++ b/src/scripting/flash/display/flashdisplay.h
@@ -43,6 +43,7 @@ class RenderContext;
 class ApplicationDomain;
 class SecurityDomain;
 class BitmapData;
+class Matrix;
 
 class InteractiveObject: public DisplayObject
 {
@@ -192,6 +193,18 @@ private:
 				       double x3, double y3,
 				       double u1, double u2, double u3,
 				       double c[3]);
+	static FILLSTYLE createGradientFill(const tiny_string& type,
+					    _NR<Array> colors,
+					    _NR<Array> alphas,
+					    _NR<Array> ratios,
+					    _NR<Matrix> matrix,
+					    const tiny_string& spreadMethod,
+					    const tiny_string& interpolationMethod,
+					    number_t focalPointRatio);
+	static FILLSTYLE createBitmapFill(_R<BitmapData> bitmap,
+					  _NR<Matrix> matrix,
+					  bool repeat,
+					  bool smooth);
 public:
 	Graphics(Class_base* c):ASObject(c),curX(0),curY(0),owner(NULL)
 	{
@@ -202,6 +215,8 @@ public:
 	static void sinit(Class_base* c);
 	static void buildTraits(ASObject* o);
 	ASFUNCTION(_constructor);
+	ASFUNCTION(lineBitmapStyle);
+	ASFUNCTION(lineGradientStyle);
 	ASFUNCTION(lineStyle);
 	ASFUNCTION(beginFill);
 	ASFUNCTION(beginGradientFill);
diff --git a/src/swftypes.h b/src/swftypes.h
index cbba249..70f0e72 100644
--- a/src/swftypes.h
+++ b/src/swftypes.h
@@ -924,10 +924,10 @@ public:
 class LINESTYLE2
 {
 public:
-	LINESTYLE2(uint8_t v):FillType(v),version(v){}
+	LINESTYLE2(uint8_t v):HasFillFlag(false),FillType(v),version(v){}
 	UB StartCapStyle;
 	UB JointStyle;
-	UB HasFillFlag;
+	bool HasFillFlag;
 	UB NoHScaleFlag;
 	UB NoVScaleFlag;
 	UB PixelHintingFlag;
-- 
1.8.5.3

