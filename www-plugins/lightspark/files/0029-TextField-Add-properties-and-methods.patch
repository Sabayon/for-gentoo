From 338244c22be85c729a16a4ebd43a13d851f2cc15 Mon Sep 17 00:00:00 2001
From: Antti Ajanki <antti.ajanki@iki.fi>
Date: Wed, 8 May 2013 19:11:31 +0300
Subject: [PATCH 029/110] [TextField] Add properties and methods

---
 src/allclasses.h                       |   1 +
 src/scripting/abc.cpp                  |   1 +
 src/scripting/flash/text/flashtext.cpp | 124 +++++++++++++++++++++++++++++++--
 src/scripting/flash/text/flashtext.h   |  50 +++++++++----
 4 files changed, 158 insertions(+), 18 deletions(-)

diff --git a/src/allclasses.h b/src/allclasses.h
index 25e8fbc..c4d5731 100644
--- a/src/allclasses.h
+++ b/src/allclasses.h
@@ -204,6 +204,7 @@ REGISTER_CLASS_NAME(TextFieldAutoSize,"flash.text")
 REGISTER_CLASS_NAME(TextFieldType,"flash.text")
 REGISTER_CLASS_NAME(TextFormat,"flash.text")
 REGISTER_CLASS_NAME(TextFormatAlign,"flash.text")
+REGISTER_CLASS_NAME(TextInteractionMode,"flash.text")
 REGISTER_CLASS_NAME(TextLineMetrics,"flash.text")
 REGISTER_CLASS_NAME(StaticText,"flash.text")
 REGISTER_CLASS_NAME(StyleSheet,"flash.text")
diff --git a/src/scripting/abc.cpp b/src/scripting/abc.cpp
index f3ce601..608fe01 100644
--- a/src/scripting/abc.cpp
+++ b/src/scripting/abc.cpp
@@ -328,6 +328,7 @@ void ABCVm::registerClasses()
 	builtin->registerBuiltin("TextFormat","flash.text",Class<TextFormat>::getRef());
 	builtin->registerBuiltin("TextFormatAlign","flash.text",Class<TextFormatAlign>::getRef());
 	builtin->registerBuiltin("TextLineMetrics","flash.text",Class<TextLineMetrics>::getRef());
+	builtin->registerBuiltin("TextInteractionMode","flash.text",Class<TextInteractionMode>::getRef());
 	builtin->registerBuiltin("StaticText","flash.text",Class<StaticText>::getRef());
 
 	builtin->registerBuiltin("ContentElement","flash.text.engine",Class<ContentElement>::getRef());
diff --git a/src/scripting/flash/text/flashtext.cpp b/src/scripting/flash/text/flashtext.cpp
index 20de026..615bbb4 100644
--- a/src/scripting/flash/text/flashtext.cpp
+++ b/src/scripting/flash/text/flashtext.cpp
@@ -95,10 +95,11 @@ ASFUNCTIONBODY(ASFont,registerFont)
 TextField::TextField(Class_base* c, const TextData& textData, bool _selectable, bool readOnly)
 	: InteractiveObject(c), TextData(textData), type(ET_READ_ONLY), 
 	  antiAliasType(AA_NORMAL), gridFitType(GF_PIXEL),
-	  alwaysShowSelection(false), condenseWhite(false), 
-	  displayAsPassword(false), maxChars(0),
-	  mouseWheelEnabled(true), selectable(_selectable), sharpness(0),
-	  useRichTextClipboard(false)
+	  textInteractionMode(TI_NORMAL), alwaysShowSelection(false),
+	  caretIndex(0), condenseWhite(false), displayAsPassword(false),
+	  embedFonts(false), maxChars(0), mouseWheelEnabled(true),
+	  selectable(_selectable), selectionBeginIndex(0), selectionEndIndex(0),
+	  sharpness(0), thickness(0), useRichTextClipboard(false)
 {
 	if (!readOnly)
 	{
@@ -122,6 +123,9 @@ void TextField::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("getLineMetrics","",Class<IFunction>::getFunction(_getLineMetrics),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("getLineOffset","",Class<IFunction>::getFunction(_getLineOffset),NORMAL_METHOD,true);
 	c->setDeclaredMethodByQName("getLineText","",Class<IFunction>::getFunction(_getLineText),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("replaceSelectedText","",Class<IFunction>::getFunction(_replaceSelectedText),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("replaceText","",Class<IFunction>::getFunction(_replaceText),NORMAL_METHOD,true);
+	c->setDeclaredMethodByQName("setSelection","",Class<IFunction>::getFunction(_setSelection),NORMAL_METHOD,true);
 
 	// properties
 	c->setDeclaredMethodByQName("antiAliasType","",Class<IFunction>::getFunction(TextField::_getAntiAliasType),GETTER_METHOD,true);
@@ -151,22 +155,29 @@ void TextField::sinit(Class_base* c)
 	c->setDeclaredMethodByQName("bottomScrollV","",Class<IFunction>::getFunction(TextField::_getBottomScrollV),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("restrict","",Class<IFunction>::getFunction(TextField::_getRestrict),GETTER_METHOD,true);
 	c->setDeclaredMethodByQName("restrict","",Class<IFunction>::getFunction(TextField::_setRestrict),SETTER_METHOD,true);
+	c->setDeclaredMethodByQName("textInteractionMode","",Class<IFunction>::getFunction(TextField::_getTextInteractionMode),GETTER_METHOD,true);
 
 	REGISTER_GETTER_SETTER(c, alwaysShowSelection);
 	REGISTER_GETTER_SETTER(c, background);
 	REGISTER_GETTER_SETTER(c, backgroundColor);
 	REGISTER_GETTER_SETTER(c, border);
 	REGISTER_GETTER_SETTER(c, borderColor);
+	REGISTER_GETTER(c, caretIndex);
 	REGISTER_GETTER_SETTER(c, condenseWhite);
 	REGISTER_GETTER_SETTER(c, displayAsPassword);
+	REGISTER_GETTER_SETTER(c, embedFonts);
 	REGISTER_GETTER_SETTER(c, maxChars);
 	REGISTER_GETTER_SETTER(c, multiline);
 	REGISTER_GETTER_SETTER(c, mouseWheelEnabled);
 	REGISTER_GETTER_SETTER(c, scrollH);
 	REGISTER_GETTER_SETTER(c, scrollV);
 	REGISTER_GETTER_SETTER(c, selectable);
+	REGISTER_GETTER(c, selectionBeginIndex);
+	REGISTER_GETTER(c, selectionEndIndex);
 	REGISTER_GETTER_SETTER(c, sharpness);
+	REGISTER_GETTER_SETTER(c, styleSheet);
 	REGISTER_GETTER_SETTER(c, textColor);
+	REGISTER_GETTER_SETTER(c, thickness);
 	REGISTER_GETTER_SETTER(c, type);
 	REGISTER_GETTER_SETTER(c, useRichTextClipboard);
 }
@@ -176,18 +187,31 @@ ASFUNCTIONBODY_GETTER_SETTER(TextField, background);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, backgroundColor);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, border);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, borderColor);
+ASFUNCTIONBODY_GETTER(TextField, caretIndex);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, condenseWhite);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, displayAsPassword); // stub
+ASFUNCTIONBODY_GETTER_SETTER(TextField, embedFonts); // stub
 ASFUNCTIONBODY_GETTER_SETTER(TextField, maxChars); // stub
 ASFUNCTIONBODY_GETTER_SETTER(TextField, multiline);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, mouseWheelEnabled); // stub
 ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, scrollH, validateScrollH);
 ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, scrollV, validateScrollV);
 ASFUNCTIONBODY_GETTER_SETTER(TextField, selectable); // stub
+ASFUNCTIONBODY_GETTER(TextField, selectionBeginIndex);
+ASFUNCTIONBODY_GETTER(TextField, selectionEndIndex);
 ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, sharpness, validateSharpness); // stub
+ASFUNCTIONBODY_GETTER_SETTER(TextField, styleSheet); // stub
 ASFUNCTIONBODY_GETTER_SETTER(TextField, textColor);
+ASFUNCTIONBODY_GETTER_SETTER_CB(TextField, thickness, validateThickness); // stub
 ASFUNCTIONBODY_GETTER_SETTER(TextField, useRichTextClipboard); // stub
 
+void TextField::finalize()
+{
+	ASObject::finalize();
+	restrictChars.reset();
+	styleSheet.reset();
+}
+
 void TextField::buildTraits(ASObject* o)
 {
 }
@@ -700,6 +724,87 @@ ASFUNCTIONBODY(TextField,_setRestrict)
 	return NULL;
 }
 
+ASFUNCTIONBODY(TextField,_getTextInteractionMode)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	if (th->textInteractionMode == TI_NORMAL)
+		return Class<ASString>::getInstanceS("normal");
+	else
+		return Class<ASString>::getInstanceS("selection");
+}
+
+ASFUNCTIONBODY(TextField,_setSelection)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	ARG_UNPACK(th->selectionBeginIndex) (th->selectionEndIndex);
+
+	if (th->selectionBeginIndex < 0)
+		th->selectionBeginIndex = 0;
+
+	if (th->selectionEndIndex >= (int32_t)th->text.numChars())
+		th->selectionEndIndex = th->text.numChars()-1;
+
+	if (th->selectionBeginIndex > th->selectionEndIndex)
+		th->selectionBeginIndex = th->selectionEndIndex;
+
+	if (th->selectionBeginIndex == th->selectionEndIndex)
+		th->caretIndex = th->selectionBeginIndex;
+
+	LOG(LOG_NOT_IMPLEMENTED, "TextField selection will not be rendered");
+
+	return NULL;
+}
+
+ASFUNCTIONBODY(TextField,_replaceSelectedText)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	tiny_string newText;
+	ARG_UNPACK(newText);
+	th->replaceText(th->selectionBeginIndex, th->selectionEndIndex, newText);
+	return NULL;
+}
+
+ASFUNCTIONBODY(TextField,_replaceText)
+{
+	TextField* th=Class<TextField>::cast(obj);
+	int32_t begin;
+	int32_t end;
+	tiny_string newText;
+	ARG_UNPACK(begin) (end) (newText);
+	th->replaceText(begin, end, newText);
+	return NULL;
+}
+
+void TextField::replaceText(unsigned int begin, unsigned int end, const tiny_string& newText)
+{
+	if (!styleSheet.isNull())
+		throw Class<ASError>::getInstanceS("Can not replace text on text field with a style sheet");
+
+	if (begin >= text.numChars())
+	{
+		text = text + newText;
+	}
+	else if (begin > end)
+	{
+		return;
+	}
+	else if (end >= text.numChars())
+	{
+		text = text.substr(0, begin) + newText;
+	}
+	else
+	{
+		text = text.substr(0, begin) + newText + text.substr(end, text.end());
+	}
+
+	textUpdated();
+}
+
+void TextField::validateThickness(number_t /*oldValue*/)
+{
+	thickness = dmin(dmax(thickness, -200.), 200.);
+}
+
 void TextField::validateSharpness(number_t /*oldValue*/)
 {
 	sharpness = dmin(dmax(sharpness, -400.), 400.);
@@ -851,6 +956,9 @@ void TextField::textUpdated()
 {
 	scrollH = 0;
 	scrollV = 1;
+	selectionBeginIndex = 0;
+	selectionEndIndex = 0;
+
 	if(onStage)
 		requestInvalidation(getSys());
 	else
@@ -1274,6 +1382,14 @@ void GridFitType::sinit(Class_base* c)
 	c->setVariableByQName("SUBPIXEL","",Class<ASString>::getInstanceS("subpixel"),DECLARED_TRAIT);
 }
 
+void TextInteractionMode::sinit(Class_base* c)
+{
+	c->setConstructor(NULL);
+	c->setSuper(Class<ASObject>::getRef());
+	c->setVariableByQName("NORMAL","",Class<ASString>::getInstanceS("normal"),DECLARED_TRAIT);
+	c->setVariableByQName("SELECTION","",Class<ASString>::getInstanceS("selection"),DECLARED_TRAIT);
+}
+
 void TextLineMetrics::sinit(Class_base* c)
 {
 	c->setConstructor(Class<IFunction>::getFunction(_constructor));
diff --git a/src/scripting/flash/text/flashtext.h b/src/scripting/flash/text/flashtext.h
index 57fcc14..601b368 100644
--- a/src/scripting/flash/text/flashtext.h
+++ b/src/scripting/flash/text/flashtext.h
@@ -52,6 +52,20 @@ public:
 	ASPROPERTY_GETTER(tiny_string, fontType);
 };
 
+class StyleSheet: public EventDispatcher
+{
+private:
+	std::map<tiny_string, _R<ASObject> > styles;
+public:
+	StyleSheet(Class_base* c):EventDispatcher(c){}
+	void finalize();
+	ASFUNCTION(getStyle);
+	ASFUNCTION(setStyle);
+	ASFUNCTION(_getStyleNames);
+	static void sinit(Class_base* c);
+	static void buildTraits(ASObject* o);
+};
+
 class TextField: public InteractiveObject, public TextData
 {
 private:
@@ -76,6 +90,7 @@ public:
 	enum EDIT_TYPE { ET_READ_ONLY, ET_EDITABLE };
 	enum ANTI_ALIAS_TYPE { AA_NORMAL, AA_ADVANCED };
 	enum GRID_FIT_TYPE { GF_NONE, GF_PIXEL, GF_SUBPIXEL };
+	enum TEXT_INTERACTION_MODE { TI_NORMAL, TI_SELECTION };
 private:
 	_NR<DisplayObject> hitTestImpl(_NR<DisplayObject> last, number_t x, number_t y, HIT_TYPE type);
 	void renderImpl(RenderContext& ctxt) const;
@@ -87,6 +102,7 @@ private:
 	void updateSizes();
 	tiny_string toHtmlText();
 	tiny_string compactHTMLWhiteSpace(const tiny_string&);
+	void validateThickness(number_t oldValue);
 	void validateSharpness(number_t oldValue);
 	void validateScrollH(int32_t oldValue);
 	void validateScrollV(int32_t oldValue);
@@ -94,12 +110,15 @@ private:
 	int32_t getMaxScrollV();
 	void textUpdated();
 	void setSizeAndPositionFromAutoSize();
+	void replaceText(unsigned int begin, unsigned int end, const tiny_string& newText);
 	EDIT_TYPE type;
 	ANTI_ALIAS_TYPE antiAliasType;
 	GRID_FIT_TYPE gridFitType;
+	TEXT_INTERACTION_MODE textInteractionMode;
         _NR<ASString> restrictChars;
 public:
 	TextField(Class_base* c, const TextData& textData=TextData(), bool _selectable=true, bool readOnly=true);
+	void finalize();
 	static void sinit(Class_base* c);
 	static void buildTraits(ASObject* o);
 	void setHtmlText(const tiny_string& html);
@@ -139,21 +158,31 @@ public:
 	ASFUNCTION(_getBottomScrollV);
 	ASFUNCTION(_getRestrict);
 	ASFUNCTION(_setRestrict);
+	ASFUNCTION(_getTextInteractionMode);
+	ASFUNCTION(_setSelection);
+	ASFUNCTION(_replaceText);
+	ASFUNCTION(_replaceSelectedText);
 	ASPROPERTY_GETTER_SETTER(bool, alwaysShowSelection);
 	ASFUNCTION_GETTER_SETTER(background);
 	ASFUNCTION_GETTER_SETTER(backgroundColor);
 	ASFUNCTION_GETTER_SETTER(border);
 	ASFUNCTION_GETTER_SETTER(borderColor);
+	ASPROPERTY_GETTER(int32_t, caretIndex);
 	ASPROPERTY_GETTER_SETTER(bool, condenseWhite);
 	ASPROPERTY_GETTER_SETTER(bool, displayAsPassword);
+	ASPROPERTY_GETTER_SETTER(bool, embedFonts);
 	ASPROPERTY_GETTER_SETTER(int32_t, maxChars);
 	ASFUNCTION_GETTER_SETTER(multiline);
 	ASPROPERTY_GETTER_SETTER(bool, mouseWheelEnabled);
 	ASFUNCTION_GETTER_SETTER(scrollH);
 	ASFUNCTION_GETTER_SETTER(scrollV);
 	ASPROPERTY_GETTER_SETTER(bool, selectable);
+	ASPROPERTY_GETTER(int32_t, selectionBeginIndex);
+	ASPROPERTY_GETTER(int32_t, selectionEndIndex);
 	ASPROPERTY_GETTER_SETTER(number_t, sharpness);
+	ASPROPERTY_GETTER_SETTER(_NR<StyleSheet>, styleSheet);
 	ASFUNCTION_GETTER_SETTER(textColor);
+	ASPROPERTY_GETTER_SETTER(number_t, thickness);
 	ASFUNCTION_GETTER_SETTER(type);
 	ASPROPERTY_GETTER_SETTER(bool, useRichTextClipboard);
 };
@@ -209,20 +238,6 @@ public:
 	static void sinit(Class_base* c);
 };
 
-class StyleSheet: public EventDispatcher
-{
-private:
-	std::map<tiny_string, _R<ASObject> > styles;
-public:
-	StyleSheet(Class_base* c):EventDispatcher(c){}
-	void finalize();
-	ASFUNCTION(getStyle);
-	ASFUNCTION(setStyle);
-	ASFUNCTION(_getStyleNames);
-	static void sinit(Class_base* c);
-	static void buildTraits(ASObject* o);
-};
-
 class StaticText: public DisplayObject, public TokenContainer
 {
 private:
@@ -279,6 +294,13 @@ public:
 	static void sinit(Class_base* c);
 };
 
+class TextInteractionMode: public ASObject
+{
+public:
+	TextInteractionMode(Class_base* c):ASObject(c){}
+	static void sinit(Class_base* c);
+};
+
 class TextLineMetrics : public ASObject
 {
 protected:
-- 
1.8.5.3

