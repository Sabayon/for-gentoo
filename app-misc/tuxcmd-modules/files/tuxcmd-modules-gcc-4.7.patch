Description: Fix FTBFS with gcc 4.7
 .
 Add GCC 4.7 compatibility for ZipArchive
Origin: upstream, commit:e932ebbf029a4cdb38c61a838e8f3669debd410e, commit:f4d8292cf67ab481a27ea88f04e2edd6dc16119e
Bug-Debian: http://bugs.debian.org/667402
Forwarded: no
Author: Salvatore Bonaccorso <carnil@debian.org>
Last-Update: 2012-04-04

---
--- a/zip/ZipArchive/ZipCollections_stl.h
+++ b/zip/ZipArchive/ZipCollections_stl.h
@@ -86,10 +86,10 @@
 	}
 	TYPE& GetAt(size_t uIndex) {return this->at(uIndex);}
 	const TYPE& GetAt(size_t uIndex) const {return this->at(uIndex);} 
-	size_t Add(const TYPE& x) {push_back(x);return GetUpperBound();}
+	size_t Add(const TYPE& x) {this->push_back(x);return GetUpperBound();}
 	void RemoveAll() {this->clear();}
-	void RemoveAt(size_t uIndex) { erase(GetIterFromIndex(uIndex));}
-	void InsertAt(size_t uIndex, const TYPE& x){insert(GetIterFromIndex(uIndex), x);}
+	void RemoveAt(size_t uIndex) { this->erase(GetIterFromIndex(uIndex));}
+	void InsertAt(size_t uIndex, const TYPE& x){this->insert(GetIterFromIndex(uIndex), x);}
 
 	TYPE& operator[](size_t uIndex)
 	{
@@ -114,8 +114,8 @@
 	typedef typename std::list<TYPE>::iterator iterator;
 	typedef typename std::list<TYPE>::const_iterator const_iterator;
 	size_t GetCount() const {return this->size();}
-	void AddTail(const TYPE& x){push_back(x);}
-	void AddHead(const TYPE& x){push_front(x);}
+	void AddTail(const TYPE& x){this->push_back(x);}
+	void AddHead(const TYPE& x){this->push_front(x);}
 	void RemoveHead() {this->pop_front();}
 	void RemoveTail() {this->pop_back();}
 	void RemoveAll() {this->clear();}
@@ -131,7 +131,7 @@
 	TYPE& GetPrev(iterator& pos) { return *pos--;}
 	TYPE GetPrev(iterator& pos) const{ return *pos--;}
 	iterator Find(TYPE& x) { return std::find(this->begin(), this->end(), x);}
-	void RemoveAt(iterator& pos) { erase(pos);}
+	void RemoveAt(iterator& pos) { this->erase(pos);}
 	bool IteratorValid(const_iterator &iter) const
 	{
 		return iter != this->end();
@@ -167,11 +167,11 @@
 	typedef typename  std::map<KEY,VALUE, std::less<KEY>, std::allocator<std::pair<const KEY, VALUE> > >::value_type v_type;
 	void SetAt( KEY key, VALUE newValue)
 	{
-		insert(v_type(key, newValue));
+		this->insert(v_type(key, newValue));
 	}
 	ZBOOL RemoveKey( KEY key )
 	{
-		return erase(key) != 0;
+		return this->erase(key) != 0;
 	}
 	ZBOOL Lookup( KEY key, VALUE& rValue ) const
 	{
--- a/zip/ZipArchive/stdafx.h
+++ b/zip/ZipArchive/stdafx.h
@@ -23,6 +23,7 @@
 
 #include "_features.h"
 #include "_platform.h"
+#include <unistd.h>
 
 #if _MSC_VER > 1000
 	#pragma once
